; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\SDK\C\Library\Algorithms\Information theory and signal processing\Coding theory\Lossless compression algorithms\Dictionary coders\Lempel?Ziv\Lempel?Ziv?Markov chain (LZMA)\xz\src\c89\liblzma\common\filter_flags_decoder.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_lzma_filter_flags_decode
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\common\filter_flags_decoder.c
;	COMDAT _lzma_filter_flags_decode
_TEXT	SEGMENT
tv154 = -36						; size = 8
tv137 = -28						; size = 4
_ret$32249 = -24					; size = 4
_ret_$32245 = -20					; size = 4
_props_size$32241 = -16					; size = 8
_ret_$32237 = -4					; size = 4
_filter$ = 8						; size = 4
_allocator$ = 12					; size = 4
_in$ = 16						; size = 4
_in_pos$ = 20						; size = 4
_in_size$ = 24						; size = 4
_lzma_filter_flags_decode PROC				; COMDAT

; 20   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 24	 sub	 esp, 36			; 00000024H

; 21   : 	// Set the pointer to NULL so the caller can always safely free it.
; 22   : 	filter->options = NULL;

  00006	8b 45 08	 mov	 eax, DWORD PTR _filter$[ebp]
  00009	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN10@lzma_filte:

; 23   : 
; 24   : 	// Filter ID
; 25   : 	return_if_error(lzma_vli_decode(&filter->id, NULL,
; 26   : 			in, in_pos, in_size));

  00010	8b 4d 18	 mov	 ecx, DWORD PTR _in_size$[ebp]
  00013	51		 push	 ecx
  00014	8b 55 14	 mov	 edx, DWORD PTR _in_pos$[ebp]
  00017	52		 push	 edx
  00018	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0001b	50		 push	 eax
  0001c	6a 00		 push	 0
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _filter$[ebp]
  00021	51		 push	 ecx
  00022	e8 00 00 00 00	 call	 _lzma_vli_decode
  00027	83 c4 14	 add	 esp, 20			; 00000014H
  0002a	89 45 fc	 mov	 DWORD PTR _ret_$32237[ebp], eax
  0002d	83 7d fc 00	 cmp	 DWORD PTR _ret_$32237[ebp], 0
  00031	74 08		 je	 SHORT $LN9@lzma_filte
  00033	8b 45 fc	 mov	 eax, DWORD PTR _ret_$32237[ebp]
  00036	e9 b4 00 00 00	 jmp	 $LN11@lzma_filte
$LN9@lzma_filte:
  0003b	33 d2		 xor	 edx, edx
  0003d	75 d1		 jne	 SHORT $LN10@lzma_filte

; 27   : 
; 28   : 	if (filter->id >= LZMA_FILTER_RESERVED_START)

  0003f	8b 45 08	 mov	 eax, DWORD PTR _filter$[ebp]
  00042	89 45 e4	 mov	 DWORD PTR tv137[ebp], eax
  00045	8b 4d e4	 mov	 ecx, DWORD PTR tv137[ebp]
  00048	81 79 04 00 00
	00 40		 cmp	 DWORD PTR [ecx+4], 1073741824 ; 40000000H
  0004f	72 14		 jb	 SHORT $LN5@lzma_filte
  00051	77 08		 ja	 SHORT $LN13@lzma_filte
  00053	8b 55 e4	 mov	 edx, DWORD PTR tv137[ebp]
  00056	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00059	72 0a		 jb	 SHORT $LN5@lzma_filte
$LN13@lzma_filte:

; 29   : 		return LZMA_DATA_ERROR;

  0005b	b8 09 00 00 00	 mov	 eax, 9
  00060	e9 8a 00 00 00	 jmp	 $LN11@lzma_filte
$LN5@lzma_filte:

; 30   : 
; 31   : 	// Size of Properties
; 32   :   {
; 33   : 	lzma_vli props_size;
; 34   : 	return_if_error(lzma_vli_decode(&props_size, NULL,
; 35   : 			in, in_pos, in_size));

  00065	8b 45 18	 mov	 eax, DWORD PTR _in_size$[ebp]
  00068	50		 push	 eax
  00069	8b 4d 14	 mov	 ecx, DWORD PTR _in_pos$[ebp]
  0006c	51		 push	 ecx
  0006d	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00070	52		 push	 edx
  00071	6a 00		 push	 0
  00073	8d 45 f0	 lea	 eax, DWORD PTR _props_size$32241[ebp]
  00076	50		 push	 eax
  00077	e8 00 00 00 00	 call	 _lzma_vli_decode
  0007c	83 c4 14	 add	 esp, 20			; 00000014H
  0007f	89 45 ec	 mov	 DWORD PTR _ret_$32245[ebp], eax
  00082	83 7d ec 00	 cmp	 DWORD PTR _ret_$32245[ebp], 0
  00086	74 05		 je	 SHORT $LN4@lzma_filte
  00088	8b 45 ec	 mov	 eax, DWORD PTR _ret_$32245[ebp]
  0008b	eb 62		 jmp	 SHORT $LN11@lzma_filte
$LN4@lzma_filte:
  0008d	33 c9		 xor	 ecx, ecx
  0008f	75 d4		 jne	 SHORT $LN5@lzma_filte

; 36   : 
; 37   : 	// Filter Properties
; 38   : 	if (in_size - *in_pos < props_size)

  00091	8b 55 14	 mov	 edx, DWORD PTR _in_pos$[ebp]
  00094	8b 45 18	 mov	 eax, DWORD PTR _in_size$[ebp]
  00097	2b 02		 sub	 eax, DWORD PTR [edx]
  00099	33 c9		 xor	 ecx, ecx
  0009b	89 45 dc	 mov	 DWORD PTR tv154[ebp], eax
  0009e	89 4d e0	 mov	 DWORD PTR tv154[ebp+4], ecx
  000a1	8b 55 e0	 mov	 edx, DWORD PTR tv154[ebp+4]
  000a4	3b 55 f4	 cmp	 edx, DWORD PTR _props_size$32241[ebp+4]
  000a7	77 11		 ja	 SHORT $LN1@lzma_filte
  000a9	72 08		 jb	 SHORT $LN14@lzma_filte
  000ab	8b 45 dc	 mov	 eax, DWORD PTR tv154[ebp]
  000ae	3b 45 f0	 cmp	 eax, DWORD PTR _props_size$32241[ebp]
  000b1	73 07		 jae	 SHORT $LN1@lzma_filte
$LN14@lzma_filte:

; 39   : 		return LZMA_DATA_ERROR;

  000b3	b8 09 00 00 00	 mov	 eax, 9
  000b8	eb 35		 jmp	 SHORT $LN11@lzma_filte
$LN1@lzma_filte:

; 40   : 
; 41   :   {
; 42   : 	const lzma_ret ret = lzma_properties_decode(
; 43   : 			filter, allocator, in + *in_pos, (size_t)props_size);

  000ba	8b 4d f0	 mov	 ecx, DWORD PTR _props_size$32241[ebp]
  000bd	51		 push	 ecx
  000be	8b 55 14	 mov	 edx, DWORD PTR _in_pos$[ebp]
  000c1	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  000c4	03 02		 add	 eax, DWORD PTR [edx]
  000c6	50		 push	 eax
  000c7	8b 4d 0c	 mov	 ecx, DWORD PTR _allocator$[ebp]
  000ca	51		 push	 ecx
  000cb	8b 55 08	 mov	 edx, DWORD PTR _filter$[ebp]
  000ce	52		 push	 edx
  000cf	e8 00 00 00 00	 call	 _lzma_properties_decode
  000d4	83 c4 10	 add	 esp, 16			; 00000010H
  000d7	89 45 e8	 mov	 DWORD PTR _ret$32249[ebp], eax

; 44   : 
; 45   : //W	*in_pos += props_size;
; 46   :   *in_pos = (size_t)(*in_pos + props_size);

  000da	8b 45 14	 mov	 eax, DWORD PTR _in_pos$[ebp]
  000dd	8b 08		 mov	 ecx, DWORD PTR [eax]
  000df	33 d2		 xor	 edx, edx
  000e1	03 4d f0	 add	 ecx, DWORD PTR _props_size$32241[ebp]
  000e4	13 55 f4	 adc	 edx, DWORD PTR _props_size$32241[ebp+4]
  000e7	8b 45 14	 mov	 eax, DWORD PTR _in_pos$[ebp]
  000ea	89 08		 mov	 DWORD PTR [eax], ecx

; 47   : 
; 48   : 	return ret;

  000ec	8b 45 e8	 mov	 eax, DWORD PTR _ret$32249[ebp]
$LN11@lzma_filte:

; 49   :   }}
; 50   : }

  000ef	8b e5		 mov	 esp, ebp
  000f1	5d		 pop	 ebp
  000f2	c3		 ret	 0
_lzma_filter_flags_decode ENDP
END
