; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\SDK\C\Library\Algorithms\Information theory and signal processing\Coding theory\Lossless compression algorithms\Dictionary coders\Lempel?Ziv\Lempel?Ziv?Markov chain (LZMA)\xz\src\WindowsGetVersion.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	??_C@_09FLKFJBLM@ntdll?4dll?$AA@		; `string'
PUBLIC	??_C@_0O@JGECDCHJ@RtlGetVersion?$AA@		; `string'
EXTRN	__imp__FreeLibrary@4:PROC
EXTRN	__imp__LoadLibraryA@4:PROC
;	COMDAT ??_C@_0O@JGECDCHJ@RtlGetVersion?$AA@
CONST	SEGMENT
??_C@_0O@JGECDCHJ@RtlGetVersion?$AA@ DB 'RtlGetVersion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FLKFJBLM@ntdll?4dll?$AA@
CONST	SEGMENT
??_C@_09FLKFJBLM@ntdll?4dll?$AA@ DB 'ntdll.dll', 00H	; `string'
PUBLIC	_GetWindowsVer
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\windowsgetversion.c
;	COMDAT _GetWindowsVer
_TEXT	SEGMENT
_os_info$27356 = -176					; size = 156
_RtlGetVersionPtr$27346 = -12				; size = 4
_hNtdll$27347 = -8					; size = 4
_os_version$ = -4					; size = 4
_GetWindowsVer PROC					; COMDAT

; 26   : { LONG

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b0 00 00
	00		 sub	 esp, 176		; 000000b0H

; 27   :     os_version = -1L;

  00009	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR _os_version$[ebp], -1

; 28   : 
; 29   :   { PFN_RTLGETVERSIONEX
; 30   :       RtlGetVersionPtr;
; 31   : 
; 32   :     HMODULE hNtdll = LoadLibrary (TEXT("ntdll.dll"));

  00010	68 00 00 00 00	 push	 OFFSET ??_C@_09FLKFJBLM@ntdll?4dll?$AA@
  00015	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadLibraryA@4
  0001b	89 45 f8	 mov	 DWORD PTR _hNtdll$27347[ebp], eax

; 33   : 
; 34   :     if (not hNtdll)

  0001e	83 7d f8 00	 cmp	 DWORD PTR _hNtdll$27347[ebp], 0
  00022	75 02		 jne	 SHORT $LN3@GetWindows

; 35   :       goto LoadLibraryFailed;

  00024	eb 64		 jmp	 SHORT $LoadLibraryFailed$27350
$LN3@GetWindows:

; 36   : 
; 37   :     RtlGetVersionPtr = (PFN_RTLGETVERSIONEX)GetProcAddress (hNtdll, "RtlGetVersion");

  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JGECDCHJ@RtlGetVersion?$AA@
  0002b	8b 45 f8	 mov	 eax, DWORD PTR _hNtdll$27347[ebp]
  0002e	50		 push	 eax
  0002f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetProcAddress@8
  00035	89 45 f4	 mov	 DWORD PTR _RtlGetVersionPtr$27346[ebp], eax

; 38   : 
; 39   :     if (RtlGetVersionPtr == NULL)

  00038	83 7d f4 00	 cmp	 DWORD PTR _RtlGetVersionPtr$27346[ebp], 0
  0003c	75 02		 jne	 SHORT $LN2@GetWindows

; 40   :       goto GetProcFailed;

  0003e	eb 40		 jmp	 SHORT $GetVersionFailed$27359
$LN2@GetWindows:

; 41   : 
; 42   :     { OSVERSIONINFOEX
; 43   :         os_info;
; 44   : 
; 45   :       os_info.dwOSVersionInfoSize = sizeof(os_info);

  00040	c7 85 50 ff ff
	ff 9c 00 00 00	 mov	 DWORD PTR _os_info$27356[ebp], 156 ; 0000009cH

; 46   :       if ((*RtlGetVersionPtr) (&os_info) != STATUS_SUCCESS)

  0004a	8d 8d 50 ff ff
	ff		 lea	 ecx, DWORD PTR _os_info$27356[ebp]
  00050	51		 push	 ecx
  00051	ff 55 f4	 call	 DWORD PTR _RtlGetVersionPtr$27346[ebp]
  00054	85 c0		 test	 eax, eax
  00056	74 02		 je	 SHORT $LN1@GetWindows

; 47   :         goto GetVersionFailed;

  00058	eb 26		 jmp	 SHORT $GetVersionFailed$27359
$LN1@GetWindows:

; 48   : 
; 49   :       os_version = PACKVERSION(os_info.dwMajorVersion, os_info.dwMinorVersion);

  0005a	8b 95 58 ff ff
	ff		 mov	 edx, DWORD PTR _os_info$27356[ebp+8]
  00060	81 e2 ff ff 00
	00		 and	 edx, 65535		; 0000ffffH
  00066	0f b7 c2	 movzx	 eax, dx
  00069	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _os_info$27356[ebp+4]
  0006f	81 e1 ff ff 00
	00		 and	 ecx, 65535		; 0000ffffH
  00075	0f b7 d1	 movzx	 edx, cx
  00078	c1 e2 10	 shl	 edx, 16			; 00000010H
  0007b	0b c2		 or	 eax, edx
  0007d	89 45 fc	 mov	 DWORD PTR _os_version$[ebp], eax
$GetVersionFailed$27359:
$GetProcFailed$27355:

; 50   :     }
; 51   : 
; 52   : GetVersionFailed:
; 53   : GetProcFailed:
; 54   :     FreeLibrary (hNtdll);

  00080	8b 45 f8	 mov	 eax, DWORD PTR _hNtdll$27347[ebp]
  00083	50		 push	 eax
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__FreeLibrary@4
$LoadLibraryFailed$27350:

; 55   :   }
; 56   : 
; 57   : LoadLibraryFailed:
; 58   :   return (os_version);

  0008a	8b 45 fc	 mov	 eax, DWORD PTR _os_version$[ebp]

; 59   : }

  0008d	8b e5		 mov	 esp, ebp
  0008f	5d		 pop	 ebp
  00090	c3		 ret	 0
_GetWindowsVer ENDP
END
