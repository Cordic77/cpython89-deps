; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\SDK\C\Library\Algorithms\Information theory and signal processing\Coding theory\Lossless compression algorithms\Dictionary coders\Lempel?Ziv\Lempel?Ziv?Markov chain (LZMA)\xz\src\c89\liblzma\common\filter_common.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

_features DQ	4000000000000001H
	DD	060H
	DB	00H
	DB	01H
	DB	01H
	ORG $+1
	DQ	0000000000000021H
	DD	060H
	DB	00H
	DB	01H
	DB	01H
	ORG $+1
	DQ	0000000000000004H
	DD	04H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DQ	0000000000000005H
	DD	04H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DQ	0000000000000006H
	DD	04H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DQ	0000000000000007H
	DD	04H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DQ	0000000000000008H
	DD	04H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DQ	0000000000000009H
	DD	04H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DQ	0000000000000003H
	DD	020H
	DB	01H
	DB	00H
	DB	00H
	ORG $+1
	DQ	ffffffffffffffffH
	DD	00H
	DB	00H
	DB	00H
	DB	00H
	ORG $+1
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\common\filter_common.c
;	COMDAT _validate_chain
_TEXT	SEGMENT
tv170 = -48						; size = 4
tv169 = -44						; size = 4
tv153 = -40						; size = 4
tv142 = -36						; size = 4
tv141 = -32						; size = 4
tv140 = -28						; size = 4
tv129 = -24						; size = 4
_j$32308 = -20						; size = 4
_changes_size_count$32301 = -16				; size = 4
_non_last_ok$32302 = -9					; size = 1
_i$32304 = -8						; size = 4
_last_ok$32303 = -1					; size = 1
_filters$ = 8						; size = 4
_count$ = 12						; size = 4
_validate_chain PROC					; COMDAT

; 295  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 30	 sub	 esp, 48			; 00000030H
  00006	56		 push	 esi

; 296  : 	// There must be at least one filter.
; 297  : 	if (filters == NULL || filters[0].id == LZMA_VLI_UNKNOWN)

  00007	83 7d 08 00	 cmp	 DWORD PTR _filters$[ebp], 0
  0000b	74 16		 je	 SHORT $LN11@validate_c
  0000d	8b 45 08	 mov	 eax, DWORD PTR _filters$[ebp]
  00010	89 45 e8	 mov	 DWORD PTR tv129[ebp], eax
  00013	8b 4d e8	 mov	 ecx, DWORD PTR tv129[ebp]
  00016	8b 55 e8	 mov	 edx, DWORD PTR tv129[ebp]
  00019	8b 01		 mov	 eax, DWORD PTR [ecx]
  0001b	23 42 04	 and	 eax, DWORD PTR [edx+4]
  0001e	83 f8 ff	 cmp	 eax, -1
  00021	75 0a		 jne	 SHORT $LN12@validate_c
$LN11@validate_c:

; 298  : 		return LZMA_PROG_ERROR;

  00023	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  00028	e9 31 01 00 00	 jmp	 $LN13@validate_c
$LN12@validate_c:

; 299  : 
; 300  : 	// Number of non-last filters that may change the size of the data
; 301  : 	// significantly (that is, more than 1-2 % or so).
; 302  :   {
; 303  : 	size_t changes_size_count = 0;

  0002d	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _changes_size_count$32301[ebp], 0

; 304  : 
; 305  : 	// True if it is OK to add a new filter after the current filter.
; 306  : 	bool non_last_ok = true;

  00034	c6 45 f7 01	 mov	 BYTE PTR _non_last_ok$32302[ebp], 1

; 307  : 
; 308  : 	// True if the last filter in the given chain is actually usable as
; 309  : 	// the last filter. Only filters that support embedding End of Payload
; 310  : 	// Marker can be used as the last filter in the chain.
; 311  : 	bool last_ok = false;

  00038	c6 45 ff 00	 mov	 BYTE PTR _last_ok$32303[ebp], 0

; 312  : 
; 313  : 	size_t i = 0;

  0003c	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$32304[ebp], 0
$LN10@validate_c:

; 314  : 	do {
; 315  : 		size_t j;
; 316  : 		for (j = 0; filters[i].id != features[j].id; ++j)

  00043	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _j$32308[ebp], 0
  0004a	eb 09		 jmp	 SHORT $LN7@validate_c
$LN6@validate_c:
  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _j$32308[ebp]
  0004f	83 c1 01	 add	 ecx, 1
  00052	89 4d ec	 mov	 DWORD PTR _j$32308[ebp], ecx
$LN7@validate_c:
  00055	8b 55 f8	 mov	 edx, DWORD PTR _i$32304[ebp]
  00058	c1 e2 04	 shl	 edx, 4
  0005b	8b 45 ec	 mov	 eax, DWORD PTR _j$32308[ebp]
  0005e	c1 e0 04	 shl	 eax, 4
  00061	8b 4d 08	 mov	 ecx, DWORD PTR _filters$[ebp]
  00064	89 4d e4	 mov	 DWORD PTR tv140[ebp], ecx
  00067	89 55 e0	 mov	 DWORD PTR tv141[ebp], edx
  0006a	89 45 dc	 mov	 DWORD PTR tv142[ebp], eax
  0006d	8b 55 e0	 mov	 edx, DWORD PTR tv141[ebp]
  00070	8b 45 e4	 mov	 eax, DWORD PTR tv140[ebp]
  00073	8b 4d dc	 mov	 ecx, DWORD PTR tv142[ebp]
  00076	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  00079	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _features[ecx]
  0007f	75 15		 jne	 SHORT $LN15@validate_c
  00081	8b 45 e0	 mov	 eax, DWORD PTR tv141[ebp]
  00084	8b 4d e4	 mov	 ecx, DWORD PTR tv140[ebp]
  00087	8b 55 dc	 mov	 edx, DWORD PTR tv142[ebp]
  0008a	8b 44 01 04	 mov	 eax, DWORD PTR [ecx+eax+4]
  0008e	3b 82 04 00 00
	00		 cmp	 eax, DWORD PTR _features[edx+4]
  00094	74 2c		 je	 SHORT $LN5@validate_c
$LN15@validate_c:

; 317  : 			if (features[j].id == LZMA_VLI_UNKNOWN)

  00096	8b 4d ec	 mov	 ecx, DWORD PTR _j$32308[ebp]
  00099	c1 e1 04	 shl	 ecx, 4
  0009c	89 4d d8	 mov	 DWORD PTR tv153[ebp], ecx
  0009f	8b 55 d8	 mov	 edx, DWORD PTR tv153[ebp]
  000a2	8b 45 d8	 mov	 eax, DWORD PTR tv153[ebp]
  000a5	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _features[edx]
  000ab	23 88 04 00 00
	00		 and	 ecx, DWORD PTR _features[eax+4]
  000b1	83 f9 ff	 cmp	 ecx, -1
  000b4	75 0a		 jne	 SHORT $LN4@validate_c

; 318  : 				return LZMA_OPTIONS_ERROR;

  000b6	b8 08 00 00 00	 mov	 eax, 8
  000bb	e9 9e 00 00 00	 jmp	 $LN13@validate_c
$LN4@validate_c:

; 319  : 
; 320  : 		// If the previous filter in the chain cannot be a non-last
; 321  : 		// filter, the chain is invalid.
; 322  : 		if (!non_last_ok)

  000c0	eb 8a		 jmp	 SHORT $LN6@validate_c
$LN5@validate_c:
  000c2	0f b6 55 f7	 movzx	 edx, BYTE PTR _non_last_ok$32302[ebp]
  000c6	85 d2		 test	 edx, edx
  000c8	75 0a		 jne	 SHORT $LN3@validate_c

; 323  : 			return LZMA_OPTIONS_ERROR;

  000ca	b8 08 00 00 00	 mov	 eax, 8
  000cf	e9 8a 00 00 00	 jmp	 $LN13@validate_c
$LN3@validate_c:

; 324  : 
; 325  : 		non_last_ok = features[j].non_last_ok;

  000d4	8b 45 ec	 mov	 eax, DWORD PTR _j$32308[ebp]
  000d7	c1 e0 04	 shl	 eax, 4
  000da	8a 88 0c 00 00
	00		 mov	 cl, BYTE PTR _features[eax+12]
  000e0	88 4d f7	 mov	 BYTE PTR _non_last_ok$32302[ebp], cl

; 326  : 		last_ok = features[j].last_ok;

  000e3	8b 55 ec	 mov	 edx, DWORD PTR _j$32308[ebp]
  000e6	c1 e2 04	 shl	 edx, 4
  000e9	8a 82 0d 00 00
	00		 mov	 al, BYTE PTR _features[edx+13]
  000ef	88 45 ff	 mov	 BYTE PTR _last_ok$32303[ebp], al

; 327  : 		changes_size_count += features[j].changes_size;

  000f2	8b 4d ec	 mov	 ecx, DWORD PTR _j$32308[ebp]
  000f5	c1 e1 04	 shl	 ecx, 4
  000f8	0f b6 91 0e 00
	00 00		 movzx	 edx, BYTE PTR _features[ecx+14]
  000ff	03 55 f0	 add	 edx, DWORD PTR _changes_size_count$32301[ebp]
  00102	89 55 f0	 mov	 DWORD PTR _changes_size_count$32301[ebp], edx

; 328  : 
; 329  : 	} while (filters[++i].id != LZMA_VLI_UNKNOWN);

  00105	8b 45 f8	 mov	 eax, DWORD PTR _i$32304[ebp]
  00108	83 c0 01	 add	 eax, 1
  0010b	89 45 f8	 mov	 DWORD PTR _i$32304[ebp], eax
  0010e	8b 4d f8	 mov	 ecx, DWORD PTR _i$32304[ebp]
  00111	c1 e1 04	 shl	 ecx, 4
  00114	8b 55 08	 mov	 edx, DWORD PTR _filters$[ebp]
  00117	89 55 d4	 mov	 DWORD PTR tv169[ebp], edx
  0011a	89 4d d0	 mov	 DWORD PTR tv170[ebp], ecx
  0011d	8b 45 d0	 mov	 eax, DWORD PTR tv170[ebp]
  00120	8b 4d d4	 mov	 ecx, DWORD PTR tv169[ebp]
  00123	8b 55 d0	 mov	 edx, DWORD PTR tv170[ebp]
  00126	8b 75 d4	 mov	 esi, DWORD PTR tv169[ebp]
  00129	8b 04 01	 mov	 eax, DWORD PTR [ecx+eax]
  0012c	23 44 16 04	 and	 eax, DWORD PTR [esi+edx+4]
  00130	83 f8 ff	 cmp	 eax, -1
  00133	0f 85 0a ff ff
	ff		 jne	 $LN10@validate_c

; 330  : 
; 331  : 	// There must be 1-4 filters. The last filter must be usable as
; 332  : 	// the last filter in the chain. A maximum of three filters are
; 333  : 	// allowed to change the size of the data.
; 334  : 	if (i > LZMA_FILTERS_MAX || !last_ok || changes_size_count > 3)

  00139	83 7d f8 04	 cmp	 DWORD PTR _i$32304[ebp], 4
  0013d	77 0e		 ja	 SHORT $LN1@validate_c
  0013f	0f b6 4d ff	 movzx	 ecx, BYTE PTR _last_ok$32303[ebp]
  00143	85 c9		 test	 ecx, ecx
  00145	74 06		 je	 SHORT $LN1@validate_c
  00147	83 7d f0 03	 cmp	 DWORD PTR _changes_size_count$32301[ebp], 3
  0014b	76 07		 jbe	 SHORT $LN2@validate_c
$LN1@validate_c:

; 335  : 		return LZMA_OPTIONS_ERROR;

  0014d	b8 08 00 00 00	 mov	 eax, 8
  00152	eb 0a		 jmp	 SHORT $LN13@validate_c
$LN2@validate_c:

; 336  : 
; 337  : 	*count = i;

  00154	8b 55 0c	 mov	 edx, DWORD PTR _count$[ebp]
  00157	8b 45 f8	 mov	 eax, DWORD PTR _i$32304[ebp]
  0015a	89 02		 mov	 DWORD PTR [edx], eax

; 338  :   }
; 339  : 
; 340  : 	return LZMA_OK;

  0015c	33 c0		 xor	 eax, eax
$LN13@validate_c:

; 341  : }

  0015e	5e		 pop	 esi
  0015f	8b e5		 mov	 esp, ebp
  00161	5d		 pop	 ebp
  00162	c3		 ret	 0
_validate_chain ENDP
PUBLIC	_lzma_raw_coder_memusage
; Function compile flags: /Odtp
;	COMDAT _lzma_raw_coder_memusage
_TEXT	SEGMENT
tv167 = -40						; size = 4
tv166 = -36						; size = 4
_usage$32376 = -32					; size = 8
_fc$32370 = -20						; size = 4
_total$32365 = -16					; size = 8
_i$32366 = -8						; size = 4
_tmp$32363 = -4						; size = 4
_coder_find$ = 8					; size = 4
_filters$ = 12						; size = 4
_lzma_raw_coder_memusage PROC				; COMDAT

; 407  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 28	 sub	 esp, 40			; 00000028H
  00006	56		 push	 esi

; 408  : 	// The chain has to have at least one filter.
; 409  : 	{
; 410  : 		size_t tmp;
; 411  : 		if (validate_chain(filters, &tmp) != LZMA_OK)

  00007	8d 45 fc	 lea	 eax, DWORD PTR _tmp$32363[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 0c	 mov	 ecx, DWORD PTR _filters$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 _validate_chain
  00014	83 c4 08	 add	 esp, 8
  00017	85 c0		 test	 eax, eax
  00019	74 0b		 je	 SHORT $LN8@lzma_raw_c

; 412  : 			return UINT64_MAX;

  0001b	83 c8 ff	 or	 eax, -1
  0001e	83 ca ff	 or	 edx, -1
  00021	e9 e7 00 00 00	 jmp	 $LN9@lzma_raw_c
$LN8@lzma_raw_c:

; 413  : 	}
; 414  : 
; 415  :   {
; 416  : 	uint64_t total = 0;

  00026	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _total$32365[ebp], 0
  0002d	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _total$32365[ebp+4], 0

; 417  : 	size_t i = 0;

  00034	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$32366[ebp], 0
$LN7@lzma_raw_c:

; 418  : 
; 419  : 	do {
; 420  : 		const lzma_filter_coder *const fc
; 421  : 				 = coder_find(filters[i].id);

  0003b	8b 55 f8	 mov	 edx, DWORD PTR _i$32366[ebp]
  0003e	c1 e2 04	 shl	 edx, 4
  00041	8b 45 0c	 mov	 eax, DWORD PTR _filters$[ebp]
  00044	8b 4c 10 04	 mov	 ecx, DWORD PTR [eax+edx+4]
  00048	51		 push	 ecx
  00049	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  0004c	52		 push	 edx
  0004d	ff 55 08	 call	 DWORD PTR _coder_find$[ebp]
  00050	83 c4 08	 add	 esp, 8
  00053	89 45 ec	 mov	 DWORD PTR _fc$32370[ebp], eax

; 422  : 		if (fc == NULL)

  00056	83 7d ec 00	 cmp	 DWORD PTR _fc$32370[ebp], 0
  0005a	75 0b		 jne	 SHORT $LN4@lzma_raw_c

; 423  : 			return UINT64_MAX; // Unsupported Filter ID

  0005c	83 c8 ff	 or	 eax, -1
  0005f	83 ca ff	 or	 edx, -1
  00062	e9 a6 00 00 00	 jmp	 $LN9@lzma_raw_c
$LN4@lzma_raw_c:

; 424  : 
; 425  : 		if (fc->memusage == NULL) {

  00067	8b 45 ec	 mov	 eax, DWORD PTR _fc$32370[ebp]
  0006a	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  0006e	75 17		 jne	 SHORT $LN3@lzma_raw_c

; 426  : 			// This filter doesn't have a function to calculate
; 427  : 			// the memory usage and validate the options. Such
; 428  : 			// filters need only little memory, so we use 1 KiB
; 429  : 			// as a good estimate. They also accept all possible
; 430  : 			// options, so there's no need to worry about lack
; 431  : 			// of validation.
; 432  : 			total += 1024;

  00070	8b 4d f0	 mov	 ecx, DWORD PTR _total$32365[ebp]
  00073	81 c1 00 04 00
	00		 add	 ecx, 1024		; 00000400H
  00079	8b 55 f4	 mov	 edx, DWORD PTR _total$32365[ebp+4]
  0007c	83 d2 00	 adc	 edx, 0
  0007f	89 4d f0	 mov	 DWORD PTR _total$32365[ebp], ecx
  00082	89 55 f4	 mov	 DWORD PTR _total$32365[ebp+4], edx

; 433  : 		} else {

  00085	eb 44		 jmp	 SHORT $LN6@lzma_raw_c
$LN3@lzma_raw_c:

; 434  : 			// Call the filter-specific memory usage calculation
; 435  : 			// function.
; 436  : 			const uint64_t usage
; 437  : 					= fc->memusage(filters[i].options);

  00087	8b 45 f8	 mov	 eax, DWORD PTR _i$32366[ebp]
  0008a	c1 e0 04	 shl	 eax, 4
  0008d	8b 4d 0c	 mov	 ecx, DWORD PTR _filters$[ebp]
  00090	8b 54 01 08	 mov	 edx, DWORD PTR [ecx+eax+8]
  00094	52		 push	 edx
  00095	8b 45 ec	 mov	 eax, DWORD PTR _fc$32370[ebp]
  00098	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0009b	ff d1		 call	 ecx
  0009d	83 c4 04	 add	 esp, 4
  000a0	89 45 e0	 mov	 DWORD PTR _usage$32376[ebp], eax
  000a3	89 55 e4	 mov	 DWORD PTR _usage$32376[ebp+4], edx

; 438  : 			if (usage == UINT64_MAX)

  000a6	8b 55 e0	 mov	 edx, DWORD PTR _usage$32376[ebp]
  000a9	23 55 e4	 and	 edx, DWORD PTR _usage$32376[ebp+4]
  000ac	83 fa ff	 cmp	 edx, -1
  000af	75 08		 jne	 SHORT $LN1@lzma_raw_c

; 439  : 				return UINT64_MAX; // Invalid options

  000b1	83 c8 ff	 or	 eax, -1
  000b4	83 ca ff	 or	 edx, -1
  000b7	eb 54		 jmp	 SHORT $LN9@lzma_raw_c
$LN1@lzma_raw_c:

; 440  : 
; 441  : 			total += usage;

  000b9	8b 45 f0	 mov	 eax, DWORD PTR _total$32365[ebp]
  000bc	03 45 e0	 add	 eax, DWORD PTR _usage$32376[ebp]
  000bf	8b 4d f4	 mov	 ecx, DWORD PTR _total$32365[ebp+4]
  000c2	13 4d e4	 adc	 ecx, DWORD PTR _usage$32376[ebp+4]
  000c5	89 45 f0	 mov	 DWORD PTR _total$32365[ebp], eax
  000c8	89 4d f4	 mov	 DWORD PTR _total$32365[ebp+4], ecx
$LN6@lzma_raw_c:

; 442  : 		}
; 443  : 	} while (filters[++i].id != LZMA_VLI_UNKNOWN);

  000cb	8b 55 f8	 mov	 edx, DWORD PTR _i$32366[ebp]
  000ce	83 c2 01	 add	 edx, 1
  000d1	89 55 f8	 mov	 DWORD PTR _i$32366[ebp], edx
  000d4	8b 45 f8	 mov	 eax, DWORD PTR _i$32366[ebp]
  000d7	c1 e0 04	 shl	 eax, 4
  000da	8b 4d 0c	 mov	 ecx, DWORD PTR _filters$[ebp]
  000dd	89 4d dc	 mov	 DWORD PTR tv166[ebp], ecx
  000e0	89 45 d8	 mov	 DWORD PTR tv167[ebp], eax
  000e3	8b 55 d8	 mov	 edx, DWORD PTR tv167[ebp]
  000e6	8b 45 dc	 mov	 eax, DWORD PTR tv166[ebp]
  000e9	8b 4d d8	 mov	 ecx, DWORD PTR tv167[ebp]
  000ec	8b 75 dc	 mov	 esi, DWORD PTR tv166[ebp]
  000ef	8b 14 10	 mov	 edx, DWORD PTR [eax+edx]
  000f2	23 54 0e 04	 and	 edx, DWORD PTR [esi+ecx+4]
  000f6	83 fa ff	 cmp	 edx, -1
  000f9	0f 85 3c ff ff
	ff		 jne	 $LN7@lzma_raw_c

; 444  : 
; 445  : 	// Add some fixed amount of extra. It's to compensate memory usage
; 446  : 	// of Stream, Block etc. coders, malloc() overhead, stack etc.
; 447  : 	return total + LZMA_MEMUSAGE_BASE;

  000ff	8b 45 f0	 mov	 eax, DWORD PTR _total$32365[ebp]
  00102	05 00 80 00 00	 add	 eax, 32768		; 00008000H
  00107	8b 55 f4	 mov	 edx, DWORD PTR _total$32365[ebp+4]
  0010a	83 d2 00	 adc	 edx, 0
$LN9@lzma_raw_c:

; 448  :   }
; 449  : }

  0010d	5e		 pop	 esi
  0010e	8b e5		 mov	 esp, ebp
  00110	5d		 pop	 ebp
  00111	c3		 ret	 0
_lzma_raw_coder_memusage ENDP
PUBLIC	_lzma_raw_coder_init
; Function compile flags: /Odtp
;	COMDAT _lzma_raw_coder_init
_TEXT	SEGMENT
_ret$32356 = -112					; size = 4
_fc$32350 = -108					; size = 4
_i$32346 = -104						; size = 4
_j$32339 = -100						; size = 4
_fc$32340 = -96						; size = 4
_i$32335 = -92						; size = 4
_filters$32333 = -88					; size = 80
_ret_$32331 = -8					; size = 4
_count$ = -4						; size = 4
_next$ = 8						; size = 4
_allocator$ = 12					; size = 4
_options$ = 16						; size = 4
_coder_find$ = 20					; size = 4
_is_encoder$ = 24					; size = 1
_lzma_raw_coder_init PROC				; COMDAT

; 348  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 70	 sub	 esp, 112		; 00000070H
  00006	56		 push	 esi
$LN17@lzma_raw_c@2:

; 349  : 	// Do some basic validation and get the number of filters.
; 350  : 	size_t count;
; 351  : 	return_if_error(validate_chain(options, &count));

  00007	8d 45 fc	 lea	 eax, DWORD PTR _count$[ebp]
  0000a	50		 push	 eax
  0000b	8b 4d 10	 mov	 ecx, DWORD PTR _options$[ebp]
  0000e	51		 push	 ecx
  0000f	e8 00 00 00 00	 call	 _validate_chain
  00014	83 c4 08	 add	 esp, 8
  00017	89 45 f8	 mov	 DWORD PTR _ret_$32331[ebp], eax
  0001a	83 7d f8 00	 cmp	 DWORD PTR _ret_$32331[ebp], 0
  0001e	74 08		 je	 SHORT $LN16@lzma_raw_c@2
  00020	8b 45 f8	 mov	 eax, DWORD PTR _ret_$32331[ebp]
  00023	e9 a9 01 00 00	 jmp	 $LN18@lzma_raw_c@2
$LN16@lzma_raw_c@2:
  00028	33 d2		 xor	 edx, edx
  0002a	75 db		 jne	 SHORT $LN17@lzma_raw_c@2

; 352  : 
; 353  : 	// Set the filter functions and copy the options pointer.
; 354  :   {
; 355  : 	lzma_filter_info filters[LZMA_FILTERS_MAX + 1];
; 356  : 	if (is_encoder) {

  0002c	0f b6 45 18	 movzx	 eax, BYTE PTR _is_encoder$[ebp]
  00030	85 c0		 test	 eax, eax
  00032	0f 84 ad 00 00
	00		 je	 $LN13@lzma_raw_c@2

; 357  : 		size_t i;
; 358  : 
; 359  : 		for (i = 0; i < count; ++i) {

  00038	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _i$32335[ebp], 0
  0003f	eb 09		 jmp	 SHORT $LN12@lzma_raw_c@2
$LN11@lzma_raw_c@2:
  00041	8b 4d a4	 mov	 ecx, DWORD PTR _i$32335[ebp]
  00044	83 c1 01	 add	 ecx, 1
  00047	89 4d a4	 mov	 DWORD PTR _i$32335[ebp], ecx
$LN12@lzma_raw_c@2:
  0004a	8b 55 a4	 mov	 edx, DWORD PTR _i$32335[ebp]
  0004d	3b 55 fc	 cmp	 edx, DWORD PTR _count$[ebp]
  00050	0f 83 8a 00 00
	00		 jae	 $LN10@lzma_raw_c@2

; 360  : 			// The order of the filters is reversed in the
; 361  : 			// encoder. It allows more efficient handling
; 362  : 			// of the uncompressed data.
; 363  : 			const size_t j = count - i - 1;

  00056	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00059	2b 45 a4	 sub	 eax, DWORD PTR _i$32335[ebp]
  0005c	83 e8 01	 sub	 eax, 1
  0005f	89 45 9c	 mov	 DWORD PTR _j$32339[ebp], eax

; 364  : 
; 365  : 			const lzma_filter_coder *const fc
; 366  : 					= coder_find(options[i].id);

  00062	8b 4d a4	 mov	 ecx, DWORD PTR _i$32335[ebp]
  00065	c1 e1 04	 shl	 ecx, 4
  00068	8b 55 10	 mov	 edx, DWORD PTR _options$[ebp]
  0006b	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0006f	50		 push	 eax
  00070	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00073	51		 push	 ecx
  00074	ff 55 14	 call	 DWORD PTR _coder_find$[ebp]
  00077	83 c4 08	 add	 esp, 8
  0007a	89 45 a0	 mov	 DWORD PTR _fc$32340[ebp], eax

; 367  : 			if (fc == NULL || fc->init == NULL)

  0007d	83 7d a0 00	 cmp	 DWORD PTR _fc$32340[ebp], 0
  00081	74 09		 je	 SHORT $LN8@lzma_raw_c@2
  00083	8b 55 a0	 mov	 edx, DWORD PTR _fc$32340[ebp]
  00086	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  0008a	75 0a		 jne	 SHORT $LN9@lzma_raw_c@2
$LN8@lzma_raw_c@2:

; 368  : 				return LZMA_OPTIONS_ERROR;

  0008c	b8 08 00 00 00	 mov	 eax, 8
  00091	e9 3b 01 00 00	 jmp	 $LN18@lzma_raw_c@2
$LN9@lzma_raw_c@2:

; 369  : 
; 370  : 			filters[j].id = options[i].id;

  00096	8b 45 a4	 mov	 eax, DWORD PTR _i$32335[ebp]
  00099	c1 e0 04	 shl	 eax, 4
  0009c	8b 4d 9c	 mov	 ecx, DWORD PTR _j$32339[ebp]
  0009f	c1 e1 04	 shl	 ecx, 4
  000a2	8b 55 10	 mov	 edx, DWORD PTR _options$[ebp]
  000a5	8b 34 02	 mov	 esi, DWORD PTR [edx+eax]
  000a8	89 74 0d a8	 mov	 DWORD PTR _filters$32333[ebp+ecx], esi
  000ac	8b 44 02 04	 mov	 eax, DWORD PTR [edx+eax+4]
  000b0	89 44 0d ac	 mov	 DWORD PTR _filters$32333[ebp+ecx+4], eax

; 371  : 			filters[j].init = fc->init;

  000b4	8b 4d 9c	 mov	 ecx, DWORD PTR _j$32339[ebp]
  000b7	c1 e1 04	 shl	 ecx, 4
  000ba	8b 55 a0	 mov	 edx, DWORD PTR _fc$32340[ebp]
  000bd	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  000c0	89 44 0d b0	 mov	 DWORD PTR _filters$32333[ebp+ecx+8], eax

; 372  : 			filters[j].options = options[i].options;

  000c4	8b 4d a4	 mov	 ecx, DWORD PTR _i$32335[ebp]
  000c7	c1 e1 04	 shl	 ecx, 4
  000ca	8b 55 9c	 mov	 edx, DWORD PTR _j$32339[ebp]
  000cd	c1 e2 04	 shl	 edx, 4
  000d0	8b 45 10	 mov	 eax, DWORD PTR _options$[ebp]
  000d3	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  000d7	89 4c 15 b4	 mov	 DWORD PTR _filters$32333[ebp+edx+12], ecx

; 373  : 		}

  000db	e9 61 ff ff ff	 jmp	 $LN11@lzma_raw_c@2
$LN10@lzma_raw_c@2:

; 374  : 	} else {

  000e0	e9 98 00 00 00	 jmp	 $LN7@lzma_raw_c@2
$LN13@lzma_raw_c@2:

; 375  : 		size_t i;
; 376  : 
; 377  : 		for (i = 0; i < count; ++i) {

  000e5	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _i$32346[ebp], 0
  000ec	eb 09		 jmp	 SHORT $LN6@lzma_raw_c@2
$LN5@lzma_raw_c@2:
  000ee	8b 55 98	 mov	 edx, DWORD PTR _i$32346[ebp]
  000f1	83 c2 01	 add	 edx, 1
  000f4	89 55 98	 mov	 DWORD PTR _i$32346[ebp], edx
$LN6@lzma_raw_c@2:
  000f7	8b 45 98	 mov	 eax, DWORD PTR _i$32346[ebp]
  000fa	3b 45 fc	 cmp	 eax, DWORD PTR _count$[ebp]
  000fd	73 7e		 jae	 SHORT $LN7@lzma_raw_c@2

; 378  : 			const lzma_filter_coder *const fc
; 379  : 					= coder_find(options[i].id);

  000ff	8b 4d 98	 mov	 ecx, DWORD PTR _i$32346[ebp]
  00102	c1 e1 04	 shl	 ecx, 4
  00105	8b 55 10	 mov	 edx, DWORD PTR _options$[ebp]
  00108	8b 44 0a 04	 mov	 eax, DWORD PTR [edx+ecx+4]
  0010c	50		 push	 eax
  0010d	8b 0c 0a	 mov	 ecx, DWORD PTR [edx+ecx]
  00110	51		 push	 ecx
  00111	ff 55 14	 call	 DWORD PTR _coder_find$[ebp]
  00114	83 c4 08	 add	 esp, 8
  00117	89 45 94	 mov	 DWORD PTR _fc$32350[ebp], eax

; 380  : 			if (fc == NULL || fc->init == NULL)

  0011a	83 7d 94 00	 cmp	 DWORD PTR _fc$32350[ebp], 0
  0011e	74 09		 je	 SHORT $LN2@lzma_raw_c@2
  00120	8b 55 94	 mov	 edx, DWORD PTR _fc$32350[ebp]
  00123	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00127	75 0a		 jne	 SHORT $LN3@lzma_raw_c@2
$LN2@lzma_raw_c@2:

; 381  : 				return LZMA_OPTIONS_ERROR;

  00129	b8 08 00 00 00	 mov	 eax, 8
  0012e	e9 9e 00 00 00	 jmp	 $LN18@lzma_raw_c@2
$LN3@lzma_raw_c@2:

; 382  : 
; 383  : 			filters[i].id = options[i].id;

  00133	8b 45 98	 mov	 eax, DWORD PTR _i$32346[ebp]
  00136	c1 e0 04	 shl	 eax, 4
  00139	8b 4d 98	 mov	 ecx, DWORD PTR _i$32346[ebp]
  0013c	c1 e1 04	 shl	 ecx, 4
  0013f	8b 55 10	 mov	 edx, DWORD PTR _options$[ebp]
  00142	8b 34 02	 mov	 esi, DWORD PTR [edx+eax]
  00145	89 74 0d a8	 mov	 DWORD PTR _filters$32333[ebp+ecx], esi
  00149	8b 44 02 04	 mov	 eax, DWORD PTR [edx+eax+4]
  0014d	89 44 0d ac	 mov	 DWORD PTR _filters$32333[ebp+ecx+4], eax

; 384  : 			filters[i].init = fc->init;

  00151	8b 4d 98	 mov	 ecx, DWORD PTR _i$32346[ebp]
  00154	c1 e1 04	 shl	 ecx, 4
  00157	8b 55 94	 mov	 edx, DWORD PTR _fc$32350[ebp]
  0015a	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0015d	89 44 0d b0	 mov	 DWORD PTR _filters$32333[ebp+ecx+8], eax

; 385  : 			filters[i].options = options[i].options;

  00161	8b 4d 98	 mov	 ecx, DWORD PTR _i$32346[ebp]
  00164	c1 e1 04	 shl	 ecx, 4
  00167	8b 55 98	 mov	 edx, DWORD PTR _i$32346[ebp]
  0016a	c1 e2 04	 shl	 edx, 4
  0016d	8b 45 10	 mov	 eax, DWORD PTR _options$[ebp]
  00170	8b 4c 08 08	 mov	 ecx, DWORD PTR [eax+ecx+8]
  00174	89 4c 15 b4	 mov	 DWORD PTR _filters$32333[ebp+edx+12], ecx

; 386  : 		}

  00178	e9 71 ff ff ff	 jmp	 $LN5@lzma_raw_c@2
$LN7@lzma_raw_c@2:

; 387  : 	}
; 388  : 
; 389  : 	// Terminate the array.
; 390  : 	filters[count].id = LZMA_VLI_UNKNOWN;

  0017d	8b 55 fc	 mov	 edx, DWORD PTR _count$[ebp]
  00180	c1 e2 04	 shl	 edx, 4
  00183	c7 44 15 a8 ff
	ff ff ff	 mov	 DWORD PTR _filters$32333[ebp+edx], -1
  0018b	c7 44 15 ac ff
	ff ff ff	 mov	 DWORD PTR _filters$32333[ebp+edx+4], -1

; 391  : 	filters[count].init = NULL;

  00193	8b 45 fc	 mov	 eax, DWORD PTR _count$[ebp]
  00196	c1 e0 04	 shl	 eax, 4
  00199	c7 44 05 b0 00
	00 00 00	 mov	 DWORD PTR _filters$32333[ebp+eax+8], 0

; 392  : 
; 393  : 	// Initialize the filters.
; 394  :   {
; 395  : 	const lzma_ret ret = lzma_next_filter_init(next, allocator, filters);

  001a1	8d 4d a8	 lea	 ecx, DWORD PTR _filters$32333[ebp]
  001a4	51		 push	 ecx
  001a5	8b 55 0c	 mov	 edx, DWORD PTR _allocator$[ebp]
  001a8	52		 push	 edx
  001a9	8b 45 08	 mov	 eax, DWORD PTR _next$[ebp]
  001ac	50		 push	 eax
  001ad	e8 00 00 00 00	 call	 _lzma_next_filter_init
  001b2	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b5	89 45 90	 mov	 DWORD PTR _ret$32356[ebp], eax

; 396  : 	if (ret != LZMA_OK)

  001b8	83 7d 90 00	 cmp	 DWORD PTR _ret$32356[ebp], 0
  001bc	74 10		 je	 SHORT $LN1@lzma_raw_c@2

; 397  : 		lzma_next_end(next, allocator);

  001be	8b 4d 0c	 mov	 ecx, DWORD PTR _allocator$[ebp]
  001c1	51		 push	 ecx
  001c2	8b 55 08	 mov	 edx, DWORD PTR _next$[ebp]
  001c5	52		 push	 edx
  001c6	e8 00 00 00 00	 call	 _lzma_next_end
  001cb	83 c4 08	 add	 esp, 8
$LN1@lzma_raw_c@2:

; 398  : 
; 399  : 	return ret;

  001ce	8b 45 90	 mov	 eax, DWORD PTR _ret$32356[ebp]
$LN18@lzma_raw_c@2:

; 400  :   }}
; 401  : }

  001d1	5e		 pop	 esi
  001d2	8b e5		 mov	 esp, ebp
  001d4	5d		 pop	 ebp
  001d5	c3		 ret	 0
_lzma_raw_coder_init ENDP
END
