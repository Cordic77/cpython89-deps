; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\SDK\C\Library\Algorithms\Information theory and signal processing\Coding theory\Lossless compression algorithms\Dictionary coders\Lempel?Ziv\Lempel?Ziv?Markov chain (LZMA)\xz\src\c89\liblzma\common\filter_flags_encoder.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_lzma_filter_flags_encode
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\common\filter_flags_encoder.c
;	COMDAT _lzma_filter_flags_encode
_TEXT	SEGMENT
tv131 = -24						; size = 4
_ret_$32268 = -20					; size = 4
_ret_$32261 = -16					; size = 4
_ret_$32256 = -12					; size = 4
_props_size$32252 = -8					; size = 4
_ret_$32249 = -4					; size = 4
_filter$ = 8						; size = 4
_out$ = 12						; size = 4
_out_pos$ = 16						; size = 4
_out_size$ = 20						; size = 4
_lzma_filter_flags_encode PROC				; COMDAT

; 33   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 18	 sub	 esp, 24			; 00000018H

; 34   : 	// Filter ID
; 35   : 	if (filter->id >= LZMA_FILTER_RESERVED_START)

  00006	8b 45 08	 mov	 eax, DWORD PTR _filter$[ebp]
  00009	89 45 e8	 mov	 DWORD PTR tv131[ebp], eax
  0000c	8b 4d e8	 mov	 ecx, DWORD PTR tv131[ebp]
  0000f	81 79 04 00 00
	00 40		 cmp	 DWORD PTR [ecx+4], 1073741824 ; 40000000H
  00016	72 14		 jb	 SHORT $LN17@lzma_filte@2
  00018	77 08		 ja	 SHORT $LN21@lzma_filte@2
  0001a	8b 55 e8	 mov	 edx, DWORD PTR tv131[ebp]
  0001d	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00020	72 0a		 jb	 SHORT $LN17@lzma_filte@2
$LN21@lzma_filte@2:

; 36   : 		return LZMA_PROG_ERROR;

  00022	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  00027	e9 d0 00 00 00	 jmp	 $LN19@lzma_filte@2
$LN17@lzma_filte@2:

; 37   : 
; 38   : 	return_if_error(lzma_vli_encode(filter->id, NULL,
; 39   : 			out, out_pos, out_size));

  0002c	8b 45 14	 mov	 eax, DWORD PTR _out_size$[ebp]
  0002f	50		 push	 eax
  00030	8b 4d 10	 mov	 ecx, DWORD PTR _out_pos$[ebp]
  00033	51		 push	 ecx
  00034	8b 55 0c	 mov	 edx, DWORD PTR _out$[ebp]
  00037	52		 push	 edx
  00038	6a 00		 push	 0
  0003a	8b 45 08	 mov	 eax, DWORD PTR _filter$[ebp]
  0003d	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00040	51		 push	 ecx
  00041	8b 10		 mov	 edx, DWORD PTR [eax]
  00043	52		 push	 edx
  00044	e8 00 00 00 00	 call	 _lzma_vli_encode
  00049	83 c4 18	 add	 esp, 24			; 00000018H
  0004c	89 45 fc	 mov	 DWORD PTR _ret_$32249[ebp], eax
  0004f	83 7d fc 00	 cmp	 DWORD PTR _ret_$32249[ebp], 0
  00053	74 08		 je	 SHORT $LN16@lzma_filte@2
  00055	8b 45 fc	 mov	 eax, DWORD PTR _ret_$32249[ebp]
  00058	e9 9f 00 00 00	 jmp	 $LN19@lzma_filte@2
$LN16@lzma_filte@2:
  0005d	33 c0		 xor	 eax, eax
  0005f	75 cb		 jne	 SHORT $LN17@lzma_filte@2
$LN13@lzma_filte@2:

; 40   : 
; 41   : 	// Size of Properties
; 42   :   {
; 43   : 	uint32_t props_size;
; 44   : 	return_if_error(lzma_properties_size(&props_size, filter));

  00061	8b 4d 08	 mov	 ecx, DWORD PTR _filter$[ebp]
  00064	51		 push	 ecx
  00065	8d 55 f8	 lea	 edx, DWORD PTR _props_size$32252[ebp]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _lzma_properties_size
  0006e	83 c4 08	 add	 esp, 8
  00071	89 45 f4	 mov	 DWORD PTR _ret_$32256[ebp], eax
  00074	83 7d f4 00	 cmp	 DWORD PTR _ret_$32256[ebp], 0
  00078	74 05		 je	 SHORT $LN12@lzma_filte@2
  0007a	8b 45 f4	 mov	 eax, DWORD PTR _ret_$32256[ebp]
  0007d	eb 7d		 jmp	 SHORT $LN19@lzma_filte@2
$LN12@lzma_filte@2:
  0007f	33 c0		 xor	 eax, eax
  00081	75 de		 jne	 SHORT $LN13@lzma_filte@2
$LN9@lzma_filte@2:

; 45   : 	return_if_error(lzma_vli_encode(props_size, NULL,
; 46   : 			out, out_pos, out_size));

  00083	8b 4d 14	 mov	 ecx, DWORD PTR _out_size$[ebp]
  00086	51		 push	 ecx
  00087	8b 55 10	 mov	 edx, DWORD PTR _out_pos$[ebp]
  0008a	52		 push	 edx
  0008b	8b 45 0c	 mov	 eax, DWORD PTR _out$[ebp]
  0008e	50		 push	 eax
  0008f	6a 00		 push	 0
  00091	8b 4d f8	 mov	 ecx, DWORD PTR _props_size$32252[ebp]
  00094	33 d2		 xor	 edx, edx
  00096	52		 push	 edx
  00097	51		 push	 ecx
  00098	e8 00 00 00 00	 call	 _lzma_vli_encode
  0009d	83 c4 18	 add	 esp, 24			; 00000018H
  000a0	89 45 f0	 mov	 DWORD PTR _ret_$32261[ebp], eax
  000a3	83 7d f0 00	 cmp	 DWORD PTR _ret_$32261[ebp], 0
  000a7	74 05		 je	 SHORT $LN8@lzma_filte@2
  000a9	8b 45 f0	 mov	 eax, DWORD PTR _ret_$32261[ebp]
  000ac	eb 4e		 jmp	 SHORT $LN19@lzma_filte@2
$LN8@lzma_filte@2:
  000ae	33 c0		 xor	 eax, eax
  000b0	75 d1		 jne	 SHORT $LN9@lzma_filte@2

; 47   : 
; 48   : 	// Filter Properties
; 49   : 	if (out_size - *out_pos < props_size)

  000b2	8b 4d 10	 mov	 ecx, DWORD PTR _out_pos$[ebp]
  000b5	8b 55 14	 mov	 edx, DWORD PTR _out_size$[ebp]
  000b8	2b 11		 sub	 edx, DWORD PTR [ecx]
  000ba	3b 55 f8	 cmp	 edx, DWORD PTR _props_size$32252[ebp]
  000bd	73 07		 jae	 SHORT $LN4@lzma_filte@2

; 50   : 		return LZMA_PROG_ERROR;

  000bf	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  000c4	eb 36		 jmp	 SHORT $LN19@lzma_filte@2
$LN4@lzma_filte@2:

; 51   : 
; 52   : 	return_if_error(lzma_properties_encode(filter, out + *out_pos));

  000c6	8b 45 10	 mov	 eax, DWORD PTR _out_pos$[ebp]
  000c9	8b 4d 0c	 mov	 ecx, DWORD PTR _out$[ebp]
  000cc	03 08		 add	 ecx, DWORD PTR [eax]
  000ce	51		 push	 ecx
  000cf	8b 55 08	 mov	 edx, DWORD PTR _filter$[ebp]
  000d2	52		 push	 edx
  000d3	e8 00 00 00 00	 call	 _lzma_properties_encode
  000d8	83 c4 08	 add	 esp, 8
  000db	89 45 ec	 mov	 DWORD PTR _ret_$32268[ebp], eax
  000de	83 7d ec 00	 cmp	 DWORD PTR _ret_$32268[ebp], 0
  000e2	74 05		 je	 SHORT $LN3@lzma_filte@2
  000e4	8b 45 ec	 mov	 eax, DWORD PTR _ret_$32268[ebp]
  000e7	eb 13		 jmp	 SHORT $LN19@lzma_filte@2
$LN3@lzma_filte@2:
  000e9	33 c0		 xor	 eax, eax
  000eb	75 d9		 jne	 SHORT $LN4@lzma_filte@2

; 53   : 
; 54   : 	*out_pos += props_size;

  000ed	8b 4d 10	 mov	 ecx, DWORD PTR _out_pos$[ebp]
  000f0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000f2	03 55 f8	 add	 edx, DWORD PTR _props_size$32252[ebp]
  000f5	8b 45 10	 mov	 eax, DWORD PTR _out_pos$[ebp]
  000f8	89 10		 mov	 DWORD PTR [eax], edx

; 55   :   }
; 56   : 
; 57   : 	return LZMA_OK;

  000fa	33 c0		 xor	 eax, eax
$LN19@lzma_filte@2:

; 58   : }

  000fc	8b e5		 mov	 esp, ebp
  000fe	5d		 pop	 ebp
  000ff	c3		 ret	 0
_lzma_filter_flags_encode ENDP
_TEXT	ENDS
PUBLIC	_lzma_filter_flags_size
; Function compile flags: /Odtp
;	COMDAT _lzma_filter_flags_size
_TEXT	SEGMENT
tv79 = -8						; size = 4
_ret_$32234 = -4					; size = 4
_size$ = 8						; size = 4
_filter$ = 12						; size = 4
_lzma_filter_flags_size PROC				; COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8
  00006	56		 push	 esi

; 19   : 	if (filter->id >= LZMA_FILTER_RESERVED_START)

  00007	8b 45 0c	 mov	 eax, DWORD PTR _filter$[ebp]
  0000a	89 45 f8	 mov	 DWORD PTR tv79[ebp], eax
  0000d	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  00010	81 79 04 00 00
	00 40		 cmp	 DWORD PTR [ecx+4], 1073741824 ; 40000000H
  00017	72 11		 jb	 SHORT $LN4@lzma_filte@3
  00019	77 08		 ja	 SHORT $LN8@lzma_filte@3
  0001b	8b 55 f8	 mov	 edx, DWORD PTR tv79[ebp]
  0001e	83 3a 00	 cmp	 DWORD PTR [edx], 0
  00021	72 07		 jb	 SHORT $LN4@lzma_filte@3
$LN8@lzma_filte@3:

; 20   : 		return LZMA_PROG_ERROR;

  00023	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  00028	eb 55		 jmp	 SHORT $LN6@lzma_filte@3
$LN4@lzma_filte@3:

; 21   : 
; 22   : 	return_if_error(lzma_properties_size(size, filter));

  0002a	8b 45 0c	 mov	 eax, DWORD PTR _filter$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  00031	51		 push	 ecx
  00032	e8 00 00 00 00	 call	 _lzma_properties_size
  00037	83 c4 08	 add	 esp, 8
  0003a	89 45 fc	 mov	 DWORD PTR _ret_$32234[ebp], eax
  0003d	83 7d fc 00	 cmp	 DWORD PTR _ret_$32234[ebp], 0
  00041	74 05		 je	 SHORT $LN3@lzma_filte@3
  00043	8b 45 fc	 mov	 eax, DWORD PTR _ret_$32234[ebp]
  00046	eb 37		 jmp	 SHORT $LN6@lzma_filte@3
$LN3@lzma_filte@3:
  00048	33 d2		 xor	 edx, edx
  0004a	75 de		 jne	 SHORT $LN4@lzma_filte@3

; 23   : 
; 24   : 	*size += lzma_vli_size(filter->id) + lzma_vli_size(*size);

  0004c	8b 45 0c	 mov	 eax, DWORD PTR _filter$[ebp]
  0004f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00052	51		 push	 ecx
  00053	8b 10		 mov	 edx, DWORD PTR [eax]
  00055	52		 push	 edx
  00056	e8 00 00 00 00	 call	 _lzma_vli_size
  0005b	83 c4 08	 add	 esp, 8
  0005e	8b f0		 mov	 esi, eax
  00060	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00063	8b 08		 mov	 ecx, DWORD PTR [eax]
  00065	33 d2		 xor	 edx, edx
  00067	52		 push	 edx
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 _lzma_vli_size
  0006e	83 c4 08	 add	 esp, 8
  00071	03 f0		 add	 esi, eax
  00073	8b 45 08	 mov	 eax, DWORD PTR _size$[ebp]
  00076	03 30		 add	 esi, DWORD PTR [eax]
  00078	8b 4d 08	 mov	 ecx, DWORD PTR _size$[ebp]
  0007b	89 31		 mov	 DWORD PTR [ecx], esi

; 25   : 
; 26   : 	return LZMA_OK;

  0007d	33 c0		 xor	 eax, eax
$LN6@lzma_filte@3:

; 27   : }

  0007f	5e		 pop	 esi
  00080	8b e5		 mov	 esp, ebp
  00082	5d		 pop	 ebp
  00083	c3		 ret	 0
_lzma_filter_flags_size ENDP
END
