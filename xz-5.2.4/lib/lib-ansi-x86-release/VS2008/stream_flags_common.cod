; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\SDK\C\Library\Algorithms\Information theory and signal processing\Coding theory\Lossless compression algorithms\Dictionary coders\Lempel?Ziv\Lempel?Ziv?Markov chain (LZMA)\xz\src\c89\liblzma\common\stream_flags_common.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_lzma_header_magic
PUBLIC	_lzma_footer_magic
_lzma_header_magic DB 0fdH
	DB	037H
	DB	07aH
	DB	058H
	DB	05aH
	DB	00H
	ORG $+2
_lzma_footer_magic DB 059H
	DB	05aH
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\common\stream_flags_common.h
;	COMDAT _is_backward_size_valid
_TEXT	SEGMENT
tv71 = -20						; size = 4
tv90 = -16						; size = 8
tv79 = -8						; size = 4
tv74 = -4						; size = 4
_options$ = 8						; size = 4
_is_backward_size_valid PROC				; COMDAT

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 14	 sub	 esp, 20			; 00000014H

; 28   : 	return options->backward_size >= LZMA_BACKWARD_SIZE_MIN
; 29   : 			&& options->backward_size <= LZMA_BACKWARD_SIZE_MAX
; 30   : 			&& (options->backward_size & 3) == 0;

  00006	8b 45 08	 mov	 eax, DWORD PTR _options$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR tv74[ebp], eax
  0000c	8b 4d fc	 mov	 ecx, DWORD PTR tv74[ebp]
  0000f	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00013	77 09		 ja	 SHORT $LN5@is_backwar
  00015	8b 55 fc	 mov	 edx, DWORD PTR tv74[ebp]
  00018	83 7a 08 04	 cmp	 DWORD PTR [edx+8], 4
  0001c	72 40		 jb	 SHORT $LN3@is_backwar
$LN5@is_backwar:
  0001e	8b 45 08	 mov	 eax, DWORD PTR _options$[ebp]
  00021	89 45 f8	 mov	 DWORD PTR tv79[ebp], eax
  00024	8b 4d f8	 mov	 ecx, DWORD PTR tv79[ebp]
  00027	83 79 0c 04	 cmp	 DWORD PTR [ecx+12], 4
  0002b	77 31		 ja	 SHORT $LN3@is_backwar
  0002d	72 09		 jb	 SHORT $LN6@is_backwar
  0002f	8b 55 f8	 mov	 edx, DWORD PTR tv79[ebp]
  00032	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00036	77 26		 ja	 SHORT $LN3@is_backwar
$LN6@is_backwar:
  00038	8b 45 08	 mov	 eax, DWORD PTR _options$[ebp]
  0003b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003e	83 e1 03	 and	 ecx, 3
  00041	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00044	83 e2 00	 and	 edx, 0
  00047	89 4d f0	 mov	 DWORD PTR tv90[ebp], ecx
  0004a	89 55 f4	 mov	 DWORD PTR tv90[ebp+4], edx
  0004d	8b 45 f0	 mov	 eax, DWORD PTR tv90[ebp]
  00050	0b 45 f4	 or	 eax, DWORD PTR tv90[ebp+4]
  00053	75 09		 jne	 SHORT $LN3@is_backwar
  00055	c7 45 ec 01 00
	00 00		 mov	 DWORD PTR tv71[ebp], 1
  0005c	eb 07		 jmp	 SHORT $LN4@is_backwar
$LN3@is_backwar:
  0005e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR tv71[ebp], 0
$LN4@is_backwar:
  00065	8a 45 ec	 mov	 al, BYTE PTR tv71[ebp]

; 31   : }

  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
_is_backward_size_valid ENDP
PUBLIC	_lzma_stream_flags_compare
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\common\stream_flags_common.c
;	COMDAT _lzma_stream_flags_compare
_TEXT	SEGMENT
tv210 = -56						; size = 4
tv209 = -52						; size = 4
tv135 = -48						; size = 4
tv200 = -44						; size = 8
tv189 = -36						; size = 4
tv184 = -32						; size = 4
tv95 = -28						; size = 4
tv177 = -24						; size = 8
tv166 = -16						; size = 4
tv161 = -12						; size = 4
tv154 = -8						; size = 4
tv147 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lzma_stream_flags_compare PROC				; COMDAT

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 38	 sub	 esp, 56			; 00000038H

; 24   : 	// We can compare only version 0 structures.
; 25   : 	if (a->version != 0 || b->version != 0)

  00006	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  00009	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000c	75 08		 jne	 SHORT $LN8@lzma_strea@3
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _b$[ebp]
  00011	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00014	74 0a		 je	 SHORT $LN9@lzma_strea@3
$LN8@lzma_strea@3:

; 26   : 		return LZMA_OPTIONS_ERROR;

  00016	b8 08 00 00 00	 mov	 eax, 8
  0001b	e9 70 01 00 00	 jmp	 $LN10@lzma_strea@3
$LN9@lzma_strea@3:

; 27   : 
; 28   : 	// Check type
; 29   : 	if ((unsigned int)(a->check) > LZMA_CHECK_ID_MAX
; 30   : 			|| (unsigned int)(b->check) > LZMA_CHECK_ID_MAX)

  00020	8b 55 08	 mov	 edx, DWORD PTR _a$[ebp]
  00023	83 7a 10 0f	 cmp	 DWORD PTR [edx+16], 15	; 0000000fH
  00027	77 09		 ja	 SHORT $LN6@lzma_strea@3
  00029	8b 45 0c	 mov	 eax, DWORD PTR _b$[ebp]
  0002c	83 78 10 0f	 cmp	 DWORD PTR [eax+16], 15	; 0000000fH
  00030	76 0a		 jbe	 SHORT $LN7@lzma_strea@3
$LN6@lzma_strea@3:

; 31   : 		return LZMA_PROG_ERROR;

  00032	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  00037	e9 54 01 00 00	 jmp	 $LN10@lzma_strea@3
$LN7@lzma_strea@3:

; 32   : 
; 33   : 	if (a->check != b->check)

  0003c	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  0003f	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  00042	8b 41 10	 mov	 eax, DWORD PTR [ecx+16]
  00045	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  00048	74 0a		 je	 SHORT $LN5@lzma_strea@3

; 34   : 		return LZMA_DATA_ERROR;

  0004a	b8 09 00 00 00	 mov	 eax, 9
  0004f	e9 3c 01 00 00	 jmp	 $LN10@lzma_strea@3
$LN5@lzma_strea@3:

; 35   : 
; 36   : 	// Backward Sizes are compared only if they are known in both.
; 37   : 	if (a->backward_size != LZMA_VLI_UNKNOWN
; 38   : 			&& b->backward_size != LZMA_VLI_UNKNOWN) {

  00054	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00057	89 4d fc	 mov	 DWORD PTR tv147[ebp], ecx
  0005a	8b 55 fc	 mov	 edx, DWORD PTR tv147[ebp]
  0005d	8b 45 fc	 mov	 eax, DWORD PTR tv147[ebp]
  00060	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00063	23 48 0c	 and	 ecx, DWORD PTR [eax+12]
  00066	83 f9 ff	 cmp	 ecx, -1
  00069	0f 84 1f 01 00
	00		 je	 $LN4@lzma_strea@3
  0006f	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  00072	89 55 f8	 mov	 DWORD PTR tv154[ebp], edx
  00075	8b 45 f8	 mov	 eax, DWORD PTR tv154[ebp]
  00078	8b 4d f8	 mov	 ecx, DWORD PTR tv154[ebp]
  0007b	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  0007e	23 51 0c	 and	 edx, DWORD PTR [ecx+12]
  00081	83 fa ff	 cmp	 edx, -1
  00084	0f 84 04 01 00
	00		 je	 $LN4@lzma_strea@3

; 39   : 		if (!is_backward_size_valid(a) || !is_backward_size_valid(b))

  0008a	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0008d	89 45 f4	 mov	 DWORD PTR tv161[ebp], eax
  00090	8b 4d f4	 mov	 ecx, DWORD PTR tv161[ebp]
  00093	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  00097	77 09		 ja	 SHORT $LN20@lzma_strea@3
  00099	8b 55 f4	 mov	 edx, DWORD PTR tv161[ebp]
  0009c	83 7a 08 04	 cmp	 DWORD PTR [edx+8], 4
  000a0	72 40		 jb	 SHORT $LN14@lzma_strea@3
$LN20@lzma_strea@3:
  000a2	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000a5	89 45 f0	 mov	 DWORD PTR tv166[ebp], eax
  000a8	8b 4d f0	 mov	 ecx, DWORD PTR tv166[ebp]
  000ab	83 79 0c 04	 cmp	 DWORD PTR [ecx+12], 4
  000af	77 31		 ja	 SHORT $LN14@lzma_strea@3
  000b1	72 09		 jb	 SHORT $LN21@lzma_strea@3
  000b3	8b 55 f0	 mov	 edx, DWORD PTR tv166[ebp]
  000b6	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  000ba	77 26		 ja	 SHORT $LN14@lzma_strea@3
$LN21@lzma_strea@3:
  000bc	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  000bf	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000c2	83 e1 03	 and	 ecx, 3
  000c5	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  000c8	83 e2 00	 and	 edx, 0
  000cb	89 4d e8	 mov	 DWORD PTR tv177[ebp], ecx
  000ce	89 55 ec	 mov	 DWORD PTR tv177[ebp+4], edx
  000d1	8b 45 e8	 mov	 eax, DWORD PTR tv177[ebp]
  000d4	0b 45 ec	 or	 eax, DWORD PTR tv177[ebp+4]
  000d7	75 09		 jne	 SHORT $LN14@lzma_strea@3
  000d9	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv95[ebp], 1
  000e0	eb 07		 jmp	 SHORT $LN12@lzma_strea@3
$LN14@lzma_strea@3:
  000e2	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv95[ebp], 0
$LN12@lzma_strea@3:
  000e9	0f b6 4d e4	 movzx	 ecx, BYTE PTR tv95[ebp]
  000ed	85 c9		 test	 ecx, ecx
  000ef	74 67		 je	 SHORT $LN2@lzma_strea@3
  000f1	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  000f4	89 55 e0	 mov	 DWORD PTR tv184[ebp], edx
  000f7	8b 45 e0	 mov	 eax, DWORD PTR tv184[ebp]
  000fa	83 78 0c 00	 cmp	 DWORD PTR [eax+12], 0
  000fe	77 09		 ja	 SHORT $LN22@lzma_strea@3
  00100	8b 4d e0	 mov	 ecx, DWORD PTR tv184[ebp]
  00103	83 79 08 04	 cmp	 DWORD PTR [ecx+8], 4
  00107	72 40		 jb	 SHORT $LN18@lzma_strea@3
$LN22@lzma_strea@3:
  00109	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  0010c	89 55 dc	 mov	 DWORD PTR tv189[ebp], edx
  0010f	8b 45 dc	 mov	 eax, DWORD PTR tv189[ebp]
  00112	83 78 0c 04	 cmp	 DWORD PTR [eax+12], 4
  00116	77 31		 ja	 SHORT $LN18@lzma_strea@3
  00118	72 09		 jb	 SHORT $LN23@lzma_strea@3
  0011a	8b 4d dc	 mov	 ecx, DWORD PTR tv189[ebp]
  0011d	83 79 08 00	 cmp	 DWORD PTR [ecx+8], 0
  00121	77 26		 ja	 SHORT $LN18@lzma_strea@3
$LN23@lzma_strea@3:
  00123	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  00126	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00129	83 e0 03	 and	 eax, 3
  0012c	8b 4a 0c	 mov	 ecx, DWORD PTR [edx+12]
  0012f	83 e1 00	 and	 ecx, 0
  00132	89 45 d4	 mov	 DWORD PTR tv200[ebp], eax
  00135	89 4d d8	 mov	 DWORD PTR tv200[ebp+4], ecx
  00138	8b 55 d4	 mov	 edx, DWORD PTR tv200[ebp]
  0013b	0b 55 d8	 or	 edx, DWORD PTR tv200[ebp+4]
  0013e	75 09		 jne	 SHORT $LN18@lzma_strea@3
  00140	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv135[ebp], 1
  00147	eb 07		 jmp	 SHORT $LN16@lzma_strea@3
$LN18@lzma_strea@3:
  00149	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv135[ebp], 0
$LN16@lzma_strea@3:
  00150	0f b6 45 d0	 movzx	 eax, BYTE PTR tv135[ebp]
  00154	85 c0		 test	 eax, eax
  00156	75 07		 jne	 SHORT $LN3@lzma_strea@3
$LN2@lzma_strea@3:

; 40   : 			return LZMA_PROG_ERROR;

  00158	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  0015d	eb 31		 jmp	 SHORT $LN10@lzma_strea@3
$LN3@lzma_strea@3:

; 41   : 
; 42   : 		if (a->backward_size != b->backward_size)

  0015f	8b 4d 08	 mov	 ecx, DWORD PTR _a$[ebp]
  00162	8b 55 0c	 mov	 edx, DWORD PTR _b$[ebp]
  00165	89 4d cc	 mov	 DWORD PTR tv209[ebp], ecx
  00168	89 55 c8	 mov	 DWORD PTR tv210[ebp], edx
  0016b	8b 45 cc	 mov	 eax, DWORD PTR tv209[ebp]
  0016e	8b 4d c8	 mov	 ecx, DWORD PTR tv210[ebp]
  00171	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00174	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00177	75 0e		 jne	 SHORT $LN24@lzma_strea@3
  00179	8b 45 cc	 mov	 eax, DWORD PTR tv209[ebp]
  0017c	8b 4d c8	 mov	 ecx, DWORD PTR tv210[ebp]
  0017f	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  00182	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  00185	74 07		 je	 SHORT $LN4@lzma_strea@3
$LN24@lzma_strea@3:

; 43   : 			return LZMA_DATA_ERROR;

  00187	b8 09 00 00 00	 mov	 eax, 9
  0018c	eb 02		 jmp	 SHORT $LN10@lzma_strea@3
$LN4@lzma_strea@3:

; 44   : 	}
; 45   : 
; 46   : 	return LZMA_OK;

  0018e	33 c0		 xor	 eax, eax
$LN10@lzma_strea@3:

; 47   : }

  00190	8b e5		 mov	 esp, ebp
  00192	5d		 pop	 ebp
  00193	c3		 ret	 0
_lzma_stream_flags_compare ENDP
END
