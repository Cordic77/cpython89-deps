; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\SDK\C\Library\Algorithms\Information theory and signal processing\Coding theory\Lossless compression algorithms\Dictionary coders\Lempel?Ziv\Lempel?Ziv?Markov chain (LZMA)\xz\src\c89\liblzma\lzma\lzma_decoder.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_lzma_lzma_props_decode
PUBLIC	_lzma_lzma_decoder_memusage
PUBLIC	_lzma_lzma_decoder_init
EXTRN	_memmove:PROC
?next_state@?JB@??lzma_decode@@9@9 DD 00H		; `lzma_decode'::`145'::next_state
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	04H
	DD	05H
PUBLIC	_lzma_lzma_decoder_memusage_nocheck
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_decoder.c
;	COMDAT _lzma_lzma_decoder_memusage_nocheck
_TEXT	SEGMENT
_opt$ = -4						; size = 4
_options$ = 8						; size = 4
_lzma_lzma_decoder_memusage_nocheck PROC		; COMDAT

; 1041 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1042 : 	const lzma_options_lzma *const opt = options;

  00004	8b 45 08	 mov	 eax, DWORD PTR _options$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR _opt$[ebp], eax

; 1043 : 	return sizeof(lzma_lzma1_decoder)
; 1044 : 			+ lzma_lz_decoder_memusage(opt->dict_size);

  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _opt$[ebp]
  0000d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0000f	52		 push	 edx
  00010	e8 00 00 00 00	 call	 _lzma_lz_decoder_memusage
  00015	83 c4 04	 add	 esp, 4
  00018	05 b8 6e 00 00	 add	 eax, 28344		; 00006eb8H
  0001d	83 d2 00	 adc	 edx, 0

; 1045 : }

  00020	8b e5		 mov	 esp, ebp
  00022	5d		 pop	 ebp
  00023	c3		 ret	 0
_lzma_lzma_decoder_memusage_nocheck ENDP
_TEXT	ENDS
PUBLIC	_lzma_lzma_lclppb_decode
; Function compile flags: /Odtp
;	COMDAT _lzma_lzma_lclppb_decode
_TEXT	SEGMENT
_options$ = 8						; size = 4
_byte$ = 12						; size = 1
_lzma_lzma_lclppb_decode PROC				; COMDAT

; 1025 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1026 : 	if (byte > (4 * 5 + 4) * 9 + 8)

  00003	0f b6 45 0c	 movzx	 eax, BYTE PTR _byte$[ebp]
  00007	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  0000c	7e 04		 jle	 SHORT $LN1@lzma_lzma_

; 1027 : 		return true;

  0000e	b0 01		 mov	 al, 1
  00010	eb 65		 jmp	 SHORT $LN2@lzma_lzma_
$LN1@lzma_lzma_:

; 1028 : 
; 1029 : 	// See the file format specification to understand this.
; 1030 : 	options->pb = byte / (9 * 5);

  00012	0f b6 45 0c	 movzx	 eax, BYTE PTR _byte$[ebp]
  00016	99		 cdq
  00017	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  0001c	f7 f9		 idiv	 ecx
  0001e	8b 55 08	 mov	 edx, DWORD PTR _options$[ebp]
  00021	89 42 14	 mov	 DWORD PTR [edx+20], eax

; 1031 : 	byte -= options->pb * 9 * 5;

  00024	8b 45 08	 mov	 eax, DWORD PTR _options$[ebp]
  00027	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0002a	6b c9 09	 imul	 ecx, 9
  0002d	6b c9 05	 imul	 ecx, 5
  00030	0f b6 55 0c	 movzx	 edx, BYTE PTR _byte$[ebp]
  00034	2b d1		 sub	 edx, ecx
  00036	88 55 0c	 mov	 BYTE PTR _byte$[ebp], dl

; 1032 : 	options->lp = byte / 9;

  00039	0f b6 45 0c	 movzx	 eax, BYTE PTR _byte$[ebp]
  0003d	99		 cdq
  0003e	b9 09 00 00 00	 mov	 ecx, 9
  00043	f7 f9		 idiv	 ecx
  00045	8b 55 08	 mov	 edx, DWORD PTR _options$[ebp]
  00048	89 42 10	 mov	 DWORD PTR [edx+16], eax

; 1033 : 	options->lc = byte - options->lp * 9;

  0004b	0f b6 45 0c	 movzx	 eax, BYTE PTR _byte$[ebp]
  0004f	8b 4d 08	 mov	 ecx, DWORD PTR _options$[ebp]
  00052	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00055	6b d2 09	 imul	 edx, 9
  00058	2b c2		 sub	 eax, edx
  0005a	8b 4d 08	 mov	 ecx, DWORD PTR _options$[ebp]
  0005d	89 41 0c	 mov	 DWORD PTR [ecx+12], eax

; 1034 : 
; 1035 : 	return options->lc + options->lp > LZMA_LCLP_MAX;

  00060	8b 55 08	 mov	 edx, DWORD PTR _options$[ebp]
  00063	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00066	8b 4d 08	 mov	 ecx, DWORD PTR _options$[ebp]
  00069	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  0006c	ba 04 00 00 00	 mov	 edx, 4
  00071	3b d0		 cmp	 edx, eax
  00073	1b c0		 sbb	 eax, eax
  00075	f7 d8		 neg	 eax
$LN2@lzma_lzma_:

; 1036 : }

  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
_lzma_lzma_lclppb_decode ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _lzma_decoder_uncompressed
_TEXT	SEGMENT
_coder$ = -4						; size = 4
_coder_ptr$ = 8						; size = 4
_uncompressed_size$ = 12				; size = 8
_lzma_decoder_uncompressed PROC				; COMDAT

; 866  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 867  : 	lzma_lzma1_decoder *coder = coder_ptr;

  00004	8b 45 08	 mov	 eax, DWORD PTR _coder_ptr$[ebp]
  00007	89 45 fc	 mov	 DWORD PTR _coder$[ebp], eax

; 868  : 	coder->uncompressed_size = uncompressed_size;

  0000a	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0000d	8b 55 0c	 mov	 edx, DWORD PTR _uncompressed_size$[ebp]
  00010	89 91 98 6e 00
	00		 mov	 DWORD PTR [ecx+28312], edx
  00016	8b 45 10	 mov	 eax, DWORD PTR _uncompressed_size$[ebp+4]
  00019	89 81 9c 6e 00
	00		 mov	 DWORD PTR [ecx+28316], eax

; 869  : }

  0001f	8b e5		 mov	 esp, ebp
  00021	5d		 pop	 ebp
  00022	c3		 ret	 0
_lzma_decoder_uncompressed ENDP
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\rangecoder\range_decoder.h
_TEXT	ENDS
;	COMDAT _rc_read_init
_TEXT	SEGMENT
_rc$ = 8						; size = 4
_in$ = 12						; size = 4
_in_pos$ = 16						; size = 4
_in_size$ = 20						; size = 4
_rc_read_init PROC					; COMDAT

; 31   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
$LN4@rc_read_in:

; 32   : 	while (rc->init_bytes_left > 0) {

  00003	8b 45 08	 mov	 eax, DWORD PTR _rc$[ebp]
  00006	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  0000a	76 69		 jbe	 SHORT $LN3@rc_read_in

; 33   : 		if (*in_pos == in_size)

  0000c	8b 4d 10	 mov	 ecx, DWORD PTR _in_pos$[ebp]
  0000f	8b 11		 mov	 edx, DWORD PTR [ecx]
  00011	3b 55 14	 cmp	 edx, DWORD PTR _in_size$[ebp]
  00014	75 04		 jne	 SHORT $LN2@rc_read_in

; 34   : 			return LZMA_OK;

  00016	33 c0		 xor	 eax, eax
  00018	eb 60		 jmp	 SHORT $LN5@rc_read_in
$LN2@rc_read_in:

; 35   : 
; 36   : 		// The first byte is always 0x00. It could have been omitted
; 37   : 		// in LZMA2 but it wasn't, so one byte is wasted in every
; 38   : 		// LZMA2 chunk.
; 39   : 		if (rc->init_bytes_left == 5 && in[*in_pos] != 0x00)

  0001a	8b 45 08	 mov	 eax, DWORD PTR _rc$[ebp]
  0001d	83 78 08 05	 cmp	 DWORD PTR [eax+8], 5
  00021	75 17		 jne	 SHORT $LN1@rc_read_in
  00023	8b 4d 10	 mov	 ecx, DWORD PTR _in_pos$[ebp]
  00026	8b 11		 mov	 edx, DWORD PTR [ecx]
  00028	8b 45 0c	 mov	 eax, DWORD PTR _in$[ebp]
  0002b	0f b6 0c 10	 movzx	 ecx, BYTE PTR [eax+edx]
  0002f	85 c9		 test	 ecx, ecx
  00031	74 07		 je	 SHORT $LN1@rc_read_in

; 40   : 			return LZMA_DATA_ERROR;

  00033	b8 09 00 00 00	 mov	 eax, 9
  00038	eb 40		 jmp	 SHORT $LN5@rc_read_in
$LN1@rc_read_in:

; 41   : 
; 42   : 		rc->code = (rc->code << 8) | in[*in_pos];

  0003a	8b 55 08	 mov	 edx, DWORD PTR _rc$[ebp]
  0003d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00040	c1 e0 08	 shl	 eax, 8
  00043	8b 4d 10	 mov	 ecx, DWORD PTR _in_pos$[ebp]
  00046	8b 11		 mov	 edx, DWORD PTR [ecx]
  00048	8b 4d 0c	 mov	 ecx, DWORD PTR _in$[ebp]
  0004b	0f b6 14 11	 movzx	 edx, BYTE PTR [ecx+edx]
  0004f	0b c2		 or	 eax, edx
  00051	8b 4d 08	 mov	 ecx, DWORD PTR _rc$[ebp]
  00054	89 41 04	 mov	 DWORD PTR [ecx+4], eax

; 43   : 		++*in_pos;

  00057	8b 55 10	 mov	 edx, DWORD PTR _in_pos$[ebp]
  0005a	8b 02		 mov	 eax, DWORD PTR [edx]
  0005c	83 c0 01	 add	 eax, 1
  0005f	8b 4d 10	 mov	 ecx, DWORD PTR _in_pos$[ebp]
  00062	89 01		 mov	 DWORD PTR [ecx], eax

; 44   : 		--rc->init_bytes_left;

  00064	8b 55 08	 mov	 edx, DWORD PTR _rc$[ebp]
  00067	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0006a	83 e8 01	 sub	 eax, 1
  0006d	8b 4d 08	 mov	 ecx, DWORD PTR _rc$[ebp]
  00070	89 41 08	 mov	 DWORD PTR [ecx+8], eax

; 45   : 	}

  00073	eb 8e		 jmp	 SHORT $LN4@rc_read_in
$LN3@rc_read_in:

; 46   : 
; 47   : 	return LZMA_STREAM_END;

  00075	b8 01 00 00 00	 mov	 eax, 1
$LN5@rc_read_in:

; 48   : }

  0007a	5d		 pop	 ebp
  0007b	c3		 ret	 0
_rc_read_init ENDP
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_common.h
_TEXT	ENDS
;	COMDAT _literal_init
_TEXT	SEGMENT
_j$32383 = -12						; size = 4
_coders$32381 = -8					; size = 4
_i$32382 = -4						; size = 4
_probs$ = 8						; size = 4
_lc$ = 12						; size = 4
_lp$ = 16						; size = 4
_literal_init PROC					; COMDAT

; 131  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 0c	 sub	 esp, 12			; 0000000cH

; 132  : 	assert(lc + lp <= LZMA_LCLP_MAX);
; 133  : 
; 134  :   {
; 135  : 	const uint32_t coders = 1U << (lc + lp);

  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _lc$[ebp]
  00009	03 4d 10	 add	 ecx, DWORD PTR _lp$[ebp]
  0000c	b8 01 00 00 00	 mov	 eax, 1
  00011	d3 e0		 shl	 eax, cl
  00013	89 45 f8	 mov	 DWORD PTR _coders$32381[ebp], eax

; 136  : 	uint32_t i, j;
; 137  : 
; 138  : 	for (i = 0; i < coders; ++i)

  00016	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$32382[ebp], 0
  0001d	eb 09		 jmp	 SHORT $LN6@literal_in
$LN5@literal_in:
  0001f	8b 4d fc	 mov	 ecx, DWORD PTR _i$32382[ebp]
  00022	83 c1 01	 add	 ecx, 1
  00025	89 4d fc	 mov	 DWORD PTR _i$32382[ebp], ecx
$LN6@literal_in:
  00028	8b 55 fc	 mov	 edx, DWORD PTR _i$32382[ebp]
  0002b	3b 55 f8	 cmp	 edx, DWORD PTR _coders$32381[ebp]
  0002e	73 37		 jae	 SHORT $LN7@literal_in

; 139  : 		for (j = 0; j < LITERAL_CODER_SIZE; ++j)

  00030	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _j$32383[ebp], 0
  00037	eb 09		 jmp	 SHORT $LN3@literal_in
$LN2@literal_in:
  00039	8b 45 f4	 mov	 eax, DWORD PTR _j$32383[ebp]
  0003c	83 c0 01	 add	 eax, 1
  0003f	89 45 f4	 mov	 DWORD PTR _j$32383[ebp], eax
$LN3@literal_in:
  00042	81 7d f4 00 03
	00 00		 cmp	 DWORD PTR _j$32383[ebp], 768 ; 00000300H
  00049	73 1a		 jae	 SHORT $LN1@literal_in

; 140  : 			bit_reset(probs[i][j]);

  0004b	8b 4d fc	 mov	 ecx, DWORD PTR _i$32382[ebp]
  0004e	69 c9 00 06 00
	00		 imul	 ecx, 1536		; 00000600H
  00054	03 4d 08	 add	 ecx, DWORD PTR _probs$[ebp]
  00057	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  0005c	8b 45 f4	 mov	 eax, DWORD PTR _j$32383[ebp]
  0005f	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00063	eb d4		 jmp	 SHORT $LN2@literal_in
$LN1@literal_in:
  00065	eb b8		 jmp	 SHORT $LN5@literal_in
$LN7@literal_in:

; 141  :   }
; 142  : 
; 143  : 	return;
; 144  : }

  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
_literal_init ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _is_lclppb_valid
_TEXT	SEGMENT
tv74 = -4						; size = 4
_options$ = 8						; size = 4
_is_lclppb_valid PROC					; COMDAT

; 34   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 35   : 	return options->lc <= LZMA_LCLP_MAX && options->lp <= LZMA_LCLP_MAX
; 36   : 			&& options->lc + options->lp <= LZMA_LCLP_MAX
; 37   : 			&& options->pb <= LZMA_PB_MAX;

  00004	8b 45 08	 mov	 eax, DWORD PTR _options$[ebp]
  00007	83 78 0c 04	 cmp	 DWORD PTR [eax+12], 4
  0000b	77 2c		 ja	 SHORT $LN3@is_lclppb_
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _options$[ebp]
  00010	83 79 10 04	 cmp	 DWORD PTR [ecx+16], 4
  00014	77 23		 ja	 SHORT $LN3@is_lclppb_
  00016	8b 55 08	 mov	 edx, DWORD PTR _options$[ebp]
  00019	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _options$[ebp]
  0001f	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00022	83 f8 04	 cmp	 eax, 4
  00025	77 12		 ja	 SHORT $LN3@is_lclppb_
  00027	8b 55 08	 mov	 edx, DWORD PTR _options$[ebp]
  0002a	83 7a 14 04	 cmp	 DWORD PTR [edx+20], 4
  0002e	77 09		 ja	 SHORT $LN3@is_lclppb_
  00030	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
  00037	eb 07		 jmp	 SHORT $LN4@is_lclppb_
$LN3@is_lclppb_:
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
$LN4@is_lclppb_:
  00040	8a 45 fc	 mov	 al, BYTE PTR tv74[ebp]

; 38   : }

  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
_is_lclppb_valid ENDP
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lz\lz_decoder.h
_TEXT	ENDS
;	COMDAT _dict_put
_TEXT	SEGMENT
_dict$ = 8						; size = 4
_byte$ = 12						; size = 1
_dict_put PROC						; COMDAT

; 193  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 194  : 	if (unlikely(dict->pos == dict->limit))

  00003	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00006	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  00009	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0000c	3b 51 0c	 cmp	 edx, DWORD PTR [ecx+12]
  0000f	75 04		 jne	 SHORT $LN2@dict_put

; 195  : 		return true;

  00011	b0 01		 mov	 al, 1
  00013	eb 3c		 jmp	 SHORT $LN3@dict_put
$LN2@dict_put:

; 196  : 
; 197  : 	dict->buf[dict->pos++] = byte;

  00015	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00018	8b 08		 mov	 ecx, DWORD PTR [eax]
  0001a	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  0001d	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  00020	8a 55 0c	 mov	 dl, BYTE PTR _byte$[ebp]
  00023	88 14 01	 mov	 BYTE PTR [ecx+eax], dl
  00026	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00029	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0002c	83 c1 01	 add	 ecx, 1
  0002f	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  00032	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 198  : 
; 199  : 	if (dict->pos > dict->full)

  00035	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00038	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  0003b	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003e	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00041	76 0c		 jbe	 SHORT $LN1@dict_put

; 200  : 		dict->full = dict->pos;

  00043	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00046	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  00049	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0004c	89 50 08	 mov	 DWORD PTR [eax+8], edx
$LN1@dict_put:

; 201  : 
; 202  : 	return false;

  0004f	32 c0		 xor	 al, al
$LN3@dict_put:

; 203  : }

  00051	5d		 pop	 ebp
  00052	c3		 ret	 0
_dict_put ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _dict_is_distance_valid
_TEXT	SEGMENT
_dict$ = 8						; size = 4
_distance$ = 12						; size = 4
_dict_is_distance_valid PROC				; COMDAT

; 124  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 125  : 	return dict->full > distance;

  00003	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00006	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00009	39 4d 0c	 cmp	 DWORD PTR _distance$[ebp], ecx
  0000c	1b c0		 sbb	 eax, eax
  0000e	f7 d8		 neg	 eax

; 126  : }

  00010	5d		 pop	 ebp
  00011	c3		 ret	 0
_dict_is_distance_valid ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _dict_get
_TEXT	SEGMENT
tv70 = -4						; size = 4
_dict$ = 8						; size = 4
_distance$ = 12						; size = 4
_dict_get PROC						; COMDAT

; 107  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 108  : 	return dict->buf[dict->pos - distance - 1
; 109  : 			+ (distance < dict->pos ? 0 : dict->size)];

  00004	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00007	8b 4d 0c	 mov	 ecx, DWORD PTR _distance$[ebp]
  0000a	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  0000d	73 09		 jae	 SHORT $LN3@dict_get
  0000f	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  00016	eb 09		 jmp	 SHORT $LN4@dict_get
$LN3@dict_get:
  00018	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  0001b	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  0001e	89 45 fc	 mov	 DWORD PTR tv70[ebp], eax
$LN4@dict_get:
  00021	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  00024	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00027	2b 55 0c	 sub	 edx, DWORD PTR _distance$[ebp]
  0002a	8b 45 fc	 mov	 eax, DWORD PTR tv70[ebp]
  0002d	8d 4c 02 ff	 lea	 ecx, DWORD PTR [edx+eax-1]
  00031	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  00034	8b 02		 mov	 eax, DWORD PTR [edx]
  00036	8a 04 01	 mov	 al, BYTE PTR [ecx+eax]

; 110  : }

  00039	8b e5		 mov	 esp, ebp
  0003b	5d		 pop	 ebp
  0003c	c3		 ret	 0
_dict_get ENDP
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\common\tuklib_integer.h
_TEXT	ENDS
;	COMDAT _read32le
_TEXT	SEGMENT
_num$ = -4						; size = 4
_buf$ = 8						; size = 4
_read32le PROC						; COMDAT

; 220  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 221  : 	uint32_t num = *(const uint32_t *)buf;

  00004	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00007	8b 08		 mov	 ecx, DWORD PTR [eax]
  00009	89 4d fc	 mov	 DWORD PTR _num$[ebp], ecx

; 222  : 	return conv32le(num);

  0000c	8b 45 fc	 mov	 eax, DWORD PTR _num$[ebp]

; 223  : }

  0000f	8b e5		 mov	 esp, ebp
  00011	5d		 pop	 ebp
  00012	c3		 ret	 0
_read32le ENDP
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_decoder.c
;	COMDAT _lzma_lzma_props_decode
_TEXT	SEGMENT
_num$34853 = -8						; size = 4
_opt$33958 = -4						; size = 4
_options$ = 8						; size = 4
_allocator$ = 12					; size = 4
_props$ = 16						; size = 4
_props_size$ = 20					; size = 4
_lzma_lzma_props_decode PROC				; COMDAT

; 1061 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 1062 : 	if (props_size != 5)

  00006	83 7d 14 05	 cmp	 DWORD PTR _props_size$[ebp], 5
  0000a	74 0a		 je	 SHORT $LN3@lzma_lzma_@2

; 1063 : 		return LZMA_OPTIONS_ERROR;

  0000c	b8 08 00 00 00	 mov	 eax, 8
  00011	e9 80 00 00 00	 jmp	 $LN4@lzma_lzma_@2
$LN3@lzma_lzma_@2:

; 1064 : 
; 1065 :   { lzma_options_lzma *opt
; 1066 : 			= lzma_alloc(sizeof(lzma_options_lzma), allocator);

  00016	8b 45 0c	 mov	 eax, DWORD PTR _allocator$[ebp]
  00019	50		 push	 eax
  0001a	6a 60		 push	 96			; 00000060H
  0001c	e8 00 00 00 00	 call	 _lzma_alloc
  00021	83 c4 08	 add	 esp, 8
  00024	89 45 fc	 mov	 DWORD PTR _opt$33958[ebp], eax

; 1067 : 	if (opt == NULL)

  00027	83 7d fc 00	 cmp	 DWORD PTR _opt$33958[ebp], 0
  0002b	75 07		 jne	 SHORT $LN2@lzma_lzma_@2

; 1068 : 		return LZMA_MEM_ERROR;

  0002d	b8 05 00 00 00	 mov	 eax, 5
  00032	eb 62		 jmp	 SHORT $LN4@lzma_lzma_@2
$LN2@lzma_lzma_@2:

; 1069 : 
; 1070 : 	if (lzma_lzma_lclppb_decode(opt, props[0]))

  00034	8b 4d 10	 mov	 ecx, DWORD PTR _props$[ebp]
  00037	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0003a	52		 push	 edx
  0003b	8b 45 fc	 mov	 eax, DWORD PTR _opt$33958[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 _lzma_lzma_lclppb_decode
  00044	83 c4 08	 add	 esp, 8
  00047	0f b6 c8	 movzx	 ecx, al
  0004a	85 c9		 test	 ecx, ecx
  0004c	74 02		 je	 SHORT $LN1@lzma_lzma_@2

; 1071 : 		goto error;

  0004e	eb 31		 jmp	 SHORT $error$33963
$LN1@lzma_lzma_@2:

; 1072 : 
; 1073 : 	// All dictionary sizes are accepted, including zero. LZ decoder
; 1074 : 	// will automatically use a dictionary at least a few KiB even if
; 1075 : 	// a smaller dictionary is requested.
; 1076 : 	opt->dict_size = unaligned_read32le(props + 1);

  00050	8b 55 10	 mov	 edx, DWORD PTR _props$[ebp]
  00053	8b 42 01	 mov	 eax, DWORD PTR [edx+1]
  00056	89 45 f8	 mov	 DWORD PTR _num$34853[ebp], eax
  00059	8b 4d fc	 mov	 ecx, DWORD PTR _opt$33958[ebp]
  0005c	8b 55 f8	 mov	 edx, DWORD PTR _num$34853[ebp]
  0005f	89 11		 mov	 DWORD PTR [ecx], edx

; 1077 : 
; 1078 : 	opt->preset_dict = NULL;

  00061	8b 45 fc	 mov	 eax, DWORD PTR _opt$33958[ebp]
  00064	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0

; 1079 : 	opt->preset_dict_size = 0;

  0006b	8b 4d fc	 mov	 ecx, DWORD PTR _opt$33958[ebp]
  0006e	c7 41 08 00 00
	00 00		 mov	 DWORD PTR [ecx+8], 0

; 1080 : 
; 1081 : 	*options = opt;

  00075	8b 55 08	 mov	 edx, DWORD PTR _options$[ebp]
  00078	8b 45 fc	 mov	 eax, DWORD PTR _opt$33958[ebp]
  0007b	89 02		 mov	 DWORD PTR [edx], eax

; 1082 : 
; 1083 : 	return LZMA_OK;

  0007d	33 c0		 xor	 eax, eax
  0007f	eb 15		 jmp	 SHORT $LN4@lzma_lzma_@2
$error$33963:

; 1084 : 
; 1085 : error:
; 1086 : 	lzma_free(opt, allocator);

  00081	8b 4d 0c	 mov	 ecx, DWORD PTR _allocator$[ebp]
  00084	51		 push	 ecx
  00085	8b 55 fc	 mov	 edx, DWORD PTR _opt$33958[ebp]
  00088	52		 push	 edx
  00089	e8 00 00 00 00	 call	 _lzma_free
  0008e	83 c4 08	 add	 esp, 8

; 1087 :   }
; 1088 : 	return LZMA_OPTIONS_ERROR;

  00091	b8 08 00 00 00	 mov	 eax, 8
$LN4@lzma_lzma_@2:

; 1089 : }

  00096	8b e5		 mov	 esp, ebp
  00098	5d		 pop	 ebp
  00099	c3		 ret	 0
_lzma_lzma_props_decode ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _lzma_lzma_decoder_memusage
_TEXT	SEGMENT
tv80 = -4						; size = 4
_options$ = 8						; size = 4
_lzma_lzma_decoder_memusage PROC			; COMDAT

; 1050 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 1051 : 	if (!is_lclppb_valid(options))

  00004	8b 45 08	 mov	 eax, DWORD PTR _options$[ebp]
  00007	83 78 0c 04	 cmp	 DWORD PTR [eax+12], 4
  0000b	77 2c		 ja	 SHORT $LN6@lzma_lzma_@3
  0000d	8b 4d 08	 mov	 ecx, DWORD PTR _options$[ebp]
  00010	83 79 10 04	 cmp	 DWORD PTR [ecx+16], 4
  00014	77 23		 ja	 SHORT $LN6@lzma_lzma_@3
  00016	8b 55 08	 mov	 edx, DWORD PTR _options$[ebp]
  00019	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0001c	8b 4d 08	 mov	 ecx, DWORD PTR _options$[ebp]
  0001f	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00022	83 f8 04	 cmp	 eax, 4
  00025	77 12		 ja	 SHORT $LN6@lzma_lzma_@3
  00027	8b 55 08	 mov	 edx, DWORD PTR _options$[ebp]
  0002a	83 7a 14 04	 cmp	 DWORD PTR [edx+20], 4
  0002e	77 09		 ja	 SHORT $LN6@lzma_lzma_@3
  00030	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR tv80[ebp], 1
  00037	eb 07		 jmp	 SHORT $LN4@lzma_lzma_@3
$LN6@lzma_lzma_@3:
  00039	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR tv80[ebp], 0
$LN4@lzma_lzma_@3:
  00040	0f b6 45 fc	 movzx	 eax, BYTE PTR tv80[ebp]
  00044	85 c0		 test	 eax, eax
  00046	75 08		 jne	 SHORT $LN1@lzma_lzma_@3

; 1052 : 		return UINT64_MAX;

  00048	83 c8 ff	 or	 eax, -1
  0004b	83 ca ff	 or	 edx, -1
  0004e	eb 0c		 jmp	 SHORT $LN2@lzma_lzma_@3
$LN1@lzma_lzma_@3:

; 1053 : 
; 1054 : 	return lzma_lzma_decoder_memusage_nocheck(options);

  00050	8b 4d 08	 mov	 ecx, DWORD PTR _options$[ebp]
  00053	51		 push	 ecx
  00054	e8 00 00 00 00	 call	 _lzma_lzma_decoder_memusage_nocheck
  00059	83 c4 04	 add	 esp, 4
$LN2@lzma_lzma_@3:

; 1055 : }

  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c3		 ret	 0
_lzma_lzma_decoder_memusage ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _lzma_decoder_reset
_TEXT	SEGMENT
$T34876 = -76						; size = 4
$T34875 = -72						; size = 4
_j$34868 = -68						; size = 4
_coders$34866 = -64					; size = 4
_i$34867 = -60						; size = 4
_bt_i$33889 = -56					; size = 4
_bt_i$33885 = -52					; size = 4
_bt_i$33881 = -48					; size = 4
_bt_i$33877 = -44					; size = 4
_bt_i$33873 = -40					; size = 4
_bt_i$33869 = -36					; size = 4
_pos_state$33865 = -32					; size = 4
_num_pos_states$33864 = -28				; size = 4
_bt_i$33860 = -24					; size = 4
_bt_i$33853 = -20					; size = 4
_j$33843 = -16						; size = 4
_i$33842 = -12						; size = 4
_coder$ = -8						; size = 4
_options$ = -4						; size = 4
_coder_ptr$ = 8						; size = 4
_opt$ = 12						; size = 4
_lzma_decoder_reset PROC				; COMDAT

; 874  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 4c	 sub	 esp, 76			; 0000004cH

; 875  : 	lzma_lzma1_decoder *coder = coder_ptr;

  00006	8b 45 08	 mov	 eax, DWORD PTR _coder_ptr$[ebp]
  00009	89 45 f8	 mov	 DWORD PTR _coder$[ebp], eax

; 876  : 	const lzma_options_lzma *options = opt;

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _opt$[ebp]
  0000f	89 4d fc	 mov	 DWORD PTR _options$[ebp], ecx

; 877  : 
; 878  : 	// NOTE: We assume that lc/lp/pb are valid since they were
; 879  : 	// successfully decoded with lzma_lzma_decode_properties().
; 880  : 
; 881  : 	// Calculate pos_mask. We don't need pos_bits as is for anything.
; 882  : 	coder->pos_mask = (1U << options->pb) - 1;

  00012	8b 55 fc	 mov	 edx, DWORD PTR _options$[ebp]
  00015	b8 01 00 00 00	 mov	 eax, 1
  0001a	8b 4a 14	 mov	 ecx, DWORD PTR [edx+20]
  0001d	d3 e0		 shl	 eax, cl
  0001f	83 e8 01	 sub	 eax, 1
  00022	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  00025	89 81 8c 6e 00
	00		 mov	 DWORD PTR [ecx+28300], eax

; 883  : 
; 884  : 	// Initialize the literal decoder.
; 885  : 	literal_init(coder->literal, options->lc, options->lp);

  0002b	8b 55 fc	 mov	 edx, DWORD PTR _options$[ebp]
  0002e	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  00031	89 45 b4	 mov	 DWORD PTR $T34876[ebp], eax
  00034	8b 4d fc	 mov	 ecx, DWORD PTR _options$[ebp]
  00037	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0003a	89 55 b8	 mov	 DWORD PTR $T34875[ebp], edx
  0003d	8b 4d b8	 mov	 ecx, DWORD PTR $T34875[ebp]
  00040	03 4d b4	 add	 ecx, DWORD PTR $T34876[ebp]
  00043	b8 01 00 00 00	 mov	 eax, 1
  00048	d3 e0		 shl	 eax, cl
  0004a	89 45 c0	 mov	 DWORD PTR _coders$34866[ebp], eax
  0004d	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _i$34867[ebp], 0
  00054	eb 09		 jmp	 SHORT $LN50@lzma_decod
$LN49@lzma_decod:
  00056	8b 4d c4	 mov	 ecx, DWORD PTR _i$34867[ebp]
  00059	83 c1 01	 add	 ecx, 1
  0005c	89 4d c4	 mov	 DWORD PTR _i$34867[ebp], ecx
$LN50@lzma_decod:
  0005f	8b 55 c4	 mov	 edx, DWORD PTR _i$34867[ebp]
  00062	3b 55 c0	 cmp	 edx, DWORD PTR _coders$34866[ebp]
  00065	73 37		 jae	 SHORT $LN51@lzma_decod
  00067	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _j$34868[ebp], 0
  0006e	eb 09		 jmp	 SHORT $LN47@lzma_decod
$LN46@lzma_decod:
  00070	8b 45 bc	 mov	 eax, DWORD PTR _j$34868[ebp]
  00073	83 c0 01	 add	 eax, 1
  00076	89 45 bc	 mov	 DWORD PTR _j$34868[ebp], eax
$LN47@lzma_decod:
  00079	81 7d bc 00 03
	00 00		 cmp	 DWORD PTR _j$34868[ebp], 768 ; 00000300H
  00080	73 1a		 jae	 SHORT $LN45@lzma_decod
  00082	8b 4d c4	 mov	 ecx, DWORD PTR _i$34867[ebp]
  00085	69 c9 00 06 00
	00		 imul	 ecx, 1536		; 00000600H
  0008b	03 4d f8	 add	 ecx, DWORD PTR _coder$[ebp]
  0008e	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00093	8b 45 bc	 mov	 eax, DWORD PTR _j$34868[ebp]
  00096	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0009a	eb d4		 jmp	 SHORT $LN46@lzma_decod
$LN45@lzma_decod:
  0009c	eb b8		 jmp	 SHORT $LN49@lzma_decod
$LN51@lzma_decod:

; 886  : 
; 887  : 	coder->literal_context_bits = options->lc;

  0009e	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  000a1	8b 55 fc	 mov	 edx, DWORD PTR _options$[ebp]
  000a4	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  000a7	89 81 90 6e 00
	00		 mov	 DWORD PTR [ecx+28304], eax

; 888  : 	coder->literal_pos_mask = (1U << options->lp) - 1;

  000ad	8b 4d fc	 mov	 ecx, DWORD PTR _options$[ebp]
  000b0	ba 01 00 00 00	 mov	 edx, 1
  000b5	8b 49 10	 mov	 ecx, DWORD PTR [ecx+16]
  000b8	d3 e2		 shl	 edx, cl
  000ba	83 ea 01	 sub	 edx, 1
  000bd	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  000c0	89 90 94 6e 00
	00		 mov	 DWORD PTR [eax+28308], edx

; 889  : 
; 890  : 	// State
; 891  : 	coder->state = STATE_LIT_LIT;

  000c6	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  000c9	c7 81 78 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+28280], 0

; 892  : 	coder->rep0 = 0;

  000d3	8b 55 f8	 mov	 edx, DWORD PTR _coder$[ebp]
  000d6	c7 82 7c 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+28284], 0

; 893  : 	coder->rep1 = 0;

  000e0	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  000e3	c7 80 80 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+28288], 0

; 894  : 	coder->rep2 = 0;

  000ed	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  000f0	c7 81 84 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+28292], 0

; 895  : 	coder->rep3 = 0;

  000fa	8b 55 f8	 mov	 edx, DWORD PTR _coder$[ebp]
  000fd	c7 82 88 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+28296], 0

; 896  : 	coder->pos_mask = (1U << options->pb) - 1;

  00107	8b 45 fc	 mov	 eax, DWORD PTR _options$[ebp]
  0010a	ba 01 00 00 00	 mov	 edx, 1
  0010f	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00112	d3 e2		 shl	 edx, cl
  00114	83 ea 01	 sub	 edx, 1
  00117	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  0011a	89 90 8c 6e 00
	00		 mov	 DWORD PTR [eax+28300], edx
$LN42@lzma_decod:

; 897  : 
; 898  : 	// Range decoder
; 899  : 	rc_reset(coder->rc);

  00120	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  00123	c7 81 6c 6e 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+28268], -1
  0012d	8b 55 f8	 mov	 edx, DWORD PTR _coder$[ebp]
  00130	c7 82 70 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+28272], 0
  0013a	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  0013d	c7 80 74 6e 00
	00 05 00 00 00	 mov	 DWORD PTR [eax+28276], 5
  00147	33 c9		 xor	 ecx, ecx
  00149	75 d5		 jne	 SHORT $LN42@lzma_decod

; 900  : 
; 901  : 	// Bit and bittree decoders
; 902  :   { uint32_t i;
; 903  :   { uint32_t j;
; 904  : 	for (i = 0; i < STATES; ++i) {

  0014b	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$33842[ebp], 0
  00152	eb 09		 jmp	 SHORT $LN39@lzma_decod
$LN38@lzma_decod:
  00154	8b 55 f4	 mov	 edx, DWORD PTR _i$33842[ebp]
  00157	83 c2 01	 add	 edx, 1
  0015a	89 55 f4	 mov	 DWORD PTR _i$33842[ebp], edx
$LN39@lzma_decod:
  0015d	83 7d f4 0c	 cmp	 DWORD PTR _i$33842[ebp], 12 ; 0000000cH
  00161	0f 83 ab 00 00
	00		 jae	 $LN37@lzma_decod

; 905  : 		for (j = 0; j <= coder->pos_mask; ++j) {

  00167	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _j$33843[ebp], 0
  0016e	eb 09		 jmp	 SHORT $LN36@lzma_decod
$LN35@lzma_decod:
  00170	8b 45 f0	 mov	 eax, DWORD PTR _j$33843[ebp]
  00173	83 c0 01	 add	 eax, 1
  00176	89 45 f0	 mov	 DWORD PTR _j$33843[ebp], eax
$LN36@lzma_decod:
  00179	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  0017c	8b 55 f0	 mov	 edx, DWORD PTR _j$33843[ebp]
  0017f	3b 91 8c 6e 00
	00		 cmp	 edx, DWORD PTR [ecx+28300]
  00185	77 3a		 ja	 SHORT $LN34@lzma_decod

; 906  : 			bit_reset(coder->is_match[i][j]);

  00187	8b 45 f4	 mov	 eax, DWORD PTR _i$33842[ebp]
  0018a	c1 e0 05	 shl	 eax, 5
  0018d	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  00190	8d 94 01 00 60
	00 00		 lea	 edx, DWORD PTR [ecx+eax+24576]
  00197	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  0019c	8b 4d f0	 mov	 ecx, DWORD PTR _j$33843[ebp]
  0019f	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax

; 907  : 			bit_reset(coder->is_rep0_long[i][j]);

  001a3	8b 55 f4	 mov	 edx, DWORD PTR _i$33842[ebp]
  001a6	c1 e2 05	 shl	 edx, 5
  001a9	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  001ac	8d 8c 10 e0 61
	00 00		 lea	 ecx, DWORD PTR [eax+edx+25056]
  001b3	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  001b8	8b 45 f0	 mov	 eax, DWORD PTR _j$33843[ebp]
  001bb	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx

; 908  : 		}

  001bf	eb af		 jmp	 SHORT $LN35@lzma_decod
$LN34@lzma_decod:

; 909  : 
; 910  : 		bit_reset(coder->is_rep[i]);

  001c1	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  001c6	8b 55 f4	 mov	 edx, DWORD PTR _i$33842[ebp]
  001c9	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  001cc	66 89 8c 50 80
	61 00 00	 mov	 WORD PTR [eax+edx*2+24960], cx

; 911  : 		bit_reset(coder->is_rep0[i]);

  001d4	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  001d9	8b 55 f4	 mov	 edx, DWORD PTR _i$33842[ebp]
  001dc	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  001df	66 89 8c 50 98
	61 00 00	 mov	 WORD PTR [eax+edx*2+24984], cx

; 912  : 		bit_reset(coder->is_rep1[i]);

  001e7	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  001ec	8b 55 f4	 mov	 edx, DWORD PTR _i$33842[ebp]
  001ef	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  001f2	66 89 8c 50 b0
	61 00 00	 mov	 WORD PTR [eax+edx*2+25008], cx

; 913  : 		bit_reset(coder->is_rep2[i]);

  001fa	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  001ff	8b 55 f4	 mov	 edx, DWORD PTR _i$33842[ebp]
  00202	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  00205	66 89 8c 50 c8
	61 00 00	 mov	 WORD PTR [eax+edx*2+25032], cx

; 914  : 	}

  0020d	e9 42 ff ff ff	 jmp	 $LN38@lzma_decod
$LN37@lzma_decod:

; 915  :   }
; 916  : 
; 917  : 	for (i = 0; i < DIST_STATES; ++i)

  00212	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$33842[ebp], 0
  00219	eb 09		 jmp	 SHORT $LN33@lzma_decod
$LN32@lzma_decod:
  0021b	8b 4d f4	 mov	 ecx, DWORD PTR _i$33842[ebp]
  0021e	83 c1 01	 add	 ecx, 1
  00221	89 4d f4	 mov	 DWORD PTR _i$33842[ebp], ecx
$LN33@lzma_decod:
  00224	83 7d f4 04	 cmp	 DWORD PTR _i$33842[ebp], 4
  00228	73 38		 jae	 SHORT $LN31@lzma_decod

; 918  : 		bittree_reset(coder->dist_slot[i], DIST_SLOT_BITS);

  0022a	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _bt_i$33853[ebp], 0
  00231	eb 09		 jmp	 SHORT $LN30@lzma_decod
$LN29@lzma_decod:
  00233	8b 55 ec	 mov	 edx, DWORD PTR _bt_i$33853[ebp]
  00236	83 c2 01	 add	 edx, 1
  00239	89 55 ec	 mov	 DWORD PTR _bt_i$33853[ebp], edx
$LN30@lzma_decod:
  0023c	83 7d ec 40	 cmp	 DWORD PTR _bt_i$33853[ebp], 64 ; 00000040H
  00240	73 1e		 jae	 SHORT $LN28@lzma_decod
  00242	8b 45 f4	 mov	 eax, DWORD PTR _i$33842[ebp]
  00245	c1 e0 07	 shl	 eax, 7
  00248	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  0024b	8d 94 01 60 63
	00 00		 lea	 edx, DWORD PTR [ecx+eax+25440]
  00252	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00257	8b 4d ec	 mov	 ecx, DWORD PTR _bt_i$33853[ebp]
  0025a	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0025e	eb d3		 jmp	 SHORT $LN29@lzma_decod
$LN28@lzma_decod:
  00260	eb b9		 jmp	 SHORT $LN32@lzma_decod
$LN31@lzma_decod:

; 919  : 
; 920  : 	for (i = 0; i < FULL_DISTANCES - DIST_MODEL_END; ++i)

  00262	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$33842[ebp], 0
  00269	eb 09		 jmp	 SHORT $LN27@lzma_decod
$LN26@lzma_decod:
  0026b	8b 55 f4	 mov	 edx, DWORD PTR _i$33842[ebp]
  0026e	83 c2 01	 add	 edx, 1
  00271	89 55 f4	 mov	 DWORD PTR _i$33842[ebp], edx
$LN27@lzma_decod:
  00274	83 7d f4 72	 cmp	 DWORD PTR _i$33842[ebp], 114 ; 00000072H
  00278	73 15		 jae	 SHORT $LN25@lzma_decod

; 921  : 		bit_reset(coder->pos_special[i]);

  0027a	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  0027f	8b 4d f4	 mov	 ecx, DWORD PTR _i$33842[ebp]
  00282	8b 55 f8	 mov	 edx, DWORD PTR _coder$[ebp]
  00285	66 89 84 4a 60
	65 00 00	 mov	 WORD PTR [edx+ecx*2+25952], ax
  0028d	eb dc		 jmp	 SHORT $LN26@lzma_decod
$LN25@lzma_decod:

; 922  :   }
; 923  : 
; 924  : 	bittree_reset(coder->pos_align, ALIGN_BITS);

  0028f	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _bt_i$33860[ebp], 0
  00296	eb 09		 jmp	 SHORT $LN24@lzma_decod
$LN23@lzma_decod:
  00298	8b 45 e8	 mov	 eax, DWORD PTR _bt_i$33860[ebp]
  0029b	83 c0 01	 add	 eax, 1
  0029e	89 45 e8	 mov	 DWORD PTR _bt_i$33860[ebp], eax
$LN24@lzma_decod:
  002a1	83 7d e8 10	 cmp	 DWORD PTR _bt_i$33860[ebp], 16 ; 00000010H
  002a5	73 15		 jae	 SHORT $LN22@lzma_decod
  002a7	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  002ac	8b 55 e8	 mov	 edx, DWORD PTR _bt_i$33860[ebp]
  002af	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  002b2	66 89 8c 50 44
	66 00 00	 mov	 WORD PTR [eax+edx*2+26180], cx
  002ba	eb dc		 jmp	 SHORT $LN23@lzma_decod
$LN22@lzma_decod:

; 925  : 
; 926  : 	// Len decoders (also bit/bittree)
; 927  :   {
; 928  : 	const uint32_t num_pos_states = 1U << options->pb;

  002bc	8b 4d fc	 mov	 ecx, DWORD PTR _options$[ebp]
  002bf	ba 01 00 00 00	 mov	 edx, 1
  002c4	8b 49 14	 mov	 ecx, DWORD PTR [ecx+20]
  002c7	d3 e2		 shl	 edx, cl
  002c9	89 55 e4	 mov	 DWORD PTR _num_pos_states$33864[ebp], edx

; 929  : 	bit_reset(coder->match_len_decoder.choice);

  002cc	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  002d1	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  002d4	66 89 81 64 66
	00 00		 mov	 WORD PTR [ecx+26212], ax

; 930  : 	bit_reset(coder->match_len_decoder.choice2);

  002db	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  002e0	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  002e3	66 89 90 66 66
	00 00		 mov	 WORD PTR [eax+26214], dx

; 931  : 	bit_reset(coder->rep_len_decoder.choice);

  002ea	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  002ef	8b 55 f8	 mov	 edx, DWORD PTR _coder$[ebp]
  002f2	66 89 8a 68 6a
	00 00		 mov	 WORD PTR [edx+27240], cx

; 932  : 	bit_reset(coder->rep_len_decoder.choice2);

  002f9	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  002fe	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  00301	66 89 81 6a 6a
	00 00		 mov	 WORD PTR [ecx+27242], ax

; 933  : 	
; 934  :   { uint32_t pos_state;
; 935  : 
; 936  : 	for (pos_state = 0; pos_state < num_pos_states; ++pos_state) {

  00308	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _pos_state$33865[ebp], 0
  0030f	eb 09		 jmp	 SHORT $LN21@lzma_decod
$LN20@lzma_decod:
  00311	8b 55 e0	 mov	 edx, DWORD PTR _pos_state$33865[ebp]
  00314	83 c2 01	 add	 edx, 1
  00317	89 55 e0	 mov	 DWORD PTR _pos_state$33865[ebp], edx
$LN21@lzma_decod:
  0031a	8b 45 e0	 mov	 eax, DWORD PTR _pos_state$33865[ebp]
  0031d	3b 45 e4	 cmp	 eax, DWORD PTR _num_pos_states$33864[ebp]
  00320	0f 83 dd 00 00
	00		 jae	 $LN19@lzma_decod

; 937  : 		bittree_reset(coder->match_len_decoder.low[pos_state],
; 938  : 				LEN_LOW_BITS);

  00326	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _bt_i$33869[ebp], 0
  0032d	eb 09		 jmp	 SHORT $LN18@lzma_decod
$LN17@lzma_decod:
  0032f	8b 4d dc	 mov	 ecx, DWORD PTR _bt_i$33869[ebp]
  00332	83 c1 01	 add	 ecx, 1
  00335	89 4d dc	 mov	 DWORD PTR _bt_i$33869[ebp], ecx
$LN18@lzma_decod:
  00338	83 7d dc 08	 cmp	 DWORD PTR _bt_i$33869[ebp], 8
  0033c	73 1e		 jae	 SHORT $LN16@lzma_decod
  0033e	8b 55 e0	 mov	 edx, DWORD PTR _pos_state$33865[ebp]
  00341	c1 e2 04	 shl	 edx, 4
  00344	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  00347	8d 8c 10 68 66
	00 00		 lea	 ecx, DWORD PTR [eax+edx+26216]
  0034e	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00353	8b 45 dc	 mov	 eax, DWORD PTR _bt_i$33869[ebp]
  00356	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0035a	eb d3		 jmp	 SHORT $LN17@lzma_decod
$LN16@lzma_decod:

; 939  : 		bittree_reset(coder->match_len_decoder.mid[pos_state],
; 940  : 				LEN_MID_BITS);

  0035c	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _bt_i$33873[ebp], 0
  00363	eb 09		 jmp	 SHORT $LN15@lzma_decod
$LN14@lzma_decod:
  00365	8b 4d d8	 mov	 ecx, DWORD PTR _bt_i$33873[ebp]
  00368	83 c1 01	 add	 ecx, 1
  0036b	89 4d d8	 mov	 DWORD PTR _bt_i$33873[ebp], ecx
$LN15@lzma_decod:
  0036e	83 7d d8 08	 cmp	 DWORD PTR _bt_i$33873[ebp], 8
  00372	73 1e		 jae	 SHORT $LN13@lzma_decod
  00374	8b 55 e0	 mov	 edx, DWORD PTR _pos_state$33865[ebp]
  00377	c1 e2 04	 shl	 edx, 4
  0037a	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  0037d	8d 8c 10 68 67
	00 00		 lea	 ecx, DWORD PTR [eax+edx+26472]
  00384	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00389	8b 45 d8	 mov	 eax, DWORD PTR _bt_i$33873[ebp]
  0038c	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00390	eb d3		 jmp	 SHORT $LN14@lzma_decod
$LN13@lzma_decod:

; 941  : 
; 942  : 		bittree_reset(coder->rep_len_decoder.low[pos_state],
; 943  : 				LEN_LOW_BITS);

  00392	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _bt_i$33877[ebp], 0
  00399	eb 09		 jmp	 SHORT $LN12@lzma_decod
$LN11@lzma_decod:
  0039b	8b 4d d4	 mov	 ecx, DWORD PTR _bt_i$33877[ebp]
  0039e	83 c1 01	 add	 ecx, 1
  003a1	89 4d d4	 mov	 DWORD PTR _bt_i$33877[ebp], ecx
$LN12@lzma_decod:
  003a4	83 7d d4 08	 cmp	 DWORD PTR _bt_i$33877[ebp], 8
  003a8	73 1e		 jae	 SHORT $LN10@lzma_decod
  003aa	8b 55 e0	 mov	 edx, DWORD PTR _pos_state$33865[ebp]
  003ad	c1 e2 04	 shl	 edx, 4
  003b0	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  003b3	8d 8c 10 6c 6a
	00 00		 lea	 ecx, DWORD PTR [eax+edx+27244]
  003ba	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  003bf	8b 45 d4	 mov	 eax, DWORD PTR _bt_i$33877[ebp]
  003c2	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  003c6	eb d3		 jmp	 SHORT $LN11@lzma_decod
$LN10@lzma_decod:

; 944  : 		bittree_reset(coder->rep_len_decoder.mid[pos_state],
; 945  : 				LEN_MID_BITS);

  003c8	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _bt_i$33881[ebp], 0
  003cf	eb 09		 jmp	 SHORT $LN9@lzma_decod
$LN8@lzma_decod:
  003d1	8b 4d d0	 mov	 ecx, DWORD PTR _bt_i$33881[ebp]
  003d4	83 c1 01	 add	 ecx, 1
  003d7	89 4d d0	 mov	 DWORD PTR _bt_i$33881[ebp], ecx
$LN9@lzma_decod:
  003da	83 7d d0 08	 cmp	 DWORD PTR _bt_i$33881[ebp], 8
  003de	73 1e		 jae	 SHORT $LN7@lzma_decod
  003e0	8b 55 e0	 mov	 edx, DWORD PTR _pos_state$33865[ebp]
  003e3	c1 e2 04	 shl	 edx, 4
  003e6	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  003e9	8d 8c 10 6c 6b
	00 00		 lea	 ecx, DWORD PTR [eax+edx+27500]
  003f0	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  003f5	8b 45 d0	 mov	 eax, DWORD PTR _bt_i$33881[ebp]
  003f8	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  003fc	eb d3		 jmp	 SHORT $LN8@lzma_decod
$LN7@lzma_decod:

; 946  : 	}

  003fe	e9 0e ff ff ff	 jmp	 $LN20@lzma_decod
$LN19@lzma_decod:

; 947  :   }}
; 948  : 
; 949  : 	bittree_reset(coder->match_len_decoder.high, LEN_HIGH_BITS);

  00403	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _bt_i$33885[ebp], 0
  0040a	eb 09		 jmp	 SHORT $LN6@lzma_decod
$LN5@lzma_decod:
  0040c	8b 4d cc	 mov	 ecx, DWORD PTR _bt_i$33885[ebp]
  0040f	83 c1 01	 add	 ecx, 1
  00412	89 4d cc	 mov	 DWORD PTR _bt_i$33885[ebp], ecx
$LN6@lzma_decod:
  00415	81 7d cc 00 01
	00 00		 cmp	 DWORD PTR _bt_i$33885[ebp], 256 ; 00000100H
  0041c	73 15		 jae	 SHORT $LN4@lzma_decod
  0041e	ba 00 04 00 00	 mov	 edx, 1024		; 00000400H
  00423	8b 45 cc	 mov	 eax, DWORD PTR _bt_i$33885[ebp]
  00426	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  00429	66 89 94 41 68
	68 00 00	 mov	 WORD PTR [ecx+eax*2+26728], dx
  00431	eb d9		 jmp	 SHORT $LN5@lzma_decod
$LN4@lzma_decod:

; 950  : 	bittree_reset(coder->rep_len_decoder.high, LEN_HIGH_BITS);

  00433	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _bt_i$33889[ebp], 0
  0043a	eb 09		 jmp	 SHORT $LN3@lzma_decod
$LN2@lzma_decod:
  0043c	8b 55 c8	 mov	 edx, DWORD PTR _bt_i$33889[ebp]
  0043f	83 c2 01	 add	 edx, 1
  00442	89 55 c8	 mov	 DWORD PTR _bt_i$33889[ebp], edx
$LN3@lzma_decod:
  00445	81 7d c8 00 01
	00 00		 cmp	 DWORD PTR _bt_i$33889[ebp], 256 ; 00000100H
  0044c	73 15		 jae	 SHORT $LN1@lzma_decod
  0044e	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  00453	8b 4d c8	 mov	 ecx, DWORD PTR _bt_i$33889[ebp]
  00456	8b 55 f8	 mov	 edx, DWORD PTR _coder$[ebp]
  00459	66 89 84 4a 6c
	6c 00 00	 mov	 WORD PTR [edx+ecx*2+27756], ax
  00461	eb d9		 jmp	 SHORT $LN2@lzma_decod
$LN1@lzma_decod:

; 951  : 
; 952  : 	coder->sequence = SEQ_IS_MATCH;

  00463	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  00466	c7 80 a0 6e 00
	00 01 00 00 00	 mov	 DWORD PTR [eax+28320], 1

; 953  : 	coder->probs = NULL;

  00470	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  00473	c7 81 a4 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+28324], 0

; 954  : 	coder->symbol = 0;

  0047d	8b 55 f8	 mov	 edx, DWORD PTR _coder$[ebp]
  00480	c7 82 a8 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+28328], 0

; 955  : 	coder->limit = 0;

  0048a	8b 45 f8	 mov	 eax, DWORD PTR _coder$[ebp]
  0048d	c7 80 ac 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [eax+28332], 0

; 956  : 	coder->offset = 0;

  00497	8b 4d f8	 mov	 ecx, DWORD PTR _coder$[ebp]
  0049a	c7 81 b0 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+28336], 0

; 957  : 	coder->len = 0;

  004a4	8b 55 f8	 mov	 edx, DWORD PTR _coder$[ebp]
  004a7	c7 82 b4 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+28340], 0

; 958  : 
; 959  : 	return;
; 960  : }

  004b1	8b e5		 mov	 esp, ebp
  004b3	5d		 pop	 ebp
  004b4	c3		 ret	 0
_lzma_decoder_reset ENDP
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lz\lz_decoder.h
_TEXT	ENDS
;	COMDAT _dict_repeat
_TEXT	SEGMENT
tv176 = -28						; size = 4
tv68 = -24						; size = 4
$T34887 = -17						; size = 1
_copy_size$32320 = -16					; size = 4
_copy_pos$32318 = -12					; size = 4
_dict_avail$ = -8					; size = 4
_left$ = -4						; size = 4
_dict$ = 8						; size = 4
_distance$ = 12						; size = 4
_len$ = 16						; size = 4
_dict_repeat PROC					; COMDAT

; 132  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 1c	 sub	 esp, 28			; 0000001cH

; 133  : 	// Don't write past the end of the dictionary.
; 134  : 	const size_t dict_avail = dict->limit - dict->pos;

  00006	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00009	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  0000c	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  0000f	2b 51 04	 sub	 edx, DWORD PTR [ecx+4]
  00012	89 55 f8	 mov	 DWORD PTR _dict_avail$[ebp], edx

; 135  : 	uint32_t left = (uint32_t)my_min(dict_avail, *len);

  00015	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00018	8b 4d f8	 mov	 ecx, DWORD PTR _dict_avail$[ebp]
  0001b	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0001d	73 08		 jae	 SHORT $LN13@dict_repea
  0001f	8b 55 f8	 mov	 edx, DWORD PTR _dict_avail$[ebp]
  00022	89 55 e8	 mov	 DWORD PTR tv68[ebp], edx
  00025	eb 08		 jmp	 SHORT $LN14@dict_repea
$LN13@dict_repea:
  00027	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  0002a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002c	89 4d e8	 mov	 DWORD PTR tv68[ebp], ecx
$LN14@dict_repea:
  0002f	8b 55 e8	 mov	 edx, DWORD PTR tv68[ebp]
  00032	89 55 fc	 mov	 DWORD PTR _left$[ebp], edx

; 136  : 	*len -= left;

  00035	8b 45 10	 mov	 eax, DWORD PTR _len$[ebp]
  00038	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003a	2b 4d fc	 sub	 ecx, DWORD PTR _left$[ebp]
  0003d	8b 55 10	 mov	 edx, DWORD PTR _len$[ebp]
  00040	89 0a		 mov	 DWORD PTR [edx], ecx

; 137  : 
; 138  : 	// Repeat a block of data from the history. Because memcpy() is faster
; 139  : 	// than copying byte by byte in a loop, the copying process gets split
; 140  : 	// into three cases.
; 141  : 	if (distance < left) {

  00042	8b 45 0c	 mov	 eax, DWORD PTR _distance$[ebp]
  00045	3b 45 fc	 cmp	 eax, DWORD PTR _left$[ebp]
  00048	73 68		 jae	 SHORT $LN10@dict_repea
$LN9@dict_repea:

; 142  : 		// Source and target areas overlap, thus we can't use
; 143  : 		// memcpy() nor even memmove() safely.
; 144  : 		do {
; 145  : 			dict->buf[dict->pos] = dict_get(dict, distance);

  0004a	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  0004d	8b 55 0c	 mov	 edx, DWORD PTR _distance$[ebp]
  00050	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00053	73 09		 jae	 SHORT $LN17@dict_repea
  00055	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv176[ebp], 0
  0005c	eb 09		 jmp	 SHORT $LN18@dict_repea
$LN17@dict_repea:
  0005e	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00061	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00064	89 4d e4	 mov	 DWORD PTR tv176[ebp], ecx
$LN18@dict_repea:
  00067	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  0006a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0006d	2b 45 0c	 sub	 eax, DWORD PTR _distance$[ebp]
  00070	8b 4d e4	 mov	 ecx, DWORD PTR tv176[ebp]
  00073	8d 54 08 ff	 lea	 edx, DWORD PTR [eax+ecx-1]
  00077	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  0007a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0007c	8a 14 0a	 mov	 dl, BYTE PTR [edx+ecx]
  0007f	88 55 ef	 mov	 BYTE PTR $T34887[ebp], dl
  00082	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00085	8b 08		 mov	 ecx, DWORD PTR [eax]
  00087	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  0008a	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0008d	8a 55 ef	 mov	 dl, BYTE PTR $T34887[ebp]
  00090	88 14 01	 mov	 BYTE PTR [ecx+eax], dl

; 146  : 			++dict->pos;

  00093	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00096	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00099	83 c1 01	 add	 ecx, 1
  0009c	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  0009f	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 147  : 		} while (--left > 0);

  000a2	8b 45 fc	 mov	 eax, DWORD PTR _left$[ebp]
  000a5	83 e8 01	 sub	 eax, 1
  000a8	89 45 fc	 mov	 DWORD PTR _left$[ebp], eax
  000ab	75 9d		 jne	 SHORT $LN9@dict_repea

; 148  : 
; 149  : 	} else if (distance < dict->pos) {

  000ad	e9 0b 01 00 00	 jmp	 $LN6@dict_repea
$LN10@dict_repea:
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  000b5	8b 55 0c	 mov	 edx, DWORD PTR _distance$[ebp]
  000b8	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  000bb	73 3e		 jae	 SHORT $LN5@dict_repea

; 150  : 		// The easiest and fastest case
; 151  : 		memcpy(dict->buf + dict->pos,
; 152  : 				dict->buf + dict->pos - distance - 1,
; 153  : 				left);

  000bd	8b 45 fc	 mov	 eax, DWORD PTR _left$[ebp]
  000c0	50		 push	 eax
  000c1	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  000c4	8b 11		 mov	 edx, DWORD PTR [ecx]
  000c6	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  000c9	03 50 04	 add	 edx, DWORD PTR [eax+4]
  000cc	2b 55 0c	 sub	 edx, DWORD PTR _distance$[ebp]
  000cf	83 ea 01	 sub	 edx, 1
  000d2	52		 push	 edx
  000d3	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  000d6	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d8	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  000db	03 50 04	 add	 edx, DWORD PTR [eax+4]
  000de	52		 push	 edx
  000df	e8 00 00 00 00	 call	 _memcpy
  000e4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 154  : 		dict->pos += left;

  000e7	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  000ea	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  000ed	03 55 fc	 add	 edx, DWORD PTR _left$[ebp]
  000f0	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  000f3	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 155  : 
; 156  : 	} else {

  000f6	e9 c2 00 00 00	 jmp	 $LN6@dict_repea
$LN5@dict_repea:

; 157  : 		// The bigger the dictionary, the more rare this
; 158  : 		// case occurs. We need to "wrap" the dict, thus
; 159  : 		// we might need two memcpy() to copy all the data.
; 160  : 		assert(dict->full == dict->size);
; 161  : 	  {
; 162  : 		const uint32_t copy_pos
; 163  : 				= (const uint32_t)(dict->pos - distance - 1 + dict->size);

  000fb	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  000fe	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00101	2b 55 0c	 sub	 edx, DWORD PTR _distance$[ebp]
  00104	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00107	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  0010a	8d 54 0a ff	 lea	 edx, DWORD PTR [edx+ecx-1]
  0010e	89 55 f4	 mov	 DWORD PTR _copy_pos$32318[ebp], edx

; 164  : 		uint32_t copy_size = (uint32_t)(dict->size - copy_pos);

  00111	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00114	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  00117	2b 4d f4	 sub	 ecx, DWORD PTR _copy_pos$32318[ebp]
  0011a	89 4d f0	 mov	 DWORD PTR _copy_size$32320[ebp], ecx

; 165  : 
; 166  : 		if (copy_size < left) {

  0011d	8b 55 f0	 mov	 edx, DWORD PTR _copy_size$32320[ebp]
  00120	3b 55 fc	 cmp	 edx, DWORD PTR _left$[ebp]
  00123	73 68		 jae	 SHORT $LN3@dict_repea

; 167  : 			memmove(dict->buf + dict->pos, dict->buf + copy_pos,
; 168  : 					copy_size);

  00125	8b 45 f0	 mov	 eax, DWORD PTR _copy_size$32320[ebp]
  00128	50		 push	 eax
  00129	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  0012c	8b 11		 mov	 edx, DWORD PTR [ecx]
  0012e	03 55 f4	 add	 edx, DWORD PTR _copy_pos$32318[ebp]
  00131	52		 push	 edx
  00132	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00135	8b 08		 mov	 ecx, DWORD PTR [eax]
  00137	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  0013a	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  0013d	51		 push	 ecx
  0013e	e8 00 00 00 00	 call	 _memmove
  00143	83 c4 0c	 add	 esp, 12			; 0000000cH

; 169  : 			dict->pos += copy_size;

  00146	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00149	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0014c	03 4d f0	 add	 ecx, DWORD PTR _copy_size$32320[ebp]
  0014f	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  00152	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 170  : 			copy_size = left - copy_size;

  00155	8b 45 fc	 mov	 eax, DWORD PTR _left$[ebp]
  00158	2b 45 f0	 sub	 eax, DWORD PTR _copy_size$32320[ebp]
  0015b	89 45 f0	 mov	 DWORD PTR _copy_size$32320[ebp], eax

; 171  : 			memcpy(dict->buf + dict->pos, dict->buf, copy_size);

  0015e	8b 4d f0	 mov	 ecx, DWORD PTR _copy_size$32320[ebp]
  00161	51		 push	 ecx
  00162	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  00165	8b 02		 mov	 eax, DWORD PTR [edx]
  00167	50		 push	 eax
  00168	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  0016b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0016d	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00170	03 50 04	 add	 edx, DWORD PTR [eax+4]
  00173	52		 push	 edx
  00174	e8 00 00 00 00	 call	 _memcpy
  00179	83 c4 0c	 add	 esp, 12			; 0000000cH

; 172  : 			dict->pos += copy_size;

  0017c	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  0017f	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00182	03 55 f0	 add	 edx, DWORD PTR _copy_size$32320[ebp]
  00185	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  00188	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 173  : 		} else {

  0018b	eb 30		 jmp	 SHORT $LN6@dict_repea
$LN3@dict_repea:

; 174  : 			memmove(dict->buf + dict->pos, dict->buf + copy_pos,
; 175  : 					left);

  0018d	8b 4d fc	 mov	 ecx, DWORD PTR _left$[ebp]
  00190	51		 push	 ecx
  00191	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  00194	8b 02		 mov	 eax, DWORD PTR [edx]
  00196	03 45 f4	 add	 eax, DWORD PTR _copy_pos$32318[ebp]
  00199	50		 push	 eax
  0019a	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  0019d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0019f	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  001a2	03 50 04	 add	 edx, DWORD PTR [eax+4]
  001a5	52		 push	 edx
  001a6	e8 00 00 00 00	 call	 _memmove
  001ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 176  : 			dict->pos += left;

  001ae	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  001b1	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  001b4	03 55 fc	 add	 edx, DWORD PTR _left$[ebp]
  001b7	8b 45 08	 mov	 eax, DWORD PTR _dict$[ebp]
  001ba	89 50 04	 mov	 DWORD PTR [eax+4], edx
$LN6@dict_repea:

; 177  : 		}
; 178  : 	  }
; 179  : 	}
; 180  : 
; 181  : 	// Update how full the dictionary is.
; 182  : 	if (dict->full < dict->pos)

  001bd	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  001c0	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  001c3	8b 41 08	 mov	 eax, DWORD PTR [ecx+8]
  001c6	3b 42 04	 cmp	 eax, DWORD PTR [edx+4]
  001c9	73 0c		 jae	 SHORT $LN1@dict_repea

; 183  : 		dict->full = dict->pos;

  001cb	8b 4d 08	 mov	 ecx, DWORD PTR _dict$[ebp]
  001ce	8b 55 08	 mov	 edx, DWORD PTR _dict$[ebp]
  001d1	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001d4	89 41 08	 mov	 DWORD PTR [ecx+8], eax
$LN1@dict_repea:

; 184  : 
; 185  : 	return unlikely(*len != 0);

  001d7	8b 4d 10	 mov	 ecx, DWORD PTR _len$[ebp]
  001da	33 c0		 xor	 eax, eax
  001dc	83 39 00	 cmp	 DWORD PTR [ecx], 0
  001df	0f 95 c0	 setne	 al

; 186  : }

  001e2	8b e5		 mov	 esp, ebp
  001e4	5d		 pop	 ebp
  001e5	c3		 ret	 0
_dict_repeat ENDP
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_decoder.c
;	COMDAT _lzma_decode
_TEXT	SEGMENT
tv6701 = -224						; size = 4
tv6682 = -220						; size = 4
tv4093 = -216						; size = 4
tv5918 = -212						; size = 4
tv2327 = -208						; size = 4
tv2028 = -204						; size = 4
tv4090 = -200						; size = 4
tv4083 = -196						; size = 4
tv134 = -192						; size = 4
tv4193 = -188						; size = 8
tv4192 = -180						; size = 4
tv90 = -176						; size = 4
tv4114 = -172						; size = 4
$T36002 = -147						; size = 1
$T35987 = -146						; size = 1
$T35979 = -145						; size = 1
$T35971 = -144						; size = 4
_distance$33535 = -140					; size = 4
_distance$33530 = -136					; size = 4
_distance$33515 = -132					; size = 4
_match_bit$32752 = -128					; size = 4
_subcoder_index$32753 = -124				; size = 4
_no_eopm$32592 = -117					; size = 1
_literal_pos_mask$32588 = -116				; size = 4
_ret$32591 = -112					; size = 4
_literal_context_bits$32589 = -108			; size = 4
_pos_state$32590 = -104					; size = 4
_limit$32585 = -100					; size = 4
_pos_mask$32582 = -96					; size = 4
_offset$32586 = -92					; size = 4
_len$32587 = -88					; size = 4
_probs$32583 = -84					; size = 4
_symbol$32584 = -80					; size = 4
_state$32577 = -76					; size = 4
_rep2$32580 = -72					; size = 4
_dict_start$32573 = -68					; size = 4
_rc_bound$32576 = -64					; size = 4
_rep3$32581 = -60					; size = 4
_rc_in_pos$32575 = -56					; size = 4
_dict$32572 = -52					; size = 24
_rep0$32578 = -28					; size = 4
_rc$32574 = -24						; size = 12
_rep1$32579 = -12					; size = 4
_ret$32570 = -8						; size = 4
_coder$ = -4						; size = 4
_coder_ptr$ = 8						; size = 4
_dictptr$ = 12						; size = 4
_in$ = 16						; size = 4
_in_pos$ = 20						; size = 4
_in_size$ = 24						; size = 4
_lzma_decode PROC					; COMDAT

; 293  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	56		 push	 esi

; 294  : 	lzma_lzma1_decoder *restrict coder = coder_ptr;

  0000a	8b 45 08	 mov	 eax, DWORD PTR _coder_ptr$[ebp]
  0000d	89 45 fc	 mov	 DWORD PTR _coder$[ebp], eax

; 295  : 
; 296  : 	////////////////////
; 297  : 	// Initialization //
; 298  : 	////////////////////
; 299  : 
; 300  : 	{
; 301  : 		const lzma_ret ret = rc_read_init(
; 302  : 				&coder->rc, in, in_pos, in_size);

  00010	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  00013	81 c1 6c 6e 00
	00		 add	 ecx, 28268		; 00006e6cH
  00019	89 8d 70 ff ff
	ff		 mov	 DWORD PTR $T35971[ebp], ecx
$LN1216@lzma_decod@2:
  0001f	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR $T35971[ebp]
  00025	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  00029	0f 86 82 00 00
	00		 jbe	 $LN1215@lzma_decod@2
  0002f	8b 45 14	 mov	 eax, DWORD PTR _in_pos$[ebp]
  00032	8b 08		 mov	 ecx, DWORD PTR [eax]
  00034	3b 4d 18	 cmp	 ecx, DWORD PTR _in_size$[ebp]
  00037	75 09		 jne	 SHORT $LN1214@lzma_decod@2
  00039	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _ret$32570[ebp], 0
  00040	eb 76		 jmp	 SHORT $LN1217@lzma_decod@2
$LN1214@lzma_decod@2:
  00042	8b 95 70 ff ff
	ff		 mov	 edx, DWORD PTR $T35971[ebp]
  00048	83 7a 08 05	 cmp	 DWORD PTR [edx+8], 5
  0004c	75 19		 jne	 SHORT $LN1213@lzma_decod@2
  0004e	8b 45 14	 mov	 eax, DWORD PTR _in_pos$[ebp]
  00051	8b 08		 mov	 ecx, DWORD PTR [eax]
  00053	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00056	0f b6 04 0a	 movzx	 eax, BYTE PTR [edx+ecx]
  0005a	85 c0		 test	 eax, eax
  0005c	74 09		 je	 SHORT $LN1213@lzma_decod@2
  0005e	c7 45 f8 09 00
	00 00		 mov	 DWORD PTR _ret$32570[ebp], 9
  00065	eb 51		 jmp	 SHORT $LN1217@lzma_decod@2
$LN1213@lzma_decod@2:
  00067	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR $T35971[ebp]
  0006d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00070	c1 e2 08	 shl	 edx, 8
  00073	8b 45 14	 mov	 eax, DWORD PTR _in_pos$[ebp]
  00076	8b 08		 mov	 ecx, DWORD PTR [eax]
  00078	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0007b	0f b6 0c 08	 movzx	 ecx, BYTE PTR [eax+ecx]
  0007f	0b d1		 or	 edx, ecx
  00081	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T35971[ebp]
  00087	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0008a	8b 4d 14	 mov	 ecx, DWORD PTR _in_pos$[ebp]
  0008d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0008f	83 c2 01	 add	 edx, 1
  00092	8b 45 14	 mov	 eax, DWORD PTR _in_pos$[ebp]
  00095	89 10		 mov	 DWORD PTR [eax], edx
  00097	8b 8d 70 ff ff
	ff		 mov	 ecx, DWORD PTR $T35971[ebp]
  0009d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000a0	83 ea 01	 sub	 edx, 1
  000a3	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR $T35971[ebp]
  000a9	89 50 08	 mov	 DWORD PTR [eax+8], edx
  000ac	e9 6e ff ff ff	 jmp	 $LN1216@lzma_decod@2
$LN1215@lzma_decod@2:
  000b1	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR _ret$32570[ebp], 1
$LN1217@lzma_decod@2:

; 303  : 		if (ret != LZMA_STREAM_END)

  000b8	83 7d f8 01	 cmp	 DWORD PTR _ret$32570[ebp], 1
  000bc	74 08		 je	 SHORT $LN1206@lzma_decod@2

; 304  : 			return ret;

  000be	8b 45 f8	 mov	 eax, DWORD PTR _ret$32570[ebp]
  000c1	e9 64 53 00 00	 jmp	 $LN1207@lzma_decod@2
$LN1206@lzma_decod@2:

; 305  : 	}
; 306  : 
; 307  : 	///////////////
; 308  : 	// Variables //
; 309  : 	///////////////
; 310  : 
; 311  : 	// Making local copies of often-used variables improves both
; 312  : 	// speed and readability.
; 313  :   {
; 314  : 	lzma_dict dict = *dictptr;

  000c6	8b 4d 0c	 mov	 ecx, DWORD PTR _dictptr$[ebp]
  000c9	8b 11		 mov	 edx, DWORD PTR [ecx]
  000cb	89 55 cc	 mov	 DWORD PTR _dict$32572[ebp], edx
  000ce	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  000d1	89 45 d0	 mov	 DWORD PTR _dict$32572[ebp+4], eax
  000d4	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000d7	89 55 d4	 mov	 DWORD PTR _dict$32572[ebp+8], edx
  000da	8b 41 0c	 mov	 eax, DWORD PTR [ecx+12]
  000dd	89 45 d8	 mov	 DWORD PTR _dict$32572[ebp+12], eax
  000e0	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  000e3	89 55 dc	 mov	 DWORD PTR _dict$32572[ebp+16], edx
  000e6	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  000e9	89 45 e0	 mov	 DWORD PTR _dict$32572[ebp+20], eax

; 315  : 
; 316  : 	const size_t dict_start = dict.pos;

  000ec	8b 4d d0	 mov	 ecx, DWORD PTR _dict$32572[ebp+4]
  000ef	89 4d bc	 mov	 DWORD PTR _dict_start$32573[ebp], ecx

; 317  : 
; 318  : 	// Range decoder
; 319  : 	rc_to_local(coder->rc, *in_pos);

  000f2	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  000f5	81 c2 6c 6e 00
	00		 add	 edx, 28268		; 00006e6cH
  000fb	8b 02		 mov	 eax, DWORD PTR [edx]
  000fd	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  00100	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00103	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  00106	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  00109	89 55 f0	 mov	 DWORD PTR _rc$32574[ebp+8], edx
  0010c	8b 45 14	 mov	 eax, DWORD PTR _in_pos$[ebp]
  0010f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00111	89 4d c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], ecx

; 320  : 
; 321  : 	// State
; 322  : 	uint32_t state = coder->state;

  00114	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  00117	8b 82 78 6e 00
	00		 mov	 eax, DWORD PTR [edx+28280]
  0011d	89 45 b4	 mov	 DWORD PTR _state$32577[ebp], eax

; 323  : 	uint32_t rep0 = coder->rep0;

  00120	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  00123	8b 91 7c 6e 00
	00		 mov	 edx, DWORD PTR [ecx+28284]
  00129	89 55 e4	 mov	 DWORD PTR _rep0$32578[ebp], edx

; 324  : 	uint32_t rep1 = coder->rep1;

  0012c	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0012f	8b 88 80 6e 00
	00		 mov	 ecx, DWORD PTR [eax+28288]
  00135	89 4d f4	 mov	 DWORD PTR _rep1$32579[ebp], ecx

; 325  : 	uint32_t rep2 = coder->rep2;

  00138	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0013b	8b 82 84 6e 00
	00		 mov	 eax, DWORD PTR [edx+28292]
  00141	89 45 b8	 mov	 DWORD PTR _rep2$32580[ebp], eax

; 326  : 	uint32_t rep3 = coder->rep3;

  00144	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  00147	8b 91 88 6e 00
	00		 mov	 edx, DWORD PTR [ecx+28296]
  0014d	89 55 c4	 mov	 DWORD PTR _rep3$32581[ebp], edx

; 327  : 
; 328  :   {
; 329  : 	const uint32_t pos_mask = coder->pos_mask;

  00150	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  00153	8b 88 8c 6e 00
	00		 mov	 ecx, DWORD PTR [eax+28300]
  00159	89 4d a0	 mov	 DWORD PTR _pos_mask$32582[ebp], ecx

; 330  : 
; 331  : 	// These variables are actually needed only if we last time ran
; 332  : 	// out of input in the middle of the decoder loop.
; 333  : 	probability *probs = coder->probs;

  0015c	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0015f	8b 82 a4 6e 00
	00		 mov	 eax, DWORD PTR [edx+28324]
  00165	89 45 ac	 mov	 DWORD PTR _probs$32583[ebp], eax

; 334  : 	uint32_t symbol = coder->symbol;

  00168	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0016b	8b 91 a8 6e 00
	00		 mov	 edx, DWORD PTR [ecx+28328]
  00171	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx

; 335  : 	uint32_t limit = coder->limit;

  00174	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  00177	8b 88 ac 6e 00
	00		 mov	 ecx, DWORD PTR [eax+28332]
  0017d	89 4d 9c	 mov	 DWORD PTR _limit$32585[ebp], ecx

; 336  : 	uint32_t offset = coder->offset;

  00180	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  00183	8b 82 b0 6e 00
	00		 mov	 eax, DWORD PTR [edx+28336]
  00189	89 45 a4	 mov	 DWORD PTR _offset$32586[ebp], eax

; 337  : 	uint32_t len = coder->len;

  0018c	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0018f	8b 91 b4 6e 00
	00		 mov	 edx, DWORD PTR [ecx+28340]
  00195	89 55 a8	 mov	 DWORD PTR _len$32587[ebp], edx

; 338  : 
; 339  :   {
; 340  : 	const uint32_t literal_pos_mask = coder->literal_pos_mask;

  00198	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0019b	8b 88 94 6e 00
	00		 mov	 ecx, DWORD PTR [eax+28308]
  001a1	89 4d 8c	 mov	 DWORD PTR _literal_pos_mask$32588[ebp], ecx

; 341  : 	const uint32_t literal_context_bits = coder->literal_context_bits;

  001a4	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  001a7	8b 82 90 6e 00
	00		 mov	 eax, DWORD PTR [edx+28304]
  001ad	89 45 94	 mov	 DWORD PTR _literal_context_bits$32589[ebp], eax

; 342  : 
; 343  : 	// Temporary variables
; 344  : 	uint32_t pos_state = dict.pos & pos_mask;

  001b0	8b 4d d0	 mov	 ecx, DWORD PTR _dict$32572[ebp+4]
  001b3	23 4d a0	 and	 ecx, DWORD PTR _pos_mask$32582[ebp]
  001b6	89 4d 98	 mov	 DWORD PTR _pos_state$32590[ebp], ecx

; 345  : 
; 346  : 	lzma_ret ret = LZMA_OK;

  001b9	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _ret$32591[ebp], 0

; 347  : 
; 348  : 	// If uncompressed size is known, there must be no end of payload
; 349  : 	// marker.
; 350  :   {
; 351  : 	const bool no_eopm = coder->uncompressed_size
; 352  : 			!= LZMA_VLI_UNKNOWN;

  001c0	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  001c3	89 95 54 ff ff
	ff		 mov	 DWORD PTR tv4114[ebp], edx
  001c9	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR tv4114[ebp]
  001cf	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR tv4114[ebp]
  001d5	8b 90 98 6e 00
	00		 mov	 edx, DWORD PTR [eax+28312]
  001db	23 91 9c 6e 00
	00		 and	 edx, DWORD PTR [ecx+28316]
  001e1	83 fa ff	 cmp	 edx, -1
  001e4	74 0c		 je	 SHORT $LN1209@lzma_decod@2
  001e6	c7 85 50 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv90[ebp], 1
  001f0	eb 0a		 jmp	 SHORT $LN1210@lzma_decod@2
$LN1209@lzma_decod@2:
  001f2	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], 0
$LN1210@lzma_decod@2:
  001fc	8a 85 50 ff ff
	ff		 mov	 al, BYTE PTR tv90[ebp]
  00202	88 45 8b	 mov	 BYTE PTR _no_eopm$32592[ebp], al

; 353  : 	if (no_eopm && coder->uncompressed_size < dict.limit - dict.pos)

  00205	0f b6 4d 8b	 movzx	 ecx, BYTE PTR _no_eopm$32592[ebp]
  00209	85 c9		 test	 ecx, ecx
  0020b	74 56		 je	 SHORT $LN1205@lzma_decod@2
  0020d	8b 55 d8	 mov	 edx, DWORD PTR _dict$32572[ebp+12]
  00210	2b 55 d0	 sub	 edx, DWORD PTR _dict$32572[ebp+4]
  00213	33 c0		 xor	 eax, eax
  00215	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  00218	89 8d 4c ff ff
	ff		 mov	 DWORD PTR tv4192[ebp], ecx
  0021e	89 95 44 ff ff
	ff		 mov	 DWORD PTR tv4193[ebp], edx
  00224	89 85 48 ff ff
	ff		 mov	 DWORD PTR tv4193[ebp+4], eax
  0022a	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR tv4192[ebp]
  00230	8b 82 9c 6e 00
	00		 mov	 eax, DWORD PTR [edx+28316]
  00236	3b 85 48 ff ff
	ff		 cmp	 eax, DWORD PTR tv4193[ebp+4]
  0023c	77 25		 ja	 SHORT $LN1205@lzma_decod@2
  0023e	72 14		 jb	 SHORT $LN1261@lzma_decod@2
  00240	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR tv4192[ebp]
  00246	8b 91 98 6e 00
	00		 mov	 edx, DWORD PTR [ecx+28312]
  0024c	3b 95 44 ff ff
	ff		 cmp	 edx, DWORD PTR tv4193[ebp]
  00252	73 0f		 jae	 SHORT $LN1205@lzma_decod@2
$LN1261@lzma_decod@2:

; 354  : 		dict.limit = dict.pos + (size_t)(coder->uncompressed_size);

  00254	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  00257	8b 88 98 6e 00
	00		 mov	 ecx, DWORD PTR [eax+28312]
  0025d	03 4d d0	 add	 ecx, DWORD PTR _dict$32572[ebp+4]
  00260	89 4d d8	 mov	 DWORD PTR _dict$32572[ebp+12], ecx
$LN1205@lzma_decod@2:

; 355  : 
; 356  : 	// The main decoder loop. The "switch" is used to restart the decoder at
; 357  : 	// correct location. Once restarted, the "switch" is no longer used.
; 358  : 	switch (coder->sequence)

  00263	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  00266	8b 82 a0 6e 00
	00		 mov	 eax, DWORD PTR [edx+28320]
  0026c	89 85 40 ff ff
	ff		 mov	 DWORD PTR tv134[ebp], eax
  00272	83 bd 40 ff ff
	ff 46		 cmp	 DWORD PTR tv134[ebp], 70 ; 00000046H
  00279	0f 87 bf 4f 00
	00		 ja	 $LN15@lzma_decod@2
  0027f	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR tv134[ebp]
  00285	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN1262@lzma_decod@2[ecx*4]
$LN1202@lzma_decod@2:

; 359  : 	while (true) {

  0028c	ba 01 00 00 00	 mov	 edx, 1
  00291	85 d2		 test	 edx, edx
  00293	0f 84 a5 4f 00
	00		 je	 $LN15@lzma_decod@2

; 360  : 		// Calculate new pos_state. This is skipped on the first loop
; 361  : 		// since we already calculated it when setting up the local
; 362  : 		// variables.
; 363  : 		pos_state = dict.pos & pos_mask;

  00299	8b 45 d0	 mov	 eax, DWORD PTR _dict$32572[ebp+4]
  0029c	23 45 a0	 and	 eax, DWORD PTR _pos_mask$32582[ebp]
  0029f	89 45 98	 mov	 DWORD PTR _pos_state$32590[ebp], eax
$LN1200@lzma_decod@2:

; 364  : 
; 365  : 	case SEQ_NORMALIZE:
; 366  : 	case SEQ_IS_MATCH:
; 367  : 		if (unlikely(no_eopm && dict.pos == dict.limit))

  002a2	0f b6 4d 8b	 movzx	 ecx, BYTE PTR _no_eopm$32592[ebp]
  002a6	85 c9		 test	 ecx, ecx
  002a8	74 0d		 je	 SHORT $LN1198@lzma_decod@2
  002aa	8b 55 d0	 mov	 edx, DWORD PTR _dict$32572[ebp+4]
  002ad	3b 55 d8	 cmp	 edx, DWORD PTR _dict$32572[ebp+12]
  002b0	75 05		 jne	 SHORT $LN1198@lzma_decod@2

; 368  : 			break;

  002b2	e9 87 4f 00 00	 jmp	 $LN15@lzma_decod@2
$LN1198@lzma_decod@2:

; 369  : 
; 370  : 		rc_if_0(coder->is_match[state][pos_state], SEQ_IS_MATCH) {

  002b7	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  002be	73 40		 jae	 SHORT $LN1197@lzma_decod@2
  002c0	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  002c3	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  002c6	75 12		 jne	 SHORT $LN1194@lzma_decod@2
  002c8	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  002cb	c7 81 a0 6e 00
	00 01 00 00 00	 mov	 DWORD PTR [ecx+28320], 1
  002d5	e9 bb 4f 00 00	 jmp	 $out$32609
$LN1194@lzma_decod@2:
  002da	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  002dd	c1 e2 08	 shl	 edx, 8
  002e0	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  002e3	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  002e6	c1 e0 08	 shl	 eax, 8
  002e9	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  002ec	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  002ef	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  002f2	0b c2		 or	 eax, edx
  002f4	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  002f7	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  002fa	83 c0 01	 add	 eax, 1
  002fd	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN1197@lzma_decod@2:
  00300	33 c9		 xor	 ecx, ecx
  00302	75 b3		 jne	 SHORT $LN1198@lzma_decod@2
  00304	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00307	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  0030a	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  0030d	c1 e0 05	 shl	 eax, 5
  00310	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  00313	8d 84 01 00 60
	00 00		 lea	 eax, DWORD PTR [ecx+eax+24576]
  0031a	8b 4d 98	 mov	 ecx, DWORD PTR _pos_state$32590[ebp]
  0031d	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  00321	0f af d0	 imul	 edx, eax
  00324	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  00327	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0032a	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0032d	0f 83 17 12 00
	00		 jae	 $LN913@lzma_decod@2
$LN1192@lzma_decod@2:

; 371  : 			rc_update_0(coder->is_match[state][pos_state]);

  00333	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  00336	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00339	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  0033c	c1 e0 05	 shl	 eax, 5
  0033f	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  00342	8d 94 01 00 60
	00 00		 lea	 edx, DWORD PTR [ecx+eax+24576]
  00349	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  0034c	c1 e0 05	 shl	 eax, 5
  0034f	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  00352	8d 84 01 00 60
	00 00		 lea	 eax, DWORD PTR [ecx+eax+24576]
  00359	8b 4d 98	 mov	 ecx, DWORD PTR _pos_state$32590[ebp]
  0035c	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  00360	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00365	2b c8		 sub	 ecx, eax
  00367	c1 e9 05	 shr	 ecx, 5
  0036a	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  0036d	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  00371	03 d1		 add	 edx, ecx
  00373	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  00376	c1 e0 05	 shl	 eax, 5
  00379	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0037c	8d 84 01 00 60
	00 00		 lea	 eax, DWORD PTR [ecx+eax+24576]
  00383	8b 4d 98	 mov	 ecx, DWORD PTR _pos_state$32590[ebp]
  00386	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  0038a	33 d2		 xor	 edx, edx
  0038c	75 a5		 jne	 SHORT $LN1192@lzma_decod@2

; 372  : 
; 373  : 			// It's a literal i.e. a single 8-bit byte.
; 374  : 
; 375  : 			probs = literal_subcoder(coder->literal,
; 376  : 					literal_context_bits, literal_pos_mask,
; 377  : 					dict.pos, dict_get(&dict, 0));

  0038e	83 7d d0 00	 cmp	 DWORD PTR _dict$32572[ebp+4], 0
  00392	76 0c		 jbe	 SHORT $LN1221@lzma_decod@2
  00394	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv4083[ebp], 0
  0039e	eb 09		 jmp	 SHORT $LN1222@lzma_decod@2
$LN1221@lzma_decod@2:
  003a0	8b 45 dc	 mov	 eax, DWORD PTR _dict$32572[ebp+16]
  003a3	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv4083[ebp], eax
$LN1222@lzma_decod@2:
  003a9	8b 4d d0	 mov	 ecx, DWORD PTR _dict$32572[ebp+4]
  003ac	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR tv4083[ebp]
  003b2	8d 44 11 ff	 lea	 eax, DWORD PTR [ecx+edx-1]
  003b6	8b 4d cc	 mov	 ecx, DWORD PTR _dict$32572[ebp]
  003b9	8a 14 01	 mov	 dl, BYTE PTR [ecx+eax]
  003bc	88 95 6f ff ff
	ff		 mov	 BYTE PTR $T35979[ebp], dl
  003c2	8b 45 d0	 mov	 eax, DWORD PTR _dict$32572[ebp+4]
  003c5	23 45 8c	 and	 eax, DWORD PTR _literal_pos_mask$32588[ebp]
  003c8	8b 4d 94	 mov	 ecx, DWORD PTR _literal_context_bits$32589[ebp]
  003cb	d3 e0		 shl	 eax, cl
  003cd	0f b6 95 6f ff
	ff ff		 movzx	 edx, BYTE PTR $T35979[ebp]
  003d4	b9 08 00 00 00	 mov	 ecx, 8
  003d9	2b 4d 94	 sub	 ecx, DWORD PTR _literal_context_bits$32589[ebp]
  003dc	d3 fa		 sar	 edx, cl
  003de	03 c2		 add	 eax, edx
  003e0	69 c0 00 06 00
	00		 imul	 eax, 1536		; 00000600H
  003e6	03 45 fc	 add	 eax, DWORD PTR _coder$[ebp]
  003e9	89 45 ac	 mov	 DWORD PTR _probs$32583[ebp], eax

; 378  : 			symbol = 1;

  003ec	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _symbol$32584[ebp], 1

; 379  : 
; 380  : 			if (is_literal_state(state)) {

  003f3	83 7d b4 07	 cmp	 DWORD PTR _state$32577[ebp], 7
  003f7	0f 83 a5 07 00
	00		 jae	 $LN1189@lzma_decod@2
$LN1184@lzma_decod@2:

; 381  : 				// Decode literal without match byte.
; 382  : #ifdef HAVE_SMALL
; 383  : 	case SEQ_LITERAL:
; 384  : 				do {
; 385  : 					rc_bit(probs[symbol], , , SEQ_LITERAL);
; 386  : 				} while (symbol < (1 << 8));
; 387  : #else
; 388  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL0);

  003fd	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  00404	73 40		 jae	 SHORT $LN1183@lzma_decod@2
  00406	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  00409	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  0040c	75 12		 jne	 SHORT $LN1180@lzma_decod@2
  0040e	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  00411	c7 81 a0 6e 00
	00 02 00 00 00	 mov	 DWORD PTR [ecx+28320], 2
  0041b	e9 75 4e 00 00	 jmp	 $out$32609
$LN1180@lzma_decod@2:
  00420	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00423	c1 e2 08	 shl	 edx, 8
  00426	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00429	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  0042c	c1 e0 08	 shl	 eax, 8
  0042f	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00432	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  00435	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00438	0b c2		 or	 eax, edx
  0043a	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0043d	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  00440	83 c0 01	 add	 eax, 1
  00443	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN1183@lzma_decod@2:
  00446	33 c9		 xor	 ecx, ecx
  00448	75 b3		 jne	 SHORT $LN1184@lzma_decod@2
  0044a	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0044d	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  00450	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00453	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00456	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0045a	0f af d0	 imul	 edx, eax
  0045d	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  00460	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00463	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00466	73 3e		 jae	 SHORT $LN1174@lzma_decod@2
$LN1178@lzma_decod@2:
  00468	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  0046b	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0046e	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00471	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00474	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00478	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0047d	2b c2		 sub	 eax, edx
  0047f	c1 e8 05	 shr	 eax, 5
  00482	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  00485	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00488	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  0048c	03 c8		 add	 ecx, eax
  0048e	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00491	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00494	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  00498	33 c9		 xor	 ecx, ecx
  0049a	75 cc		 jne	 SHORT $LN1178@lzma_decod@2
  0049c	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0049f	d1 e2		 shl	 edx, 1
  004a1	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  004a4	eb 43		 jmp	 SHORT $LN1186@lzma_decod@2
$LN1174@lzma_decod@2:
  004a6	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  004a9	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  004ac	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  004af	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  004b2	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  004b5	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  004b8	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  004bb	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  004be	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  004c2	c1 f9 05	 sar	 ecx, 5
  004c5	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  004c8	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  004cb	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  004cf	2b d1		 sub	 edx, ecx
  004d1	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  004d4	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  004d7	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  004db	33 d2		 xor	 edx, edx
  004dd	75 c7		 jne	 SHORT $LN1174@lzma_decod@2
  004df	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  004e2	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  004e6	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN1186@lzma_decod@2:
  004e9	33 d2		 xor	 edx, edx
  004eb	0f 85 0c ff ff
	ff		 jne	 $LN1184@lzma_decod@2
$LN1167@lzma_decod@2:

; 389  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL1);

  004f1	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  004f8	73 40		 jae	 SHORT $LN1166@lzma_decod@2
  004fa	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  004fd	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  00500	75 12		 jne	 SHORT $LN1163@lzma_decod@2
  00502	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  00505	c7 81 a0 6e 00
	00 03 00 00 00	 mov	 DWORD PTR [ecx+28320], 3
  0050f	e9 81 4d 00 00	 jmp	 $out$32609
$LN1163@lzma_decod@2:
  00514	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00517	c1 e2 08	 shl	 edx, 8
  0051a	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0051d	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  00520	c1 e0 08	 shl	 eax, 8
  00523	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00526	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  00529	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  0052c	0b c2		 or	 eax, edx
  0052e	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  00531	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  00534	83 c0 01	 add	 eax, 1
  00537	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN1166@lzma_decod@2:
  0053a	33 c9		 xor	 ecx, ecx
  0053c	75 b3		 jne	 SHORT $LN1167@lzma_decod@2
  0053e	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00541	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  00544	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00547	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  0054a	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0054e	0f af d0	 imul	 edx, eax
  00551	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  00554	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00557	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0055a	73 3e		 jae	 SHORT $LN1157@lzma_decod@2
$LN1161@lzma_decod@2:
  0055c	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  0055f	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00562	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00565	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00568	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0056c	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00571	2b c2		 sub	 eax, edx
  00573	c1 e8 05	 shr	 eax, 5
  00576	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  00579	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  0057c	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  00580	03 c8		 add	 ecx, eax
  00582	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00585	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00588	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  0058c	33 c9		 xor	 ecx, ecx
  0058e	75 cc		 jne	 SHORT $LN1161@lzma_decod@2
  00590	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00593	d1 e2		 shl	 edx, 1
  00595	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  00598	eb 43		 jmp	 SHORT $LN1169@lzma_decod@2
$LN1157@lzma_decod@2:
  0059a	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  0059d	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  005a0	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  005a3	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  005a6	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  005a9	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  005ac	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  005af	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  005b2	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  005b6	c1 f9 05	 sar	 ecx, 5
  005b9	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  005bc	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  005bf	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  005c3	2b d1		 sub	 edx, ecx
  005c5	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  005c8	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  005cb	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  005cf	33 d2		 xor	 edx, edx
  005d1	75 c7		 jne	 SHORT $LN1157@lzma_decod@2
  005d3	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  005d6	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  005da	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN1169@lzma_decod@2:
  005dd	33 d2		 xor	 edx, edx
  005df	0f 85 0c ff ff
	ff		 jne	 $LN1167@lzma_decod@2
$LN1150@lzma_decod@2:

; 390  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL2);

  005e5	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  005ec	73 40		 jae	 SHORT $LN1149@lzma_decod@2
  005ee	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  005f1	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  005f4	75 12		 jne	 SHORT $LN1146@lzma_decod@2
  005f6	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  005f9	c7 81 a0 6e 00
	00 04 00 00 00	 mov	 DWORD PTR [ecx+28320], 4
  00603	e9 8d 4c 00 00	 jmp	 $out$32609
$LN1146@lzma_decod@2:
  00608	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0060b	c1 e2 08	 shl	 edx, 8
  0060e	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00611	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  00614	c1 e0 08	 shl	 eax, 8
  00617	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  0061a	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  0061d	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00620	0b c2		 or	 eax, edx
  00622	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  00625	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  00628	83 c0 01	 add	 eax, 1
  0062b	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN1149@lzma_decod@2:
  0062e	33 c9		 xor	 ecx, ecx
  00630	75 b3		 jne	 SHORT $LN1150@lzma_decod@2
  00632	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00635	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  00638	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0063b	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  0063e	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  00642	0f af d0	 imul	 edx, eax
  00645	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  00648	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0064b	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0064e	73 3e		 jae	 SHORT $LN1140@lzma_decod@2
$LN1144@lzma_decod@2:
  00650	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  00653	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00656	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00659	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  0065c	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00660	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00665	2b c2		 sub	 eax, edx
  00667	c1 e8 05	 shr	 eax, 5
  0066a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0066d	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00670	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  00674	03 c8		 add	 ecx, eax
  00676	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00679	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0067c	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  00680	33 c9		 xor	 ecx, ecx
  00682	75 cc		 jne	 SHORT $LN1144@lzma_decod@2
  00684	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00687	d1 e2		 shl	 edx, 1
  00689	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  0068c	eb 43		 jmp	 SHORT $LN1152@lzma_decod@2
$LN1140@lzma_decod@2:
  0068e	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  00691	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  00694	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  00697	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0069a	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0069d	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  006a0	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  006a3	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  006a6	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  006aa	c1 f9 05	 sar	 ecx, 5
  006ad	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  006b0	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  006b3	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  006b7	2b d1		 sub	 edx, ecx
  006b9	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  006bc	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  006bf	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  006c3	33 d2		 xor	 edx, edx
  006c5	75 c7		 jne	 SHORT $LN1140@lzma_decod@2
  006c7	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  006ca	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  006ce	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN1152@lzma_decod@2:
  006d1	33 d2		 xor	 edx, edx
  006d3	0f 85 0c ff ff
	ff		 jne	 $LN1150@lzma_decod@2
$LN1133@lzma_decod@2:

; 391  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL3);

  006d9	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  006e0	73 40		 jae	 SHORT $LN1132@lzma_decod@2
  006e2	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  006e5	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  006e8	75 12		 jne	 SHORT $LN1129@lzma_decod@2
  006ea	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  006ed	c7 81 a0 6e 00
	00 05 00 00 00	 mov	 DWORD PTR [ecx+28320], 5
  006f7	e9 99 4b 00 00	 jmp	 $out$32609
$LN1129@lzma_decod@2:
  006fc	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  006ff	c1 e2 08	 shl	 edx, 8
  00702	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00705	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  00708	c1 e0 08	 shl	 eax, 8
  0070b	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  0070e	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  00711	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00714	0b c2		 or	 eax, edx
  00716	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  00719	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0071c	83 c0 01	 add	 eax, 1
  0071f	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN1132@lzma_decod@2:
  00722	33 c9		 xor	 ecx, ecx
  00724	75 b3		 jne	 SHORT $LN1133@lzma_decod@2
  00726	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00729	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  0072c	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0072f	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00732	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  00736	0f af d0	 imul	 edx, eax
  00739	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  0073c	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0073f	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00742	73 3e		 jae	 SHORT $LN1123@lzma_decod@2
$LN1127@lzma_decod@2:
  00744	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  00747	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0074a	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0074d	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00750	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00754	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00759	2b c2		 sub	 eax, edx
  0075b	c1 e8 05	 shr	 eax, 5
  0075e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  00761	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00764	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  00768	03 c8		 add	 ecx, eax
  0076a	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0076d	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00770	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  00774	33 c9		 xor	 ecx, ecx
  00776	75 cc		 jne	 SHORT $LN1127@lzma_decod@2
  00778	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0077b	d1 e2		 shl	 edx, 1
  0077d	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  00780	eb 43		 jmp	 SHORT $LN1135@lzma_decod@2
$LN1123@lzma_decod@2:
  00782	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  00785	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  00788	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  0078b	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0078e	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00791	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  00794	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00797	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0079a	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  0079e	c1 f9 05	 sar	 ecx, 5
  007a1	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  007a4	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  007a7	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  007ab	2b d1		 sub	 edx, ecx
  007ad	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  007b0	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  007b3	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  007b7	33 d2		 xor	 edx, edx
  007b9	75 c7		 jne	 SHORT $LN1123@lzma_decod@2
  007bb	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  007be	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  007c2	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN1135@lzma_decod@2:
  007c5	33 d2		 xor	 edx, edx
  007c7	0f 85 0c ff ff
	ff		 jne	 $LN1133@lzma_decod@2
$LN1116@lzma_decod@2:

; 392  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL4);

  007cd	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  007d4	73 40		 jae	 SHORT $LN1115@lzma_decod@2
  007d6	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  007d9	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  007dc	75 12		 jne	 SHORT $LN1112@lzma_decod@2
  007de	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  007e1	c7 81 a0 6e 00
	00 06 00 00 00	 mov	 DWORD PTR [ecx+28320], 6
  007eb	e9 a5 4a 00 00	 jmp	 $out$32609
$LN1112@lzma_decod@2:
  007f0	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  007f3	c1 e2 08	 shl	 edx, 8
  007f6	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  007f9	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  007fc	c1 e0 08	 shl	 eax, 8
  007ff	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00802	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  00805	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00808	0b c2		 or	 eax, edx
  0080a	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0080d	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  00810	83 c0 01	 add	 eax, 1
  00813	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN1115@lzma_decod@2:
  00816	33 c9		 xor	 ecx, ecx
  00818	75 b3		 jne	 SHORT $LN1116@lzma_decod@2
  0081a	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0081d	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  00820	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00823	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00826	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0082a	0f af d0	 imul	 edx, eax
  0082d	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  00830	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00833	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00836	73 3e		 jae	 SHORT $LN1106@lzma_decod@2
$LN1110@lzma_decod@2:
  00838	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  0083b	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0083e	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00841	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00844	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00848	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0084d	2b c2		 sub	 eax, edx
  0084f	c1 e8 05	 shr	 eax, 5
  00852	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  00855	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00858	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  0085c	03 c8		 add	 ecx, eax
  0085e	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00861	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00864	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  00868	33 c9		 xor	 ecx, ecx
  0086a	75 cc		 jne	 SHORT $LN1110@lzma_decod@2
  0086c	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0086f	d1 e2		 shl	 edx, 1
  00871	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  00874	eb 43		 jmp	 SHORT $LN1118@lzma_decod@2
$LN1106@lzma_decod@2:
  00876	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  00879	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  0087c	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  0087f	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00882	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00885	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  00888	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0088b	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0088e	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00892	c1 f9 05	 sar	 ecx, 5
  00895	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00898	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0089b	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  0089f	2b d1		 sub	 edx, ecx
  008a1	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  008a4	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  008a7	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  008ab	33 d2		 xor	 edx, edx
  008ad	75 c7		 jne	 SHORT $LN1106@lzma_decod@2
  008af	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  008b2	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  008b6	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN1118@lzma_decod@2:
  008b9	33 d2		 xor	 edx, edx
  008bb	0f 85 0c ff ff
	ff		 jne	 $LN1116@lzma_decod@2
$LN1099@lzma_decod@2:

; 393  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL5);

  008c1	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  008c8	73 40		 jae	 SHORT $LN1098@lzma_decod@2
  008ca	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  008cd	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  008d0	75 12		 jne	 SHORT $LN1095@lzma_decod@2
  008d2	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  008d5	c7 81 a0 6e 00
	00 07 00 00 00	 mov	 DWORD PTR [ecx+28320], 7
  008df	e9 b1 49 00 00	 jmp	 $out$32609
$LN1095@lzma_decod@2:
  008e4	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  008e7	c1 e2 08	 shl	 edx, 8
  008ea	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  008ed	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  008f0	c1 e0 08	 shl	 eax, 8
  008f3	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  008f6	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  008f9	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  008fc	0b c2		 or	 eax, edx
  008fe	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  00901	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  00904	83 c0 01	 add	 eax, 1
  00907	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN1098@lzma_decod@2:
  0090a	33 c9		 xor	 ecx, ecx
  0090c	75 b3		 jne	 SHORT $LN1099@lzma_decod@2
  0090e	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00911	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  00914	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00917	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  0091a	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0091e	0f af d0	 imul	 edx, eax
  00921	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  00924	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00927	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0092a	73 3e		 jae	 SHORT $LN1089@lzma_decod@2
$LN1093@lzma_decod@2:
  0092c	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  0092f	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00932	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00935	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00938	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  0093c	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00941	2b c2		 sub	 eax, edx
  00943	c1 e8 05	 shr	 eax, 5
  00946	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  00949	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  0094c	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  00950	03 c8		 add	 ecx, eax
  00952	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00955	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00958	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  0095c	33 c9		 xor	 ecx, ecx
  0095e	75 cc		 jne	 SHORT $LN1093@lzma_decod@2
  00960	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00963	d1 e2		 shl	 edx, 1
  00965	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  00968	eb 43		 jmp	 SHORT $LN1101@lzma_decod@2
$LN1089@lzma_decod@2:
  0096a	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  0096d	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  00970	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  00973	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00976	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00979	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  0097c	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0097f	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00982	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00986	c1 f9 05	 sar	 ecx, 5
  00989	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0098c	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0098f	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  00993	2b d1		 sub	 edx, ecx
  00995	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00998	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  0099b	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0099f	33 d2		 xor	 edx, edx
  009a1	75 c7		 jne	 SHORT $LN1089@lzma_decod@2
  009a3	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  009a6	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  009aa	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN1101@lzma_decod@2:
  009ad	33 d2		 xor	 edx, edx
  009af	0f 85 0c ff ff
	ff		 jne	 $LN1099@lzma_decod@2
$LN1082@lzma_decod@2:

; 394  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL6);

  009b5	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  009bc	73 40		 jae	 SHORT $LN1081@lzma_decod@2
  009be	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  009c1	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  009c4	75 12		 jne	 SHORT $LN1078@lzma_decod@2
  009c6	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  009c9	c7 81 a0 6e 00
	00 08 00 00 00	 mov	 DWORD PTR [ecx+28320], 8
  009d3	e9 bd 48 00 00	 jmp	 $out$32609
$LN1078@lzma_decod@2:
  009d8	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  009db	c1 e2 08	 shl	 edx, 8
  009de	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  009e1	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  009e4	c1 e0 08	 shl	 eax, 8
  009e7	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  009ea	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  009ed	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  009f0	0b c2		 or	 eax, edx
  009f2	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  009f5	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  009f8	83 c0 01	 add	 eax, 1
  009fb	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN1081@lzma_decod@2:
  009fe	33 c9		 xor	 ecx, ecx
  00a00	75 b3		 jne	 SHORT $LN1082@lzma_decod@2
  00a02	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00a05	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  00a08	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00a0b	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00a0e	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  00a12	0f af d0	 imul	 edx, eax
  00a15	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  00a18	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00a1b	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00a1e	73 3e		 jae	 SHORT $LN1072@lzma_decod@2
$LN1076@lzma_decod@2:
  00a20	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  00a23	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00a26	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00a29	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00a2c	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00a30	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00a35	2b c2		 sub	 eax, edx
  00a37	c1 e8 05	 shr	 eax, 5
  00a3a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  00a3d	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00a40	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  00a44	03 c8		 add	 ecx, eax
  00a46	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00a49	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00a4c	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  00a50	33 c9		 xor	 ecx, ecx
  00a52	75 cc		 jne	 SHORT $LN1076@lzma_decod@2
  00a54	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00a57	d1 e2		 shl	 edx, 1
  00a59	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  00a5c	eb 43		 jmp	 SHORT $LN1084@lzma_decod@2
$LN1072@lzma_decod@2:
  00a5e	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  00a61	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  00a64	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  00a67	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00a6a	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00a6d	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  00a70	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00a73	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00a76	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00a7a	c1 f9 05	 sar	 ecx, 5
  00a7d	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00a80	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00a83	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  00a87	2b d1		 sub	 edx, ecx
  00a89	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00a8c	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00a8f	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00a93	33 d2		 xor	 edx, edx
  00a95	75 c7		 jne	 SHORT $LN1072@lzma_decod@2
  00a97	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00a9a	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  00a9e	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN1084@lzma_decod@2:
  00aa1	33 d2		 xor	 edx, edx
  00aa3	0f 85 0c ff ff
	ff		 jne	 $LN1082@lzma_decod@2
$LN1065@lzma_decod@2:

; 395  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL7);

  00aa9	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  00ab0	73 40		 jae	 SHORT $LN1064@lzma_decod@2
  00ab2	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  00ab5	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  00ab8	75 12		 jne	 SHORT $LN1061@lzma_decod@2
  00aba	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  00abd	c7 81 a0 6e 00
	00 09 00 00 00	 mov	 DWORD PTR [ecx+28320], 9
  00ac7	e9 c9 47 00 00	 jmp	 $out$32609
$LN1061@lzma_decod@2:
  00acc	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00acf	c1 e2 08	 shl	 edx, 8
  00ad2	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00ad5	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  00ad8	c1 e0 08	 shl	 eax, 8
  00adb	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00ade	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  00ae1	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00ae4	0b c2		 or	 eax, edx
  00ae6	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  00ae9	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  00aec	83 c0 01	 add	 eax, 1
  00aef	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN1064@lzma_decod@2:
  00af2	33 c9		 xor	 ecx, ecx
  00af4	75 b3		 jne	 SHORT $LN1065@lzma_decod@2
  00af6	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00af9	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  00afc	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00aff	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00b02	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  00b06	0f af d0	 imul	 edx, eax
  00b09	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  00b0c	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00b0f	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00b12	73 3e		 jae	 SHORT $LN1055@lzma_decod@2
$LN1059@lzma_decod@2:
  00b14	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  00b17	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00b1a	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00b1d	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00b20	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00b24	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00b29	2b c2		 sub	 eax, edx
  00b2b	c1 e8 05	 shr	 eax, 5
  00b2e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  00b31	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00b34	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  00b38	03 c8		 add	 ecx, eax
  00b3a	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00b3d	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00b40	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  00b44	33 c9		 xor	 ecx, ecx
  00b46	75 cc		 jne	 SHORT $LN1059@lzma_decod@2
  00b48	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00b4b	d1 e2		 shl	 edx, 1
  00b4d	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  00b50	eb 43		 jmp	 SHORT $LN1067@lzma_decod@2
$LN1055@lzma_decod@2:
  00b52	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  00b55	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  00b58	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  00b5b	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00b5e	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00b61	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  00b64	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00b67	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00b6a	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00b6e	c1 f9 05	 sar	 ecx, 5
  00b71	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00b74	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00b77	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  00b7b	2b d1		 sub	 edx, ecx
  00b7d	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00b80	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00b83	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00b87	33 d2		 xor	 edx, edx
  00b89	75 c7		 jne	 SHORT $LN1055@lzma_decod@2
  00b8b	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00b8e	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  00b92	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN1067@lzma_decod@2:
  00b95	33 d2		 xor	 edx, edx
  00b97	0f 85 0c ff ff
	ff		 jne	 $LN1065@lzma_decod@2

; 396  : #endif
; 397  : 			} else {

  00b9d	e9 6c 09 00 00	 jmp	 $LN1052@lzma_decod@2
$LN1189@lzma_decod@2:

; 398  : 				// Decode literal with match byte.
; 399  : 				//
; 400  : 				// We store the byte we compare against
; 401  : 				// ("match byte") to "len" to minimize the
; 402  : 				// number of variables we need to store
; 403  : 				// between decoder calls.
; 404  : 				len = dict_get(&dict, rep0) << 1;

  00ba2	8b 45 e4	 mov	 eax, DWORD PTR _rep0$32578[ebp]
  00ba5	3b 45 d0	 cmp	 eax, DWORD PTR _dict$32572[ebp+4]
  00ba8	73 0c		 jae	 SHORT $LN1225@lzma_decod@2
  00baa	c7 85 38 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv4090[ebp], 0
  00bb4	eb 09		 jmp	 SHORT $LN1226@lzma_decod@2
$LN1225@lzma_decod@2:
  00bb6	8b 4d dc	 mov	 ecx, DWORD PTR _dict$32572[ebp+16]
  00bb9	89 8d 38 ff ff
	ff		 mov	 DWORD PTR tv4090[ebp], ecx
$LN1226@lzma_decod@2:
  00bbf	8b 55 d0	 mov	 edx, DWORD PTR _dict$32572[ebp+4]
  00bc2	2b 55 e4	 sub	 edx, DWORD PTR _rep0$32578[ebp]
  00bc5	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR tv4090[ebp]
  00bcb	8d 4c 02 ff	 lea	 ecx, DWORD PTR [edx+eax-1]
  00bcf	8b 55 cc	 mov	 edx, DWORD PTR _dict$32572[ebp]
  00bd2	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  00bd5	88 85 6e ff ff
	ff		 mov	 BYTE PTR $T35987[ebp], al
  00bdb	0f b6 8d 6e ff
	ff ff		 movzx	 ecx, BYTE PTR $T35987[ebp]
  00be2	d1 e1		 shl	 ecx, 1
  00be4	89 4d a8	 mov	 DWORD PTR _len$32587[ebp], ecx

; 405  : 
; 406  : 				// The usage of "offset" allows omitting some
; 407  : 				// branches, which should give tiny speed
; 408  : 				// improvement on some CPUs. "offset" gets
; 409  : 				// set to zero if match_bit didn't match.
; 410  : 				offset = 0x100;

  00be7	c7 45 a4 00 01
	00 00		 mov	 DWORD PTR _offset$32586[ebp], 256 ; 00000100H
$LN1051@lzma_decod@2:

; 411  : 
; 412  : #ifdef HAVE_SMALL
; 413  : 	case SEQ_LITERAL_MATCHED:
; 414  : 				do {
; 415  : 					const uint32_t match_bit
; 416  : 							= len & offset;
; 417  : 					const uint32_t subcoder_index
; 418  : 							= offset + match_bit
; 419  : 							+ symbol;
; 420  : 
; 421  : 					rc_bit(probs[subcoder_index],
; 422  : 							offset &= ~match_bit,
; 423  : 							offset &= match_bit,
; 424  : 							SEQ_LITERAL_MATCHED);
; 425  : 
; 426  : 					// It seems to be faster to do this
; 427  : 					// here instead of putting it to the
; 428  : 					// beginning of the loop and then
; 429  : 					// putting the "case" in the middle
; 430  : 					// of the loop.
; 431  : 					len <<= 1;
; 432  : 
; 433  : 				} while (symbol < (1 << 8));
; 434  : #else
; 435  :               { // Unroll the loop.
; 436  : 				uint32_t match_bit;
; 437  : 				uint32_t subcoder_index;
; 438  : 
; 439  : #	define d(seq) \
; 440  : 		case seq: \
; 441  : 			match_bit = len & offset; \
; 442  : 			subcoder_index = offset + match_bit + symbol; \
; 443  : 			rc_bit(probs[subcoder_index], \
; 444  : 					offset &= ~match_bit, \
; 445  : 					offset &= match_bit, \
; 446  : 					seq)
; 447  : 
; 448  : 				d(SEQ_LITERAL_MATCHED0);

  00bee	8b 55 a8	 mov	 edx, DWORD PTR _len$32587[ebp]
  00bf1	23 55 a4	 and	 edx, DWORD PTR _offset$32586[ebp]
  00bf4	89 55 80	 mov	 DWORD PTR _match_bit$32752[ebp], edx
  00bf7	8b 45 a4	 mov	 eax, DWORD PTR _offset$32586[ebp]
  00bfa	03 45 80	 add	 eax, DWORD PTR _match_bit$32752[ebp]
  00bfd	03 45 b0	 add	 eax, DWORD PTR _symbol$32584[ebp]
  00c00	89 45 84	 mov	 DWORD PTR _subcoder_index$32753[ebp], eax
$LN1047@lzma_decod@2:
  00c03	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  00c0a	73 40		 jae	 SHORT $LN1046@lzma_decod@2
  00c0c	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  00c0f	3b 4d 18	 cmp	 ecx, DWORD PTR _in_size$[ebp]
  00c12	75 12		 jne	 SHORT $LN1043@lzma_decod@2
  00c14	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  00c17	c7 82 a0 6e 00
	00 0a 00 00 00	 mov	 DWORD PTR [edx+28320], 10 ; 0000000aH
  00c21	e9 6f 46 00 00	 jmp	 $out$32609
$LN1043@lzma_decod@2:
  00c26	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  00c29	c1 e0 08	 shl	 eax, 8
  00c2c	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  00c2f	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00c32	c1 e1 08	 shl	 ecx, 8
  00c35	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00c38	03 55 c8	 add	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  00c3b	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00c3e	0b c8		 or	 ecx, eax
  00c40	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  00c43	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  00c46	83 c1 01	 add	 ecx, 1
  00c49	89 4d c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], ecx
$LN1046@lzma_decod@2:
  00c4c	33 d2		 xor	 edx, edx
  00c4e	75 b3		 jne	 SHORT $LN1047@lzma_decod@2
  00c50	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  00c53	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00c56	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  00c59	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00c5c	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  00c60	0f af c1	 imul	 eax, ecx
  00c63	89 45 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], eax
  00c66	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  00c69	3b 55 c0	 cmp	 edx, DWORD PTR _rc_bound$32576[ebp]
  00c6c	73 49		 jae	 SHORT $LN1037@lzma_decod@2
$LN1041@lzma_decod@2:
  00c6e	8b 45 c0	 mov	 eax, DWORD PTR _rc_bound$32576[ebp]
  00c71	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  00c74	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  00c77	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00c7a	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00c7e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00c83	2b c8		 sub	 ecx, eax
  00c85	c1 e9 05	 shr	 ecx, 5
  00c88	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  00c8b	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00c8e	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  00c92	03 d1		 add	 edx, ecx
  00c94	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  00c97	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00c9a	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00c9e	33 d2		 xor	 edx, edx
  00ca0	75 cc		 jne	 SHORT $LN1041@lzma_decod@2
  00ca2	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00ca5	d1 e0		 shl	 eax, 1
  00ca7	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  00caa	8b 4d 80	 mov	 ecx, DWORD PTR _match_bit$32752[ebp]
  00cad	f7 d1		 not	 ecx
  00caf	23 4d a4	 and	 ecx, DWORD PTR _offset$32586[ebp]
  00cb2	89 4d a4	 mov	 DWORD PTR _offset$32586[ebp], ecx
  00cb5	eb 4c		 jmp	 SHORT $LN1049@lzma_decod@2
$LN1037@lzma_decod@2:
  00cb7	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00cba	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  00cbd	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00cc0	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  00cc3	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  00cc6	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  00cc9	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  00ccc	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00ccf	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00cd3	c1 f8 05	 sar	 eax, 5
  00cd6	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  00cd9	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00cdc	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  00ce0	2b c8		 sub	 ecx, eax
  00ce2	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  00ce5	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00ce8	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  00cec	33 c9		 xor	 ecx, ecx
  00cee	75 c7		 jne	 SHORT $LN1037@lzma_decod@2
  00cf0	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00cf3	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  00cf7	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  00cfa	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  00cfd	23 4d 80	 and	 ecx, DWORD PTR _match_bit$32752[ebp]
  00d00	89 4d a4	 mov	 DWORD PTR _offset$32586[ebp], ecx
$LN1049@lzma_decod@2:
  00d03	33 d2		 xor	 edx, edx
  00d05	0f 85 f8 fe ff
	ff		 jne	 $LN1047@lzma_decod@2

; 449  : 				len <<= 1;

  00d0b	8b 45 a8	 mov	 eax, DWORD PTR _len$32587[ebp]
  00d0e	d1 e0		 shl	 eax, 1
  00d10	89 45 a8	 mov	 DWORD PTR _len$32587[ebp], eax
$LN1034@lzma_decod@2:

; 450  : 				d(SEQ_LITERAL_MATCHED1);

  00d13	8b 4d a8	 mov	 ecx, DWORD PTR _len$32587[ebp]
  00d16	23 4d a4	 and	 ecx, DWORD PTR _offset$32586[ebp]
  00d19	89 4d 80	 mov	 DWORD PTR _match_bit$32752[ebp], ecx
  00d1c	8b 55 a4	 mov	 edx, DWORD PTR _offset$32586[ebp]
  00d1f	03 55 80	 add	 edx, DWORD PTR _match_bit$32752[ebp]
  00d22	03 55 b0	 add	 edx, DWORD PTR _symbol$32584[ebp]
  00d25	89 55 84	 mov	 DWORD PTR _subcoder_index$32753[ebp], edx
$LN1030@lzma_decod@2:
  00d28	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  00d2f	73 40		 jae	 SHORT $LN1029@lzma_decod@2
  00d31	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  00d34	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  00d37	75 12		 jne	 SHORT $LN1026@lzma_decod@2
  00d39	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  00d3c	c7 81 a0 6e 00
	00 0b 00 00 00	 mov	 DWORD PTR [ecx+28320], 11 ; 0000000bH
  00d46	e9 4a 45 00 00	 jmp	 $out$32609
$LN1026@lzma_decod@2:
  00d4b	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00d4e	c1 e2 08	 shl	 edx, 8
  00d51	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00d54	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  00d57	c1 e0 08	 shl	 eax, 8
  00d5a	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  00d5d	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  00d60	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  00d63	0b c2		 or	 eax, edx
  00d65	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  00d68	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  00d6b	83 c0 01	 add	 eax, 1
  00d6e	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN1029@lzma_decod@2:
  00d71	33 c9		 xor	 ecx, ecx
  00d73	75 b3		 jne	 SHORT $LN1030@lzma_decod@2
  00d75	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  00d78	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  00d7b	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  00d7e	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00d81	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  00d85	0f af d0	 imul	 edx, eax
  00d88	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  00d8b	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00d8e	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00d91	73 49		 jae	 SHORT $LN1020@lzma_decod@2
$LN1024@lzma_decod@2:
  00d93	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  00d96	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  00d99	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  00d9c	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00d9f	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00da3	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  00da8	2b c2		 sub	 eax, edx
  00daa	c1 e8 05	 shr	 eax, 5
  00dad	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  00db0	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00db3	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  00db7	03 c8		 add	 ecx, eax
  00db9	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  00dbc	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00dbf	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  00dc3	33 c9		 xor	 ecx, ecx
  00dc5	75 cc		 jne	 SHORT $LN1024@lzma_decod@2
  00dc7	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  00dca	d1 e2		 shl	 edx, 1
  00dcc	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  00dcf	8b 45 80	 mov	 eax, DWORD PTR _match_bit$32752[ebp]
  00dd2	f7 d0		 not	 eax
  00dd4	23 45 a4	 and	 eax, DWORD PTR _offset$32586[ebp]
  00dd7	89 45 a4	 mov	 DWORD PTR _offset$32586[ebp], eax
  00dda	eb 4c		 jmp	 SHORT $LN1032@lzma_decod@2
$LN1020@lzma_decod@2:
  00ddc	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  00ddf	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00de2	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  00de5	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  00de8	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  00deb	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  00dee	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  00df1	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00df4	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  00df8	c1 fa 05	 sar	 edx, 5
  00dfb	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  00dfe	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00e01	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  00e05	2b c2		 sub	 eax, edx
  00e07	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  00e0a	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00e0d	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00e11	33 c0		 xor	 eax, eax
  00e13	75 c7		 jne	 SHORT $LN1020@lzma_decod@2
  00e15	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  00e18	8d 54 09 01	 lea	 edx, DWORD PTR [ecx+ecx+1]
  00e1c	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  00e1f	8b 45 a4	 mov	 eax, DWORD PTR _offset$32586[ebp]
  00e22	23 45 80	 and	 eax, DWORD PTR _match_bit$32752[ebp]
  00e25	89 45 a4	 mov	 DWORD PTR _offset$32586[ebp], eax
$LN1032@lzma_decod@2:
  00e28	33 c9		 xor	 ecx, ecx
  00e2a	0f 85 f8 fe ff
	ff		 jne	 $LN1030@lzma_decod@2

; 451  : 				len <<= 1;

  00e30	8b 55 a8	 mov	 edx, DWORD PTR _len$32587[ebp]
  00e33	d1 e2		 shl	 edx, 1
  00e35	89 55 a8	 mov	 DWORD PTR _len$32587[ebp], edx
$LN1017@lzma_decod@2:

; 452  : 				d(SEQ_LITERAL_MATCHED2);

  00e38	8b 45 a8	 mov	 eax, DWORD PTR _len$32587[ebp]
  00e3b	23 45 a4	 and	 eax, DWORD PTR _offset$32586[ebp]
  00e3e	89 45 80	 mov	 DWORD PTR _match_bit$32752[ebp], eax
  00e41	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  00e44	03 4d 80	 add	 ecx, DWORD PTR _match_bit$32752[ebp]
  00e47	03 4d b0	 add	 ecx, DWORD PTR _symbol$32584[ebp]
  00e4a	89 4d 84	 mov	 DWORD PTR _subcoder_index$32753[ebp], ecx
$LN1013@lzma_decod@2:
  00e4d	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  00e54	73 40		 jae	 SHORT $LN1012@lzma_decod@2
  00e56	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  00e59	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  00e5c	75 12		 jne	 SHORT $LN1009@lzma_decod@2
  00e5e	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  00e61	c7 80 a0 6e 00
	00 0c 00 00 00	 mov	 DWORD PTR [eax+28320], 12 ; 0000000cH
  00e6b	e9 25 44 00 00	 jmp	 $out$32609
$LN1009@lzma_decod@2:
  00e70	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  00e73	c1 e1 08	 shl	 ecx, 8
  00e76	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  00e79	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  00e7c	c1 e2 08	 shl	 edx, 8
  00e7f	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  00e82	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  00e85	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  00e88	0b d1		 or	 edx, ecx
  00e8a	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  00e8d	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  00e90	83 c2 01	 add	 edx, 1
  00e93	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN1012@lzma_decod@2:
  00e96	33 c0		 xor	 eax, eax
  00e98	75 b3		 jne	 SHORT $LN1013@lzma_decod@2
  00e9a	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  00e9d	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  00ea0	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  00ea3	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00ea6	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  00eaa	0f af ca	 imul	 ecx, edx
  00ead	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  00eb0	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  00eb3	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  00eb6	73 49		 jae	 SHORT $LN1003@lzma_decod@2
$LN1007@lzma_decod@2:
  00eb8	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00ebb	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  00ebe	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  00ec1	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00ec4	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00ec8	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  00ecd	2b d1		 sub	 edx, ecx
  00ecf	c1 ea 05	 shr	 edx, 5
  00ed2	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  00ed5	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00ed8	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  00edc	03 c2		 add	 eax, edx
  00ede	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  00ee1	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00ee4	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  00ee8	33 c0		 xor	 eax, eax
  00eea	75 cc		 jne	 SHORT $LN1007@lzma_decod@2
  00eec	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  00eef	d1 e1		 shl	 ecx, 1
  00ef1	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  00ef4	8b 55 80	 mov	 edx, DWORD PTR _match_bit$32752[ebp]
  00ef7	f7 d2		 not	 edx
  00ef9	23 55 a4	 and	 edx, DWORD PTR _offset$32586[ebp]
  00efc	89 55 a4	 mov	 DWORD PTR _offset$32586[ebp], edx
  00eff	eb 4c		 jmp	 SHORT $LN1015@lzma_decod@2
$LN1003@lzma_decod@2:
  00f01	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  00f04	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  00f07	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  00f0a	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00f0d	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  00f10	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  00f13	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  00f16	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00f19	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  00f1d	c1 f9 05	 sar	 ecx, 5
  00f20	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  00f23	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00f26	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  00f2a	2b d1		 sub	 edx, ecx
  00f2c	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  00f2f	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  00f32	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  00f36	33 d2		 xor	 edx, edx
  00f38	75 c7		 jne	 SHORT $LN1003@lzma_decod@2
  00f3a	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  00f3d	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  00f41	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  00f44	8b 55 a4	 mov	 edx, DWORD PTR _offset$32586[ebp]
  00f47	23 55 80	 and	 edx, DWORD PTR _match_bit$32752[ebp]
  00f4a	89 55 a4	 mov	 DWORD PTR _offset$32586[ebp], edx
$LN1015@lzma_decod@2:
  00f4d	33 c0		 xor	 eax, eax
  00f4f	0f 85 f8 fe ff
	ff		 jne	 $LN1013@lzma_decod@2

; 453  : 				len <<= 1;

  00f55	8b 4d a8	 mov	 ecx, DWORD PTR _len$32587[ebp]
  00f58	d1 e1		 shl	 ecx, 1
  00f5a	89 4d a8	 mov	 DWORD PTR _len$32587[ebp], ecx
$LN1000@lzma_decod@2:

; 454  : 				d(SEQ_LITERAL_MATCHED3);

  00f5d	8b 55 a8	 mov	 edx, DWORD PTR _len$32587[ebp]
  00f60	23 55 a4	 and	 edx, DWORD PTR _offset$32586[ebp]
  00f63	89 55 80	 mov	 DWORD PTR _match_bit$32752[ebp], edx
  00f66	8b 45 a4	 mov	 eax, DWORD PTR _offset$32586[ebp]
  00f69	03 45 80	 add	 eax, DWORD PTR _match_bit$32752[ebp]
  00f6c	03 45 b0	 add	 eax, DWORD PTR _symbol$32584[ebp]
  00f6f	89 45 84	 mov	 DWORD PTR _subcoder_index$32753[ebp], eax
$LN996@lzma_decod@2:
  00f72	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  00f79	73 40		 jae	 SHORT $LN995@lzma_decod@2
  00f7b	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  00f7e	3b 4d 18	 cmp	 ecx, DWORD PTR _in_size$[ebp]
  00f81	75 12		 jne	 SHORT $LN992@lzma_decod@2
  00f83	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  00f86	c7 82 a0 6e 00
	00 0d 00 00 00	 mov	 DWORD PTR [edx+28320], 13 ; 0000000dH
  00f90	e9 00 43 00 00	 jmp	 $out$32609
$LN992@lzma_decod@2:
  00f95	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  00f98	c1 e0 08	 shl	 eax, 8
  00f9b	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  00f9e	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  00fa1	c1 e1 08	 shl	 ecx, 8
  00fa4	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  00fa7	03 55 c8	 add	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  00faa	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  00fad	0b c8		 or	 ecx, eax
  00faf	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  00fb2	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  00fb5	83 c1 01	 add	 ecx, 1
  00fb8	89 4d c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], ecx
$LN995@lzma_decod@2:
  00fbb	33 d2		 xor	 edx, edx
  00fbd	75 b3		 jne	 SHORT $LN996@lzma_decod@2
  00fbf	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  00fc2	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  00fc5	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  00fc8	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00fcb	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  00fcf	0f af c1	 imul	 eax, ecx
  00fd2	89 45 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], eax
  00fd5	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  00fd8	3b 55 c0	 cmp	 edx, DWORD PTR _rc_bound$32576[ebp]
  00fdb	73 49		 jae	 SHORT $LN986@lzma_decod@2
$LN990@lzma_decod@2:
  00fdd	8b 45 c0	 mov	 eax, DWORD PTR _rc_bound$32576[ebp]
  00fe0	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  00fe3	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  00fe6	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  00fe9	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  00fed	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00ff2	2b c8		 sub	 ecx, eax
  00ff4	c1 e9 05	 shr	 ecx, 5
  00ff7	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  00ffa	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  00ffd	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  01001	03 d1		 add	 edx, ecx
  01003	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  01006	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  01009	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0100d	33 d2		 xor	 edx, edx
  0100f	75 cc		 jne	 SHORT $LN990@lzma_decod@2
  01011	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01014	d1 e0		 shl	 eax, 1
  01016	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  01019	8b 4d 80	 mov	 ecx, DWORD PTR _match_bit$32752[ebp]
  0101c	f7 d1		 not	 ecx
  0101e	23 4d a4	 and	 ecx, DWORD PTR _offset$32586[ebp]
  01021	89 4d a4	 mov	 DWORD PTR _offset$32586[ebp], ecx
  01024	eb 4c		 jmp	 SHORT $LN998@lzma_decod@2
$LN986@lzma_decod@2:
  01026	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  01029	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  0102c	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0102f	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  01032	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  01035	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  01038	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  0103b	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  0103e	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  01042	c1 f8 05	 sar	 eax, 5
  01045	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  01048	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  0104b	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  0104f	2b c8		 sub	 ecx, eax
  01051	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  01054	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  01057	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  0105b	33 c9		 xor	 ecx, ecx
  0105d	75 c7		 jne	 SHORT $LN986@lzma_decod@2
  0105f	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01062	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  01066	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  01069	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  0106c	23 4d 80	 and	 ecx, DWORD PTR _match_bit$32752[ebp]
  0106f	89 4d a4	 mov	 DWORD PTR _offset$32586[ebp], ecx
$LN998@lzma_decod@2:
  01072	33 d2		 xor	 edx, edx
  01074	0f 85 f8 fe ff
	ff		 jne	 $LN996@lzma_decod@2

; 455  : 				len <<= 1;

  0107a	8b 45 a8	 mov	 eax, DWORD PTR _len$32587[ebp]
  0107d	d1 e0		 shl	 eax, 1
  0107f	89 45 a8	 mov	 DWORD PTR _len$32587[ebp], eax
$LN983@lzma_decod@2:

; 456  : 				d(SEQ_LITERAL_MATCHED4);

  01082	8b 4d a8	 mov	 ecx, DWORD PTR _len$32587[ebp]
  01085	23 4d a4	 and	 ecx, DWORD PTR _offset$32586[ebp]
  01088	89 4d 80	 mov	 DWORD PTR _match_bit$32752[ebp], ecx
  0108b	8b 55 a4	 mov	 edx, DWORD PTR _offset$32586[ebp]
  0108e	03 55 80	 add	 edx, DWORD PTR _match_bit$32752[ebp]
  01091	03 55 b0	 add	 edx, DWORD PTR _symbol$32584[ebp]
  01094	89 55 84	 mov	 DWORD PTR _subcoder_index$32753[ebp], edx
$LN979@lzma_decod@2:
  01097	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0109e	73 40		 jae	 SHORT $LN978@lzma_decod@2
  010a0	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  010a3	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  010a6	75 12		 jne	 SHORT $LN975@lzma_decod@2
  010a8	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  010ab	c7 81 a0 6e 00
	00 0e 00 00 00	 mov	 DWORD PTR [ecx+28320], 14 ; 0000000eH
  010b5	e9 db 41 00 00	 jmp	 $out$32609
$LN975@lzma_decod@2:
  010ba	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  010bd	c1 e2 08	 shl	 edx, 8
  010c0	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  010c3	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  010c6	c1 e0 08	 shl	 eax, 8
  010c9	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  010cc	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  010cf	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  010d2	0b c2		 or	 eax, edx
  010d4	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  010d7	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  010da	83 c0 01	 add	 eax, 1
  010dd	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN978@lzma_decod@2:
  010e0	33 c9		 xor	 ecx, ecx
  010e2	75 b3		 jne	 SHORT $LN979@lzma_decod@2
  010e4	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  010e7	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  010ea	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  010ed	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  010f0	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  010f4	0f af d0	 imul	 edx, eax
  010f7	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  010fa	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  010fd	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  01100	73 49		 jae	 SHORT $LN969@lzma_decod@2
$LN973@lzma_decod@2:
  01102	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  01105	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  01108	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  0110b	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  0110e	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  01112	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  01117	2b c2		 sub	 eax, edx
  01119	c1 e8 05	 shr	 eax, 5
  0111c	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  0111f	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  01122	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  01126	03 c8		 add	 ecx, eax
  01128	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  0112b	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0112e	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  01132	33 c9		 xor	 ecx, ecx
  01134	75 cc		 jne	 SHORT $LN973@lzma_decod@2
  01136	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01139	d1 e2		 shl	 edx, 1
  0113b	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  0113e	8b 45 80	 mov	 eax, DWORD PTR _match_bit$32752[ebp]
  01141	f7 d0		 not	 eax
  01143	23 45 a4	 and	 eax, DWORD PTR _offset$32586[ebp]
  01146	89 45 a4	 mov	 DWORD PTR _offset$32586[ebp], eax
  01149	eb 4c		 jmp	 SHORT $LN981@lzma_decod@2
$LN969@lzma_decod@2:
  0114b	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  0114e	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  01151	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  01154	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  01157	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  0115a	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  0115d	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  01160	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  01163	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  01167	c1 fa 05	 sar	 edx, 5
  0116a	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  0116d	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  01170	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  01174	2b c2		 sub	 eax, edx
  01176	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  01179	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  0117c	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  01180	33 c0		 xor	 eax, eax
  01182	75 c7		 jne	 SHORT $LN969@lzma_decod@2
  01184	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01187	8d 54 09 01	 lea	 edx, DWORD PTR [ecx+ecx+1]
  0118b	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  0118e	8b 45 a4	 mov	 eax, DWORD PTR _offset$32586[ebp]
  01191	23 45 80	 and	 eax, DWORD PTR _match_bit$32752[ebp]
  01194	89 45 a4	 mov	 DWORD PTR _offset$32586[ebp], eax
$LN981@lzma_decod@2:
  01197	33 c9		 xor	 ecx, ecx
  01199	0f 85 f8 fe ff
	ff		 jne	 $LN979@lzma_decod@2

; 457  : 				len <<= 1;

  0119f	8b 55 a8	 mov	 edx, DWORD PTR _len$32587[ebp]
  011a2	d1 e2		 shl	 edx, 1
  011a4	89 55 a8	 mov	 DWORD PTR _len$32587[ebp], edx
$LN966@lzma_decod@2:

; 458  : 				d(SEQ_LITERAL_MATCHED5);

  011a7	8b 45 a8	 mov	 eax, DWORD PTR _len$32587[ebp]
  011aa	23 45 a4	 and	 eax, DWORD PTR _offset$32586[ebp]
  011ad	89 45 80	 mov	 DWORD PTR _match_bit$32752[ebp], eax
  011b0	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  011b3	03 4d 80	 add	 ecx, DWORD PTR _match_bit$32752[ebp]
  011b6	03 4d b0	 add	 ecx, DWORD PTR _symbol$32584[ebp]
  011b9	89 4d 84	 mov	 DWORD PTR _subcoder_index$32753[ebp], ecx
$LN962@lzma_decod@2:
  011bc	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  011c3	73 40		 jae	 SHORT $LN961@lzma_decod@2
  011c5	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  011c8	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  011cb	75 12		 jne	 SHORT $LN958@lzma_decod@2
  011cd	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  011d0	c7 80 a0 6e 00
	00 0f 00 00 00	 mov	 DWORD PTR [eax+28320], 15 ; 0000000fH
  011da	e9 b6 40 00 00	 jmp	 $out$32609
$LN958@lzma_decod@2:
  011df	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  011e2	c1 e1 08	 shl	 ecx, 8
  011e5	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  011e8	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  011eb	c1 e2 08	 shl	 edx, 8
  011ee	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  011f1	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  011f4	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  011f7	0b d1		 or	 edx, ecx
  011f9	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  011fc	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  011ff	83 c2 01	 add	 edx, 1
  01202	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN961@lzma_decod@2:
  01205	33 c0		 xor	 eax, eax
  01207	75 b3		 jne	 SHORT $LN962@lzma_decod@2
  01209	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  0120c	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  0120f	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  01212	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  01215	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  01219	0f af ca	 imul	 ecx, edx
  0121c	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  0121f	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  01222	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  01225	73 49		 jae	 SHORT $LN952@lzma_decod@2
$LN956@lzma_decod@2:
  01227	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0122a	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  0122d	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  01230	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  01233	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  01237	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  0123c	2b d1		 sub	 edx, ecx
  0123e	c1 ea 05	 shr	 edx, 5
  01241	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  01244	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  01247	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  0124b	03 c2		 add	 eax, edx
  0124d	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  01250	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  01253	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  01257	33 c0		 xor	 eax, eax
  01259	75 cc		 jne	 SHORT $LN956@lzma_decod@2
  0125b	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0125e	d1 e1		 shl	 ecx, 1
  01260	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  01263	8b 55 80	 mov	 edx, DWORD PTR _match_bit$32752[ebp]
  01266	f7 d2		 not	 edx
  01268	23 55 a4	 and	 edx, DWORD PTR _offset$32586[ebp]
  0126b	89 55 a4	 mov	 DWORD PTR _offset$32586[ebp], edx
  0126e	eb 4c		 jmp	 SHORT $LN964@lzma_decod@2
$LN952@lzma_decod@2:
  01270	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  01273	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  01276	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  01279	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0127c	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0127f	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  01282	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  01285	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  01288	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  0128c	c1 f9 05	 sar	 ecx, 5
  0128f	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  01292	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  01295	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  01299	2b d1		 sub	 edx, ecx
  0129b	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  0129e	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  012a1	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  012a5	33 d2		 xor	 edx, edx
  012a7	75 c7		 jne	 SHORT $LN952@lzma_decod@2
  012a9	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  012ac	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  012b0	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  012b3	8b 55 a4	 mov	 edx, DWORD PTR _offset$32586[ebp]
  012b6	23 55 80	 and	 edx, DWORD PTR _match_bit$32752[ebp]
  012b9	89 55 a4	 mov	 DWORD PTR _offset$32586[ebp], edx
$LN964@lzma_decod@2:
  012bc	33 c0		 xor	 eax, eax
  012be	0f 85 f8 fe ff
	ff		 jne	 $LN962@lzma_decod@2

; 459  : 				len <<= 1;

  012c4	8b 4d a8	 mov	 ecx, DWORD PTR _len$32587[ebp]
  012c7	d1 e1		 shl	 ecx, 1
  012c9	89 4d a8	 mov	 DWORD PTR _len$32587[ebp], ecx
$LN949@lzma_decod@2:

; 460  : 				d(SEQ_LITERAL_MATCHED6);

  012cc	8b 55 a8	 mov	 edx, DWORD PTR _len$32587[ebp]
  012cf	23 55 a4	 and	 edx, DWORD PTR _offset$32586[ebp]
  012d2	89 55 80	 mov	 DWORD PTR _match_bit$32752[ebp], edx
  012d5	8b 45 a4	 mov	 eax, DWORD PTR _offset$32586[ebp]
  012d8	03 45 80	 add	 eax, DWORD PTR _match_bit$32752[ebp]
  012db	03 45 b0	 add	 eax, DWORD PTR _symbol$32584[ebp]
  012de	89 45 84	 mov	 DWORD PTR _subcoder_index$32753[ebp], eax
$LN945@lzma_decod@2:
  012e1	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  012e8	73 40		 jae	 SHORT $LN944@lzma_decod@2
  012ea	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  012ed	3b 4d 18	 cmp	 ecx, DWORD PTR _in_size$[ebp]
  012f0	75 12		 jne	 SHORT $LN941@lzma_decod@2
  012f2	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  012f5	c7 82 a0 6e 00
	00 10 00 00 00	 mov	 DWORD PTR [edx+28320], 16 ; 00000010H
  012ff	e9 91 3f 00 00	 jmp	 $out$32609
$LN941@lzma_decod@2:
  01304	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  01307	c1 e0 08	 shl	 eax, 8
  0130a	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  0130d	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  01310	c1 e1 08	 shl	 ecx, 8
  01313	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  01316	03 55 c8	 add	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  01319	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  0131c	0b c8		 or	 ecx, eax
  0131e	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  01321	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  01324	83 c1 01	 add	 ecx, 1
  01327	89 4d c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], ecx
$LN944@lzma_decod@2:
  0132a	33 d2		 xor	 edx, edx
  0132c	75 b3		 jne	 SHORT $LN945@lzma_decod@2
  0132e	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  01331	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  01334	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  01337	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  0133a	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  0133e	0f af c1	 imul	 eax, ecx
  01341	89 45 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], eax
  01344	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  01347	3b 55 c0	 cmp	 edx, DWORD PTR _rc_bound$32576[ebp]
  0134a	73 49		 jae	 SHORT $LN935@lzma_decod@2
$LN939@lzma_decod@2:
  0134c	8b 45 c0	 mov	 eax, DWORD PTR _rc_bound$32576[ebp]
  0134f	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  01352	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  01355	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  01358	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0135c	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  01361	2b c8		 sub	 ecx, eax
  01363	c1 e9 05	 shr	 ecx, 5
  01366	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  01369	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0136c	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  01370	03 d1		 add	 edx, ecx
  01372	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  01375	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  01378	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0137c	33 d2		 xor	 edx, edx
  0137e	75 cc		 jne	 SHORT $LN939@lzma_decod@2
  01380	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01383	d1 e0		 shl	 eax, 1
  01385	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  01388	8b 4d 80	 mov	 ecx, DWORD PTR _match_bit$32752[ebp]
  0138b	f7 d1		 not	 ecx
  0138d	23 4d a4	 and	 ecx, DWORD PTR _offset$32586[ebp]
  01390	89 4d a4	 mov	 DWORD PTR _offset$32586[ebp], ecx
  01393	eb 4c		 jmp	 SHORT $LN947@lzma_decod@2
$LN935@lzma_decod@2:
  01395	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  01398	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  0139b	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0139e	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  013a1	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  013a4	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  013a7	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  013aa	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  013ad	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  013b1	c1 f8 05	 sar	 eax, 5
  013b4	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  013b7	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  013ba	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  013be	2b c8		 sub	 ecx, eax
  013c0	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  013c3	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  013c6	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  013ca	33 c9		 xor	 ecx, ecx
  013cc	75 c7		 jne	 SHORT $LN935@lzma_decod@2
  013ce	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  013d1	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  013d5	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  013d8	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  013db	23 4d 80	 and	 ecx, DWORD PTR _match_bit$32752[ebp]
  013de	89 4d a4	 mov	 DWORD PTR _offset$32586[ebp], ecx
$LN947@lzma_decod@2:
  013e1	33 d2		 xor	 edx, edx
  013e3	0f 85 f8 fe ff
	ff		 jne	 $LN945@lzma_decod@2

; 461  : 				len <<= 1;

  013e9	8b 45 a8	 mov	 eax, DWORD PTR _len$32587[ebp]
  013ec	d1 e0		 shl	 eax, 1
  013ee	89 45 a8	 mov	 DWORD PTR _len$32587[ebp], eax
$LN932@lzma_decod@2:

; 462  : 				d(SEQ_LITERAL_MATCHED7);

  013f1	8b 4d a8	 mov	 ecx, DWORD PTR _len$32587[ebp]
  013f4	23 4d a4	 and	 ecx, DWORD PTR _offset$32586[ebp]
  013f7	89 4d 80	 mov	 DWORD PTR _match_bit$32752[ebp], ecx
  013fa	8b 55 a4	 mov	 edx, DWORD PTR _offset$32586[ebp]
  013fd	03 55 80	 add	 edx, DWORD PTR _match_bit$32752[ebp]
  01400	03 55 b0	 add	 edx, DWORD PTR _symbol$32584[ebp]
  01403	89 55 84	 mov	 DWORD PTR _subcoder_index$32753[ebp], edx
$LN928@lzma_decod@2:
  01406	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0140d	73 40		 jae	 SHORT $LN927@lzma_decod@2
  0140f	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  01412	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  01415	75 12		 jne	 SHORT $LN924@lzma_decod@2
  01417	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0141a	c7 81 a0 6e 00
	00 11 00 00 00	 mov	 DWORD PTR [ecx+28320], 17 ; 00000011H
  01424	e9 6c 3e 00 00	 jmp	 $out$32609
$LN924@lzma_decod@2:
  01429	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0142c	c1 e2 08	 shl	 edx, 8
  0142f	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  01432	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  01435	c1 e0 08	 shl	 eax, 8
  01438	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  0143b	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  0143e	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  01441	0b c2		 or	 eax, edx
  01443	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  01446	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  01449	83 c0 01	 add	 eax, 1
  0144c	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN927@lzma_decod@2:
  0144f	33 c9		 xor	 ecx, ecx
  01451	75 b3		 jne	 SHORT $LN928@lzma_decod@2
  01453	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  01456	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  01459	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  0145c	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  0145f	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  01463	0f af d0	 imul	 edx, eax
  01466	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  01469	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0146c	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0146f	73 49		 jae	 SHORT $LN918@lzma_decod@2
$LN922@lzma_decod@2:
  01471	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  01474	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  01477	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  0147a	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  0147d	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  01481	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  01486	2b c2		 sub	 eax, edx
  01488	c1 e8 05	 shr	 eax, 5
  0148b	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  0148e	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  01491	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  01495	03 c8		 add	 ecx, eax
  01497	8b 55 84	 mov	 edx, DWORD PTR _subcoder_index$32753[ebp]
  0149a	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0149d	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  014a1	33 c9		 xor	 ecx, ecx
  014a3	75 cc		 jne	 SHORT $LN922@lzma_decod@2
  014a5	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  014a8	d1 e2		 shl	 edx, 1
  014aa	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  014ad	8b 45 80	 mov	 eax, DWORD PTR _match_bit$32752[ebp]
  014b0	f7 d0		 not	 eax
  014b2	23 45 a4	 and	 eax, DWORD PTR _offset$32586[ebp]
  014b5	89 45 a4	 mov	 DWORD PTR _offset$32586[ebp], eax
  014b8	eb 4c		 jmp	 SHORT $LN930@lzma_decod@2
$LN918@lzma_decod@2:
  014ba	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  014bd	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  014c0	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  014c3	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  014c6	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  014c9	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  014cc	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  014cf	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  014d2	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  014d6	c1 fa 05	 sar	 edx, 5
  014d9	8b 45 84	 mov	 eax, DWORD PTR _subcoder_index$32753[ebp]
  014dc	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  014df	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  014e3	2b c2		 sub	 eax, edx
  014e5	8b 4d 84	 mov	 ecx, DWORD PTR _subcoder_index$32753[ebp]
  014e8	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  014eb	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  014ef	33 c0		 xor	 eax, eax
  014f1	75 c7		 jne	 SHORT $LN918@lzma_decod@2
  014f3	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  014f6	8d 54 09 01	 lea	 edx, DWORD PTR [ecx+ecx+1]
  014fa	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  014fd	8b 45 a4	 mov	 eax, DWORD PTR _offset$32586[ebp]
  01500	23 45 80	 and	 eax, DWORD PTR _match_bit$32752[ebp]
  01503	89 45 a4	 mov	 DWORD PTR _offset$32586[ebp], eax
$LN930@lzma_decod@2:
  01506	33 c9		 xor	 ecx, ecx
  01508	0f 85 f8 fe ff
	ff		 jne	 $LN928@lzma_decod@2
$LN1052@lzma_decod@2:

; 463  : #	undef d
; 464  :               }
; 465  : #endif
; 466  : 			}
; 467  : 
; 468  : 			//update_literal(state);
; 469  : 			// Use a lookup table to update to literal state,
; 470  : 			// since compared to other state updates, this would
; 471  : 			// need two branches.
; 472  : 		  {
; 473  : 			static const lzma_lzma_state next_state[] = {
; 474  : 				STATE_LIT_LIT,
; 475  : 				STATE_LIT_LIT,
; 476  : 				STATE_LIT_LIT,
; 477  : 				STATE_LIT_LIT,
; 478  : 				STATE_MATCH_LIT_LIT,
; 479  : 				STATE_REP_LIT_LIT,
; 480  : 				STATE_SHORTREP_LIT_LIT,
; 481  : 				STATE_MATCH_LIT,
; 482  : 				STATE_REP_LIT,
; 483  : 				STATE_SHORTREP_LIT,
; 484  : 				STATE_MATCH_LIT,
; 485  : 				STATE_REP_LIT
; 486  : 			};
; 487  : 			state = next_state[state];

  0150e	8b 55 b4	 mov	 edx, DWORD PTR _state$32577[ebp]
  01511	8b 04 95 00 00
	00 00		 mov	 eax, DWORD PTR ?next_state@?JB@??lzma_decode@@9@9[edx*4]
  01518	89 45 b4	 mov	 DWORD PTR _state$32577[ebp], eax
$LN915@lzma_decod@2:

; 488  : 		  }
; 489  : 
; 490  : 	case SEQ_LITERAL_WRITE:
; 491  : 			if (unlikely(dict_put(&dict, symbol))) {

  0151b	0f b6 4d b0	 movzx	 ecx, BYTE PTR _symbol$32584[ebp]
  0151f	51		 push	 ecx
  01520	8d 55 cc	 lea	 edx, DWORD PTR _dict$32572[ebp]
  01523	52		 push	 edx
  01524	e8 00 00 00 00	 call	 _dict_put
  01529	83 c4 08	 add	 esp, 8
  0152c	0f b6 c0	 movzx	 eax, al
  0152f	85 c0		 test	 eax, eax
  01531	74 12		 je	 SHORT $LN914@lzma_decod@2

; 492  : 				coder->sequence = SEQ_LITERAL_WRITE;

  01533	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01536	c7 81 a0 6e 00
	00 12 00 00 00	 mov	 DWORD PTR [ecx+28320], 18 ; 00000012H

; 493  : 				goto out;

  01540	e9 50 3d 00 00	 jmp	 $out$32609
$LN914@lzma_decod@2:

; 494  : 			}
; 495  : 
; 496  : 			continue;

  01545	e9 42 ed ff ff	 jmp	 $LN1202@lzma_decod@2
$LN913@lzma_decod@2:

; 497  : 		}
; 498  : 
; 499  : 		// Instead of a new byte we are going to get a byte range
; 500  : 		// (distance and length) which will be repeated from our
; 501  : 		// output history.
; 502  : 
; 503  : 		rc_update_1(coder->is_match[state][pos_state]);

  0154a	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0154d	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  01550	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  01553	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  01556	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  01559	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0155c	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  0155f	c1 e1 05	 shl	 ecx, 5
  01562	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  01565	8d 84 0a 00 60
	00 00		 lea	 eax, DWORD PTR [edx+ecx+24576]
  0156c	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  0156f	c1 e1 05	 shl	 ecx, 5
  01572	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  01575	8d 8c 0a 00 60
	00 00		 lea	 ecx, DWORD PTR [edx+ecx+24576]
  0157c	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  0157f	0f b7 0c 51	 movzx	 ecx, WORD PTR [ecx+edx*2]
  01583	c1 f9 05	 sar	 ecx, 5
  01586	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01589	0f b7 04 50	 movzx	 eax, WORD PTR [eax+edx*2]
  0158d	2b c1		 sub	 eax, ecx
  0158f	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  01592	c1 e1 05	 shl	 ecx, 5
  01595	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  01598	8d 8c 0a 00 60
	00 00		 lea	 ecx, DWORD PTR [edx+ecx+24576]
  0159f	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  015a2	66 89 04 51	 mov	 WORD PTR [ecx+edx*2], ax
  015a6	33 c0		 xor	 eax, eax
  015a8	75 a0		 jne	 SHORT $LN913@lzma_decod@2
$LN909@lzma_decod@2:

; 504  : 
; 505  : 	case SEQ_IS_REP:
; 506  : 		rc_if_0(coder->is_rep[state], SEQ_IS_REP) {

  015aa	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  015b1	73 40		 jae	 SHORT $LN908@lzma_decod@2
  015b3	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  015b6	3b 4d 18	 cmp	 ecx, DWORD PTR _in_size$[ebp]
  015b9	75 12		 jne	 SHORT $LN905@lzma_decod@2
  015bb	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  015be	c7 82 a0 6e 00
	00 13 00 00 00	 mov	 DWORD PTR [edx+28320], 19 ; 00000013H
  015c8	e9 c8 3c 00 00	 jmp	 $out$32609
$LN905@lzma_decod@2:
  015cd	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  015d0	c1 e0 08	 shl	 eax, 8
  015d3	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  015d6	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  015d9	c1 e1 08	 shl	 ecx, 8
  015dc	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  015df	03 55 c8	 add	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  015e2	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  015e5	0b c8		 or	 ecx, eax
  015e7	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  015ea	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  015ed	83 c1 01	 add	 ecx, 1
  015f0	89 4d c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], ecx
$LN908@lzma_decod@2:
  015f3	33 d2		 xor	 edx, edx
  015f5	75 b3		 jne	 SHORT $LN909@lzma_decod@2
  015f7	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  015fa	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  015fd	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  01600	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  01603	0f b7 8c 4a 80
	61 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+24960]
  0160b	0f af c1	 imul	 eax, ecx
  0160e	89 45 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], eax
  01611	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  01614	3b 55 c0	 cmp	 edx, DWORD PTR _rc_bound$32576[ebp]
  01617	0f 83 42 24 00
	00		 jae	 $LN347@lzma_decod@2
$LN903@lzma_decod@2:

; 507  : 			// Not a repeated match
; 508  : 			rc_update_0(coder->is_rep[state]);

  0161d	8b 45 c0	 mov	 eax, DWORD PTR _rc_bound$32576[ebp]
  01620	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  01623	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  01626	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  01629	0f b7 84 4a 80
	61 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+24960]
  01631	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  01636	2b c8		 sub	 ecx, eax
  01638	c1 e9 05	 shr	 ecx, 5
  0163b	8b 55 b4	 mov	 edx, DWORD PTR _state$32577[ebp]
  0163e	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01641	0f b7 94 50 80
	61 00 00	 movzx	 edx, WORD PTR [eax+edx*2+24960]
  01649	03 d1		 add	 edx, ecx
  0164b	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  0164e	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01651	66 89 94 41 80
	61 00 00	 mov	 WORD PTR [ecx+eax*2+24960], dx
  01659	33 d2		 xor	 edx, edx
  0165b	75 c0		 jne	 SHORT $LN903@lzma_decod@2

; 509  : 			update_match(state);

  0165d	83 7d b4 07	 cmp	 DWORD PTR _state$32577[ebp], 7
  01661	1b c0		 sbb	 eax, eax
  01663	83 e0 fd	 and	 eax, -3			; fffffffdH
  01666	83 c0 0a	 add	 eax, 10			; 0000000aH
  01669	89 45 b4	 mov	 DWORD PTR _state$32577[ebp], eax

; 510  : 
; 511  : 			// The latest three match distances are kept in
; 512  : 			// memory in case there are repeated matches.
; 513  : 			rep3 = rep2;

  0166c	8b 4d b8	 mov	 ecx, DWORD PTR _rep2$32580[ebp]
  0166f	89 4d c4	 mov	 DWORD PTR _rep3$32581[ebp], ecx

; 514  : 			rep2 = rep1;

  01672	8b 55 f4	 mov	 edx, DWORD PTR _rep1$32579[ebp]
  01675	89 55 b8	 mov	 DWORD PTR _rep2$32580[ebp], edx

; 515  : 			rep1 = rep0;

  01678	8b 45 e4	 mov	 eax, DWORD PTR _rep0$32578[ebp]
  0167b	89 45 f4	 mov	 DWORD PTR _rep1$32579[ebp], eax
$LN900@lzma_decod@2:

; 516  : 
; 517  : 			// Decode the length of the match.
; 518  : 			len_decode(len, coder->match_len_decoder,
; 519  : 					pos_state, SEQ_MATCH_LEN);

  0167e	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _symbol$32584[ebp], 1
$LN896@lzma_decod@2:
  01685	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0168c	73 40		 jae	 SHORT $LN895@lzma_decod@2
  0168e	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  01691	3b 4d 18	 cmp	 ecx, DWORD PTR _in_size$[ebp]
  01694	75 12		 jne	 SHORT $LN892@lzma_decod@2
  01696	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  01699	c7 82 a0 6e 00
	00 14 00 00 00	 mov	 DWORD PTR [edx+28320], 20 ; 00000014H
  016a3	e9 ed 3b 00 00	 jmp	 $out$32609
$LN892@lzma_decod@2:
  016a8	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  016ab	c1 e0 08	 shl	 eax, 8
  016ae	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  016b1	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  016b4	c1 e1 08	 shl	 ecx, 8
  016b7	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  016ba	03 55 c8	 add	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  016bd	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  016c0	0b c8		 or	 ecx, eax
  016c2	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  016c5	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  016c8	83 c1 01	 add	 ecx, 1
  016cb	89 4d c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], ecx
$LN895@lzma_decod@2:
  016ce	33 d2		 xor	 edx, edx
  016d0	75 b3		 jne	 SHORT $LN896@lzma_decod@2
  016d2	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  016d5	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  016d8	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  016db	0f b7 91 64 66
	00 00		 movzx	 edx, WORD PTR [ecx+26212]
  016e2	0f af c2	 imul	 eax, edx
  016e5	89 45 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], eax
  016e8	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  016eb	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  016ee	0f 83 2f 04 00
	00		 jae	 $LN835@lzma_decod@2
$LN890@lzma_decod@2:
  016f4	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  016f7	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  016fa	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  016fd	0f b7 82 64 66
	00 00		 movzx	 eax, WORD PTR [edx+26212]
  01704	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  01709	2b c8		 sub	 ecx, eax
  0170b	c1 e9 05	 shr	 ecx, 5
  0170e	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  01711	0f b7 82 64 66
	00 00		 movzx	 eax, WORD PTR [edx+26212]
  01718	03 c1		 add	 eax, ecx
  0171a	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0171d	66 89 81 64 66
	00 00		 mov	 WORD PTR [ecx+26212], ax
  01724	33 d2		 xor	 edx, edx
  01726	75 cc		 jne	 SHORT $LN890@lzma_decod@2
$LN883@lzma_decod@2:
  01728	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0172f	73 40		 jae	 SHORT $LN882@lzma_decod@2
  01731	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  01734	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  01737	75 12		 jne	 SHORT $LN879@lzma_decod@2
  01739	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0173c	c7 81 a0 6e 00
	00 15 00 00 00	 mov	 DWORD PTR [ecx+28320], 21 ; 00000015H
  01746	e9 4a 3b 00 00	 jmp	 $out$32609
$LN879@lzma_decod@2:
  0174b	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0174e	c1 e2 08	 shl	 edx, 8
  01751	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  01754	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  01757	c1 e0 08	 shl	 eax, 8
  0175a	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  0175d	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  01760	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  01763	0b c2		 or	 eax, edx
  01765	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  01768	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0176b	83 c0 01	 add	 eax, 1
  0176e	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN882@lzma_decod@2:
  01771	33 c9		 xor	 ecx, ecx
  01773	75 b3		 jne	 SHORT $LN883@lzma_decod@2
  01775	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  01778	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  0177b	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  0177e	c1 e0 04	 shl	 eax, 4
  01781	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01784	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  0178b	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0178e	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  01792	0f af d0	 imul	 edx, eax
  01795	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  01798	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0179b	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0179e	73 65		 jae	 SHORT $LN873@lzma_decod@2
$LN877@lzma_decod@2:
  017a0	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  017a3	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  017a6	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  017a9	c1 e0 04	 shl	 eax, 4
  017ac	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  017af	8d 94 01 68 66
	00 00		 lea	 edx, DWORD PTR [ecx+eax+26216]
  017b6	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  017b9	c1 e0 04	 shl	 eax, 4
  017bc	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  017bf	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  017c6	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  017c9	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  017cd	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  017d2	2b c8		 sub	 ecx, eax
  017d4	c1 e9 05	 shr	 ecx, 5
  017d7	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  017da	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  017de	03 d1		 add	 edx, ecx
  017e0	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  017e3	c1 e0 04	 shl	 eax, 4
  017e6	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  017e9	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  017f0	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  017f3	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  017f7	33 d2		 xor	 edx, edx
  017f9	75 a5		 jne	 SHORT $LN877@lzma_decod@2
  017fb	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  017fe	d1 e0		 shl	 eax, 1
  01800	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  01803	eb 6a		 jmp	 SHORT $LN885@lzma_decod@2
$LN873@lzma_decod@2:
  01805	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  01808	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0180b	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  0180e	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  01811	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  01814	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  01817	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  0181a	c1 e0 04	 shl	 eax, 4
  0181d	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01820	8d 94 01 68 66
	00 00		 lea	 edx, DWORD PTR [ecx+eax+26216]
  01827	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  0182a	c1 e0 04	 shl	 eax, 4
  0182d	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01830	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  01837	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0183a	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  0183e	c1 f8 05	 sar	 eax, 5
  01841	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01844	0f b7 14 4a	 movzx	 edx, WORD PTR [edx+ecx*2]
  01848	2b d0		 sub	 edx, eax
  0184a	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  0184d	c1 e0 04	 shl	 eax, 4
  01850	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01853	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  0185a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0185d	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  01861	33 d2		 xor	 edx, edx
  01863	75 a0		 jne	 SHORT $LN873@lzma_decod@2
  01865	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01868	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  0186c	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN885@lzma_decod@2:
  0186f	33 d2		 xor	 edx, edx
  01871	0f 85 b1 fe ff
	ff		 jne	 $LN883@lzma_decod@2
$LN866@lzma_decod@2:
  01877	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0187e	73 40		 jae	 SHORT $LN865@lzma_decod@2
  01880	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  01883	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  01886	75 12		 jne	 SHORT $LN862@lzma_decod@2
  01888	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0188b	c7 81 a0 6e 00
	00 16 00 00 00	 mov	 DWORD PTR [ecx+28320], 22 ; 00000016H
  01895	e9 fb 39 00 00	 jmp	 $out$32609
$LN862@lzma_decod@2:
  0189a	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0189d	c1 e2 08	 shl	 edx, 8
  018a0	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  018a3	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  018a6	c1 e0 08	 shl	 eax, 8
  018a9	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  018ac	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  018af	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  018b2	0b c2		 or	 eax, edx
  018b4	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  018b7	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  018ba	83 c0 01	 add	 eax, 1
  018bd	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN865@lzma_decod@2:
  018c0	33 c9		 xor	 ecx, ecx
  018c2	75 b3		 jne	 SHORT $LN866@lzma_decod@2
  018c4	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  018c7	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  018ca	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  018cd	c1 e0 04	 shl	 eax, 4
  018d0	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  018d3	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  018da	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  018dd	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  018e1	0f af d0	 imul	 edx, eax
  018e4	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  018e7	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  018ea	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  018ed	73 65		 jae	 SHORT $LN856@lzma_decod@2
$LN860@lzma_decod@2:
  018ef	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  018f2	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  018f5	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  018f8	c1 e0 04	 shl	 eax, 4
  018fb	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  018fe	8d 94 01 68 66
	00 00		 lea	 edx, DWORD PTR [ecx+eax+26216]
  01905	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  01908	c1 e0 04	 shl	 eax, 4
  0190b	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0190e	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  01915	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01918	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  0191c	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  01921	2b c8		 sub	 ecx, eax
  01923	c1 e9 05	 shr	 ecx, 5
  01926	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01929	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  0192d	03 d1		 add	 edx, ecx
  0192f	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  01932	c1 e0 04	 shl	 eax, 4
  01935	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01938	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  0193f	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01942	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  01946	33 d2		 xor	 edx, edx
  01948	75 a5		 jne	 SHORT $LN860@lzma_decod@2
  0194a	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0194d	d1 e0		 shl	 eax, 1
  0194f	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  01952	eb 6a		 jmp	 SHORT $LN868@lzma_decod@2
$LN856@lzma_decod@2:
  01954	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  01957	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0195a	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  0195d	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  01960	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  01963	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  01966	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  01969	c1 e0 04	 shl	 eax, 4
  0196c	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0196f	8d 94 01 68 66
	00 00		 lea	 edx, DWORD PTR [ecx+eax+26216]
  01976	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  01979	c1 e0 04	 shl	 eax, 4
  0197c	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0197f	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  01986	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01989	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  0198d	c1 f8 05	 sar	 eax, 5
  01990	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01993	0f b7 14 4a	 movzx	 edx, WORD PTR [edx+ecx*2]
  01997	2b d0		 sub	 edx, eax
  01999	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  0199c	c1 e0 04	 shl	 eax, 4
  0199f	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  019a2	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  019a9	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  019ac	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  019b0	33 d2		 xor	 edx, edx
  019b2	75 a0		 jne	 SHORT $LN856@lzma_decod@2
  019b4	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  019b7	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  019bb	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN868@lzma_decod@2:
  019be	33 d2		 xor	 edx, edx
  019c0	0f 85 b1 fe ff
	ff		 jne	 $LN866@lzma_decod@2
$LN849@lzma_decod@2:
  019c6	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  019cd	73 40		 jae	 SHORT $LN848@lzma_decod@2
  019cf	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  019d2	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  019d5	75 12		 jne	 SHORT $LN845@lzma_decod@2
  019d7	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  019da	c7 81 a0 6e 00
	00 17 00 00 00	 mov	 DWORD PTR [ecx+28320], 23 ; 00000017H
  019e4	e9 ac 38 00 00	 jmp	 $out$32609
$LN845@lzma_decod@2:
  019e9	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  019ec	c1 e2 08	 shl	 edx, 8
  019ef	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  019f2	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  019f5	c1 e0 08	 shl	 eax, 8
  019f8	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  019fb	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  019fe	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  01a01	0b c2		 or	 eax, edx
  01a03	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  01a06	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  01a09	83 c0 01	 add	 eax, 1
  01a0c	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN848@lzma_decod@2:
  01a0f	33 c9		 xor	 ecx, ecx
  01a11	75 b3		 jne	 SHORT $LN849@lzma_decod@2
  01a13	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  01a16	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  01a19	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  01a1c	c1 e0 04	 shl	 eax, 4
  01a1f	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01a22	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  01a29	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01a2c	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  01a30	0f af d0	 imul	 edx, eax
  01a33	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  01a36	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  01a39	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  01a3c	73 65		 jae	 SHORT $LN839@lzma_decod@2
$LN843@lzma_decod@2:
  01a3e	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  01a41	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  01a44	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  01a47	c1 e0 04	 shl	 eax, 4
  01a4a	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01a4d	8d 94 01 68 66
	00 00		 lea	 edx, DWORD PTR [ecx+eax+26216]
  01a54	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  01a57	c1 e0 04	 shl	 eax, 4
  01a5a	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01a5d	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  01a64	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01a67	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  01a6b	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  01a70	2b c8		 sub	 ecx, eax
  01a72	c1 e9 05	 shr	 ecx, 5
  01a75	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01a78	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  01a7c	03 d1		 add	 edx, ecx
  01a7e	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  01a81	c1 e0 04	 shl	 eax, 4
  01a84	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01a87	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  01a8e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01a91	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  01a95	33 d2		 xor	 edx, edx
  01a97	75 a5		 jne	 SHORT $LN843@lzma_decod@2
  01a99	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01a9c	d1 e0		 shl	 eax, 1
  01a9e	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  01aa1	eb 6a		 jmp	 SHORT $LN851@lzma_decod@2
$LN839@lzma_decod@2:
  01aa3	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  01aa6	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  01aa9	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  01aac	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  01aaf	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  01ab2	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  01ab5	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  01ab8	c1 e0 04	 shl	 eax, 4
  01abb	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01abe	8d 94 01 68 66
	00 00		 lea	 edx, DWORD PTR [ecx+eax+26216]
  01ac5	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  01ac8	c1 e0 04	 shl	 eax, 4
  01acb	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01ace	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  01ad5	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01ad8	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  01adc	c1 f8 05	 sar	 eax, 5
  01adf	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01ae2	0f b7 14 4a	 movzx	 edx, WORD PTR [edx+ecx*2]
  01ae6	2b d0		 sub	 edx, eax
  01ae8	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  01aeb	c1 e0 04	 shl	 eax, 4
  01aee	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01af1	8d 84 01 68 66
	00 00		 lea	 eax, DWORD PTR [ecx+eax+26216]
  01af8	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  01afb	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  01aff	33 d2		 xor	 edx, edx
  01b01	75 a0		 jne	 SHORT $LN839@lzma_decod@2
  01b03	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01b06	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  01b0a	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN851@lzma_decod@2:
  01b0d	33 d2		 xor	 edx, edx
  01b0f	0f 85 b1 fe ff
	ff		 jne	 $LN849@lzma_decod@2
  01b15	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01b18	83 e8 06	 sub	 eax, 6
  01b1b	89 45 a8	 mov	 DWORD PTR _len$32587[ebp], eax
  01b1e	e9 9c 0d 00 00	 jmp	 $LN899@lzma_decod@2
$LN835@lzma_decod@2:
  01b23	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  01b26	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  01b29	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  01b2c	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  01b2f	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  01b32	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  01b35	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01b38	0f b7 88 64 66
	00 00		 movzx	 ecx, WORD PTR [eax+26212]
  01b3f	c1 f9 05	 sar	 ecx, 5
  01b42	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  01b45	0f b7 82 64 66
	00 00		 movzx	 eax, WORD PTR [edx+26212]
  01b4c	2b c1		 sub	 eax, ecx
  01b4e	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01b51	66 89 81 64 66
	00 00		 mov	 WORD PTR [ecx+26212], ax
  01b58	33 d2		 xor	 edx, edx
  01b5a	75 c7		 jne	 SHORT $LN835@lzma_decod@2
$LN831@lzma_decod@2:
  01b5c	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  01b63	73 40		 jae	 SHORT $LN830@lzma_decod@2
  01b65	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  01b68	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  01b6b	75 12		 jne	 SHORT $LN827@lzma_decod@2
  01b6d	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01b70	c7 81 a0 6e 00
	00 18 00 00 00	 mov	 DWORD PTR [ecx+28320], 24 ; 00000018H
  01b7a	e9 16 37 00 00	 jmp	 $out$32609
$LN827@lzma_decod@2:
  01b7f	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  01b82	c1 e2 08	 shl	 edx, 8
  01b85	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  01b88	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  01b8b	c1 e0 08	 shl	 eax, 8
  01b8e	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  01b91	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  01b94	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  01b97	0b c2		 or	 eax, edx
  01b99	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  01b9c	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  01b9f	83 c0 01	 add	 eax, 1
  01ba2	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN830@lzma_decod@2:
  01ba5	33 c9		 xor	 ecx, ecx
  01ba7	75 b3		 jne	 SHORT $LN831@lzma_decod@2
  01ba9	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  01bac	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  01baf	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01bb2	0f b7 88 66 66
	00 00		 movzx	 ecx, WORD PTR [eax+26214]
  01bb9	0f af d1	 imul	 edx, ecx
  01bbc	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  01bbf	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  01bc2	3b 55 c0	 cmp	 edx, DWORD PTR _rc_bound$32576[ebp]
  01bc5	0f 83 2f 04 00
	00		 jae	 $LN770@lzma_decod@2
$LN825@lzma_decod@2:
  01bcb	8b 45 c0	 mov	 eax, DWORD PTR _rc_bound$32576[ebp]
  01bce	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  01bd1	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01bd4	0f b7 91 66 66
	00 00		 movzx	 edx, WORD PTR [ecx+26214]
  01bdb	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  01be0	2b c2		 sub	 eax, edx
  01be2	c1 e8 05	 shr	 eax, 5
  01be5	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  01be8	0f b7 91 66 66
	00 00		 movzx	 edx, WORD PTR [ecx+26214]
  01bef	03 d0		 add	 edx, eax
  01bf1	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01bf4	66 89 90 66 66
	00 00		 mov	 WORD PTR [eax+26214], dx
  01bfb	33 c9		 xor	 ecx, ecx
  01bfd	75 cc		 jne	 SHORT $LN825@lzma_decod@2
$LN818@lzma_decod@2:
  01bff	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  01c06	73 40		 jae	 SHORT $LN817@lzma_decod@2
  01c08	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  01c0b	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  01c0e	75 12		 jne	 SHORT $LN814@lzma_decod@2
  01c10	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01c13	c7 80 a0 6e 00
	00 19 00 00 00	 mov	 DWORD PTR [eax+28320], 25 ; 00000019H
  01c1d	e9 73 36 00 00	 jmp	 $out$32609
$LN814@lzma_decod@2:
  01c22	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  01c25	c1 e1 08	 shl	 ecx, 8
  01c28	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  01c2b	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  01c2e	c1 e2 08	 shl	 edx, 8
  01c31	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  01c34	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  01c37	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  01c3a	0b d1		 or	 edx, ecx
  01c3c	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  01c3f	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  01c42	83 c2 01	 add	 edx, 1
  01c45	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN817@lzma_decod@2:
  01c48	33 c0		 xor	 eax, eax
  01c4a	75 b3		 jne	 SHORT $LN818@lzma_decod@2
  01c4c	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  01c4f	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  01c52	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01c55	c1 e2 04	 shl	 edx, 4
  01c58	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01c5b	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01c62	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01c65	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  01c69	0f af ca	 imul	 ecx, edx
  01c6c	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  01c6f	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  01c72	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  01c75	73 65		 jae	 SHORT $LN808@lzma_decod@2
$LN812@lzma_decod@2:
  01c77	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  01c7a	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  01c7d	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01c80	c1 e2 04	 shl	 edx, 4
  01c83	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01c86	8d 8c 10 68 67
	00 00		 lea	 ecx, DWORD PTR [eax+edx+26472]
  01c8d	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01c90	c1 e2 04	 shl	 edx, 4
  01c93	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01c96	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01c9d	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01ca0	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  01ca4	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  01ca9	2b c2		 sub	 eax, edx
  01cab	c1 e8 05	 shr	 eax, 5
  01cae	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01cb1	0f b7 0c 51	 movzx	 ecx, WORD PTR [ecx+edx*2]
  01cb5	03 c8		 add	 ecx, eax
  01cb7	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01cba	c1 e2 04	 shl	 edx, 4
  01cbd	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01cc0	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01cc7	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01cca	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  01cce	33 c9		 xor	 ecx, ecx
  01cd0	75 a5		 jne	 SHORT $LN812@lzma_decod@2
  01cd2	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01cd5	d1 e2		 shl	 edx, 1
  01cd7	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  01cda	eb 6a		 jmp	 SHORT $LN820@lzma_decod@2
$LN808@lzma_decod@2:
  01cdc	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  01cdf	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  01ce2	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  01ce5	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  01ce8	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  01ceb	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  01cee	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01cf1	c1 e2 04	 shl	 edx, 4
  01cf4	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01cf7	8d 8c 10 68 67
	00 00		 lea	 ecx, DWORD PTR [eax+edx+26472]
  01cfe	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01d01	c1 e2 04	 shl	 edx, 4
  01d04	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01d07	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01d0e	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01d11	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  01d15	c1 fa 05	 sar	 edx, 5
  01d18	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01d1b	0f b7 0c 41	 movzx	 ecx, WORD PTR [ecx+eax*2]
  01d1f	2b ca		 sub	 ecx, edx
  01d21	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01d24	c1 e2 04	 shl	 edx, 4
  01d27	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01d2a	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01d31	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01d34	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  01d38	33 c9		 xor	 ecx, ecx
  01d3a	75 a0		 jne	 SHORT $LN808@lzma_decod@2
  01d3c	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01d3f	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  01d43	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN820@lzma_decod@2:
  01d46	33 c9		 xor	 ecx, ecx
  01d48	0f 85 b1 fe ff
	ff		 jne	 $LN818@lzma_decod@2
$LN801@lzma_decod@2:
  01d4e	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  01d55	73 40		 jae	 SHORT $LN800@lzma_decod@2
  01d57	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  01d5a	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  01d5d	75 12		 jne	 SHORT $LN797@lzma_decod@2
  01d5f	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01d62	c7 80 a0 6e 00
	00 1a 00 00 00	 mov	 DWORD PTR [eax+28320], 26 ; 0000001aH
  01d6c	e9 24 35 00 00	 jmp	 $out$32609
$LN797@lzma_decod@2:
  01d71	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  01d74	c1 e1 08	 shl	 ecx, 8
  01d77	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  01d7a	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  01d7d	c1 e2 08	 shl	 edx, 8
  01d80	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  01d83	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  01d86	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  01d89	0b d1		 or	 edx, ecx
  01d8b	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  01d8e	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  01d91	83 c2 01	 add	 edx, 1
  01d94	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN800@lzma_decod@2:
  01d97	33 c0		 xor	 eax, eax
  01d99	75 b3		 jne	 SHORT $LN801@lzma_decod@2
  01d9b	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  01d9e	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  01da1	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01da4	c1 e2 04	 shl	 edx, 4
  01da7	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01daa	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01db1	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01db4	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  01db8	0f af ca	 imul	 ecx, edx
  01dbb	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  01dbe	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  01dc1	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  01dc4	73 65		 jae	 SHORT $LN791@lzma_decod@2
$LN795@lzma_decod@2:
  01dc6	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  01dc9	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  01dcc	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01dcf	c1 e2 04	 shl	 edx, 4
  01dd2	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01dd5	8d 8c 10 68 67
	00 00		 lea	 ecx, DWORD PTR [eax+edx+26472]
  01ddc	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01ddf	c1 e2 04	 shl	 edx, 4
  01de2	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01de5	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01dec	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01def	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  01df3	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  01df8	2b c2		 sub	 eax, edx
  01dfa	c1 e8 05	 shr	 eax, 5
  01dfd	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01e00	0f b7 0c 51	 movzx	 ecx, WORD PTR [ecx+edx*2]
  01e04	03 c8		 add	 ecx, eax
  01e06	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01e09	c1 e2 04	 shl	 edx, 4
  01e0c	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01e0f	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01e16	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01e19	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  01e1d	33 c9		 xor	 ecx, ecx
  01e1f	75 a5		 jne	 SHORT $LN795@lzma_decod@2
  01e21	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01e24	d1 e2		 shl	 edx, 1
  01e26	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  01e29	eb 6a		 jmp	 SHORT $LN803@lzma_decod@2
$LN791@lzma_decod@2:
  01e2b	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  01e2e	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  01e31	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  01e34	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  01e37	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  01e3a	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  01e3d	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01e40	c1 e2 04	 shl	 edx, 4
  01e43	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01e46	8d 8c 10 68 67
	00 00		 lea	 ecx, DWORD PTR [eax+edx+26472]
  01e4d	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01e50	c1 e2 04	 shl	 edx, 4
  01e53	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01e56	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01e5d	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01e60	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  01e64	c1 fa 05	 sar	 edx, 5
  01e67	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01e6a	0f b7 0c 41	 movzx	 ecx, WORD PTR [ecx+eax*2]
  01e6e	2b ca		 sub	 ecx, edx
  01e70	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01e73	c1 e2 04	 shl	 edx, 4
  01e76	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01e79	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01e80	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01e83	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  01e87	33 c9		 xor	 ecx, ecx
  01e89	75 a0		 jne	 SHORT $LN791@lzma_decod@2
  01e8b	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01e8e	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  01e92	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN803@lzma_decod@2:
  01e95	33 c9		 xor	 ecx, ecx
  01e97	0f 85 b1 fe ff
	ff		 jne	 $LN801@lzma_decod@2
$LN784@lzma_decod@2:
  01e9d	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  01ea4	73 40		 jae	 SHORT $LN783@lzma_decod@2
  01ea6	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  01ea9	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  01eac	75 12		 jne	 SHORT $LN780@lzma_decod@2
  01eae	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01eb1	c7 80 a0 6e 00
	00 1b 00 00 00	 mov	 DWORD PTR [eax+28320], 27 ; 0000001bH
  01ebb	e9 d5 33 00 00	 jmp	 $out$32609
$LN780@lzma_decod@2:
  01ec0	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  01ec3	c1 e1 08	 shl	 ecx, 8
  01ec6	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  01ec9	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  01ecc	c1 e2 08	 shl	 edx, 8
  01ecf	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  01ed2	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  01ed5	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  01ed8	0b d1		 or	 edx, ecx
  01eda	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  01edd	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  01ee0	83 c2 01	 add	 edx, 1
  01ee3	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN783@lzma_decod@2:
  01ee6	33 c0		 xor	 eax, eax
  01ee8	75 b3		 jne	 SHORT $LN784@lzma_decod@2
  01eea	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  01eed	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  01ef0	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01ef3	c1 e2 04	 shl	 edx, 4
  01ef6	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01ef9	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01f00	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01f03	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  01f07	0f af ca	 imul	 ecx, edx
  01f0a	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  01f0d	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  01f10	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  01f13	73 65		 jae	 SHORT $LN774@lzma_decod@2
$LN778@lzma_decod@2:
  01f15	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  01f18	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  01f1b	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01f1e	c1 e2 04	 shl	 edx, 4
  01f21	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01f24	8d 8c 10 68 67
	00 00		 lea	 ecx, DWORD PTR [eax+edx+26472]
  01f2b	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01f2e	c1 e2 04	 shl	 edx, 4
  01f31	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01f34	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01f3b	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01f3e	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  01f42	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  01f47	2b c2		 sub	 eax, edx
  01f49	c1 e8 05	 shr	 eax, 5
  01f4c	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01f4f	0f b7 0c 51	 movzx	 ecx, WORD PTR [ecx+edx*2]
  01f53	03 c8		 add	 ecx, eax
  01f55	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01f58	c1 e2 04	 shl	 edx, 4
  01f5b	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01f5e	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01f65	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01f68	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  01f6c	33 c9		 xor	 ecx, ecx
  01f6e	75 a5		 jne	 SHORT $LN778@lzma_decod@2
  01f70	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01f73	d1 e2		 shl	 edx, 1
  01f75	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  01f78	eb 6a		 jmp	 SHORT $LN786@lzma_decod@2
$LN774@lzma_decod@2:
  01f7a	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  01f7d	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  01f80	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  01f83	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  01f86	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  01f89	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  01f8c	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01f8f	c1 e2 04	 shl	 edx, 4
  01f92	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01f95	8d 8c 10 68 67
	00 00		 lea	 ecx, DWORD PTR [eax+edx+26472]
  01f9c	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01f9f	c1 e2 04	 shl	 edx, 4
  01fa2	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01fa5	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01fac	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01faf	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  01fb3	c1 fa 05	 sar	 edx, 5
  01fb6	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01fb9	0f b7 0c 41	 movzx	 ecx, WORD PTR [ecx+eax*2]
  01fbd	2b ca		 sub	 ecx, edx
  01fbf	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  01fc2	c1 e2 04	 shl	 edx, 4
  01fc5	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  01fc8	8d 94 10 68 67
	00 00		 lea	 edx, DWORD PTR [eax+edx+26472]
  01fcf	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  01fd2	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  01fd6	33 c9		 xor	 ecx, ecx
  01fd8	75 a0		 jne	 SHORT $LN774@lzma_decod@2
  01fda	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01fdd	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  01fe1	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN786@lzma_decod@2:
  01fe4	33 c9		 xor	 ecx, ecx
  01fe6	0f 85 b1 fe ff
	ff		 jne	 $LN784@lzma_decod@2
  01fec	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  01fef	83 c2 02	 add	 edx, 2
  01ff2	89 55 a8	 mov	 DWORD PTR _len$32587[ebp], edx
  01ff5	e9 c5 08 00 00	 jmp	 $LN899@lzma_decod@2
$LN770@lzma_decod@2:
  01ffa	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  01ffd	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  02000	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  02003	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  02006	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  02009	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  0200c	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0200f	0f b7 82 66 66
	00 00		 movzx	 eax, WORD PTR [edx+26214]
  02016	c1 f8 05	 sar	 eax, 5
  02019	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0201c	0f b7 91 66 66
	00 00		 movzx	 edx, WORD PTR [ecx+26214]
  02023	2b d0		 sub	 edx, eax
  02025	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02028	66 89 90 66 66
	00 00		 mov	 WORD PTR [eax+26214], dx
  0202f	33 c9		 xor	 ecx, ecx
  02031	75 c7		 jne	 SHORT $LN770@lzma_decod@2
$LN763@lzma_decod@2:
  02033	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0203a	73 40		 jae	 SHORT $LN762@lzma_decod@2
  0203c	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  0203f	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02042	75 12		 jne	 SHORT $LN759@lzma_decod@2
  02044	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02047	c7 80 a0 6e 00
	00 1c 00 00 00	 mov	 DWORD PTR [eax+28320], 28 ; 0000001cH
  02051	e9 3f 32 00 00	 jmp	 $out$32609
$LN759@lzma_decod@2:
  02056	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02059	c1 e1 08	 shl	 ecx, 8
  0205c	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  0205f	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  02062	c1 e2 08	 shl	 edx, 8
  02065	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  02068	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0206b	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0206e	0b d1		 or	 edx, ecx
  02070	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  02073	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02076	83 c2 01	 add	 edx, 1
  02079	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN762@lzma_decod@2:
  0207c	33 c0		 xor	 eax, eax
  0207e	75 b3		 jne	 SHORT $LN763@lzma_decod@2
  02080	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02083	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  02086	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02089	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0208c	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [eax+edx*2+26728]
  02094	0f af ca	 imul	 ecx, edx
  02097	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  0209a	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  0209d	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  020a0	73 4a		 jae	 SHORT $LN753@lzma_decod@2
$LN757@lzma_decod@2:
  020a2	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  020a5	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  020a8	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  020ab	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  020ae	0f b7 8c 50 68
	68 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+26728]
  020b6	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  020bb	2b d1		 sub	 edx, ecx
  020bd	c1 ea 05	 shr	 edx, 5
  020c0	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  020c3	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  020c6	0f b7 84 41 68
	68 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26728]
  020ce	03 c2		 add	 eax, edx
  020d0	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  020d3	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  020d6	66 89 84 4a 68
	68 00 00	 mov	 WORD PTR [edx+ecx*2+26728], ax
  020de	33 c0		 xor	 eax, eax
  020e0	75 c0		 jne	 SHORT $LN757@lzma_decod@2
  020e2	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  020e5	d1 e1		 shl	 ecx, 1
  020e7	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  020ea	eb 4f		 jmp	 SHORT $LN765@lzma_decod@2
$LN753@lzma_decod@2:
  020ec	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  020ef	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  020f2	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  020f5	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  020f8	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  020fb	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  020fe	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02101	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02104	0f b7 84 4a 68
	68 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+26728]
  0210c	c1 f8 05	 sar	 eax, 5
  0210f	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02112	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02115	0f b7 8c 4a 68
	68 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26728]
  0211d	2b c8		 sub	 ecx, eax
  0211f	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02122	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02125	66 89 8c 50 68
	68 00 00	 mov	 WORD PTR [eax+edx*2+26728], cx
  0212d	33 c9		 xor	 ecx, ecx
  0212f	75 bb		 jne	 SHORT $LN753@lzma_decod@2
  02131	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02134	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02138	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN765@lzma_decod@2:
  0213b	33 c9		 xor	 ecx, ecx
  0213d	0f 85 f0 fe ff
	ff		 jne	 $LN763@lzma_decod@2
$LN746@lzma_decod@2:
  02143	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0214a	73 40		 jae	 SHORT $LN745@lzma_decod@2
  0214c	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  0214f	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02152	75 12		 jne	 SHORT $LN742@lzma_decod@2
  02154	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02157	c7 80 a0 6e 00
	00 1d 00 00 00	 mov	 DWORD PTR [eax+28320], 29 ; 0000001dH
  02161	e9 2f 31 00 00	 jmp	 $out$32609
$LN742@lzma_decod@2:
  02166	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02169	c1 e1 08	 shl	 ecx, 8
  0216c	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  0216f	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  02172	c1 e2 08	 shl	 edx, 8
  02175	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  02178	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0217b	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0217e	0b d1		 or	 edx, ecx
  02180	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  02183	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02186	83 c2 01	 add	 edx, 1
  02189	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN745@lzma_decod@2:
  0218c	33 c0		 xor	 eax, eax
  0218e	75 b3		 jne	 SHORT $LN746@lzma_decod@2
  02190	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02193	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  02196	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02199	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0219c	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [eax+edx*2+26728]
  021a4	0f af ca	 imul	 ecx, edx
  021a7	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  021aa	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  021ad	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  021b0	73 4a		 jae	 SHORT $LN736@lzma_decod@2
$LN740@lzma_decod@2:
  021b2	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  021b5	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  021b8	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  021bb	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  021be	0f b7 8c 50 68
	68 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+26728]
  021c6	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  021cb	2b d1		 sub	 edx, ecx
  021cd	c1 ea 05	 shr	 edx, 5
  021d0	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  021d3	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  021d6	0f b7 84 41 68
	68 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26728]
  021de	03 c2		 add	 eax, edx
  021e0	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  021e3	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  021e6	66 89 84 4a 68
	68 00 00	 mov	 WORD PTR [edx+ecx*2+26728], ax
  021ee	33 c0		 xor	 eax, eax
  021f0	75 c0		 jne	 SHORT $LN740@lzma_decod@2
  021f2	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  021f5	d1 e1		 shl	 ecx, 1
  021f7	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  021fa	eb 4f		 jmp	 SHORT $LN748@lzma_decod@2
$LN736@lzma_decod@2:
  021fc	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  021ff	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02202	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02205	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02208	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  0220b	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0220e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02211	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02214	0f b7 84 4a 68
	68 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+26728]
  0221c	c1 f8 05	 sar	 eax, 5
  0221f	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02222	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02225	0f b7 8c 4a 68
	68 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26728]
  0222d	2b c8		 sub	 ecx, eax
  0222f	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02232	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02235	66 89 8c 50 68
	68 00 00	 mov	 WORD PTR [eax+edx*2+26728], cx
  0223d	33 c9		 xor	 ecx, ecx
  0223f	75 bb		 jne	 SHORT $LN736@lzma_decod@2
  02241	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02244	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02248	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN748@lzma_decod@2:
  0224b	33 c9		 xor	 ecx, ecx
  0224d	0f 85 f0 fe ff
	ff		 jne	 $LN746@lzma_decod@2
$LN729@lzma_decod@2:
  02253	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0225a	73 40		 jae	 SHORT $LN728@lzma_decod@2
  0225c	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  0225f	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02262	75 12		 jne	 SHORT $LN725@lzma_decod@2
  02264	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02267	c7 80 a0 6e 00
	00 1e 00 00 00	 mov	 DWORD PTR [eax+28320], 30 ; 0000001eH
  02271	e9 1f 30 00 00	 jmp	 $out$32609
$LN725@lzma_decod@2:
  02276	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02279	c1 e1 08	 shl	 ecx, 8
  0227c	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  0227f	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  02282	c1 e2 08	 shl	 edx, 8
  02285	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  02288	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0228b	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0228e	0b d1		 or	 edx, ecx
  02290	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  02293	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02296	83 c2 01	 add	 edx, 1
  02299	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN728@lzma_decod@2:
  0229c	33 c0		 xor	 eax, eax
  0229e	75 b3		 jne	 SHORT $LN729@lzma_decod@2
  022a0	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  022a3	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  022a6	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  022a9	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  022ac	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [eax+edx*2+26728]
  022b4	0f af ca	 imul	 ecx, edx
  022b7	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  022ba	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  022bd	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  022c0	73 4a		 jae	 SHORT $LN719@lzma_decod@2
$LN723@lzma_decod@2:
  022c2	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  022c5	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  022c8	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  022cb	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  022ce	0f b7 8c 50 68
	68 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+26728]
  022d6	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  022db	2b d1		 sub	 edx, ecx
  022dd	c1 ea 05	 shr	 edx, 5
  022e0	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  022e3	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  022e6	0f b7 84 41 68
	68 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26728]
  022ee	03 c2		 add	 eax, edx
  022f0	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  022f3	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  022f6	66 89 84 4a 68
	68 00 00	 mov	 WORD PTR [edx+ecx*2+26728], ax
  022fe	33 c0		 xor	 eax, eax
  02300	75 c0		 jne	 SHORT $LN723@lzma_decod@2
  02302	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02305	d1 e1		 shl	 ecx, 1
  02307	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  0230a	eb 4f		 jmp	 SHORT $LN731@lzma_decod@2
$LN719@lzma_decod@2:
  0230c	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0230f	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02312	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02315	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02318	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  0231b	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0231e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02321	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02324	0f b7 84 4a 68
	68 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+26728]
  0232c	c1 f8 05	 sar	 eax, 5
  0232f	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02332	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02335	0f b7 8c 4a 68
	68 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26728]
  0233d	2b c8		 sub	 ecx, eax
  0233f	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02342	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02345	66 89 8c 50 68
	68 00 00	 mov	 WORD PTR [eax+edx*2+26728], cx
  0234d	33 c9		 xor	 ecx, ecx
  0234f	75 bb		 jne	 SHORT $LN719@lzma_decod@2
  02351	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02354	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02358	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN731@lzma_decod@2:
  0235b	33 c9		 xor	 ecx, ecx
  0235d	0f 85 f0 fe ff
	ff		 jne	 $LN729@lzma_decod@2
$LN712@lzma_decod@2:
  02363	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0236a	73 40		 jae	 SHORT $LN711@lzma_decod@2
  0236c	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  0236f	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02372	75 12		 jne	 SHORT $LN708@lzma_decod@2
  02374	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02377	c7 80 a0 6e 00
	00 1f 00 00 00	 mov	 DWORD PTR [eax+28320], 31 ; 0000001fH
  02381	e9 0f 2f 00 00	 jmp	 $out$32609
$LN708@lzma_decod@2:
  02386	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02389	c1 e1 08	 shl	 ecx, 8
  0238c	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  0238f	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  02392	c1 e2 08	 shl	 edx, 8
  02395	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  02398	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0239b	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0239e	0b d1		 or	 edx, ecx
  023a0	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  023a3	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  023a6	83 c2 01	 add	 edx, 1
  023a9	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN711@lzma_decod@2:
  023ac	33 c0		 xor	 eax, eax
  023ae	75 b3		 jne	 SHORT $LN712@lzma_decod@2
  023b0	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  023b3	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  023b6	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  023b9	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  023bc	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [eax+edx*2+26728]
  023c4	0f af ca	 imul	 ecx, edx
  023c7	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  023ca	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  023cd	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  023d0	73 4a		 jae	 SHORT $LN702@lzma_decod@2
$LN706@lzma_decod@2:
  023d2	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  023d5	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  023d8	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  023db	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  023de	0f b7 8c 50 68
	68 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+26728]
  023e6	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  023eb	2b d1		 sub	 edx, ecx
  023ed	c1 ea 05	 shr	 edx, 5
  023f0	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  023f3	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  023f6	0f b7 84 41 68
	68 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26728]
  023fe	03 c2		 add	 eax, edx
  02400	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02403	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02406	66 89 84 4a 68
	68 00 00	 mov	 WORD PTR [edx+ecx*2+26728], ax
  0240e	33 c0		 xor	 eax, eax
  02410	75 c0		 jne	 SHORT $LN706@lzma_decod@2
  02412	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02415	d1 e1		 shl	 ecx, 1
  02417	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  0241a	eb 4f		 jmp	 SHORT $LN714@lzma_decod@2
$LN702@lzma_decod@2:
  0241c	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0241f	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02422	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02425	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02428	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  0242b	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0242e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02431	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02434	0f b7 84 4a 68
	68 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+26728]
  0243c	c1 f8 05	 sar	 eax, 5
  0243f	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02442	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02445	0f b7 8c 4a 68
	68 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26728]
  0244d	2b c8		 sub	 ecx, eax
  0244f	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02452	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02455	66 89 8c 50 68
	68 00 00	 mov	 WORD PTR [eax+edx*2+26728], cx
  0245d	33 c9		 xor	 ecx, ecx
  0245f	75 bb		 jne	 SHORT $LN702@lzma_decod@2
  02461	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02464	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02468	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN714@lzma_decod@2:
  0246b	33 c9		 xor	 ecx, ecx
  0246d	0f 85 f0 fe ff
	ff		 jne	 $LN712@lzma_decod@2
$LN695@lzma_decod@2:
  02473	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0247a	73 40		 jae	 SHORT $LN694@lzma_decod@2
  0247c	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  0247f	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02482	75 12		 jne	 SHORT $LN691@lzma_decod@2
  02484	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02487	c7 80 a0 6e 00
	00 20 00 00 00	 mov	 DWORD PTR [eax+28320], 32 ; 00000020H
  02491	e9 ff 2d 00 00	 jmp	 $out$32609
$LN691@lzma_decod@2:
  02496	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02499	c1 e1 08	 shl	 ecx, 8
  0249c	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  0249f	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  024a2	c1 e2 08	 shl	 edx, 8
  024a5	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  024a8	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  024ab	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  024ae	0b d1		 or	 edx, ecx
  024b0	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  024b3	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  024b6	83 c2 01	 add	 edx, 1
  024b9	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN694@lzma_decod@2:
  024bc	33 c0		 xor	 eax, eax
  024be	75 b3		 jne	 SHORT $LN695@lzma_decod@2
  024c0	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  024c3	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  024c6	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  024c9	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  024cc	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [eax+edx*2+26728]
  024d4	0f af ca	 imul	 ecx, edx
  024d7	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  024da	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  024dd	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  024e0	73 4a		 jae	 SHORT $LN685@lzma_decod@2
$LN689@lzma_decod@2:
  024e2	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  024e5	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  024e8	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  024eb	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  024ee	0f b7 8c 50 68
	68 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+26728]
  024f6	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  024fb	2b d1		 sub	 edx, ecx
  024fd	c1 ea 05	 shr	 edx, 5
  02500	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  02503	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  02506	0f b7 84 41 68
	68 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26728]
  0250e	03 c2		 add	 eax, edx
  02510	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02513	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02516	66 89 84 4a 68
	68 00 00	 mov	 WORD PTR [edx+ecx*2+26728], ax
  0251e	33 c0		 xor	 eax, eax
  02520	75 c0		 jne	 SHORT $LN689@lzma_decod@2
  02522	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02525	d1 e1		 shl	 ecx, 1
  02527	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  0252a	eb 4f		 jmp	 SHORT $LN697@lzma_decod@2
$LN685@lzma_decod@2:
  0252c	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0252f	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02532	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02535	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02538	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  0253b	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0253e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02541	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02544	0f b7 84 4a 68
	68 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+26728]
  0254c	c1 f8 05	 sar	 eax, 5
  0254f	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02552	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02555	0f b7 8c 4a 68
	68 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26728]
  0255d	2b c8		 sub	 ecx, eax
  0255f	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02562	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02565	66 89 8c 50 68
	68 00 00	 mov	 WORD PTR [eax+edx*2+26728], cx
  0256d	33 c9		 xor	 ecx, ecx
  0256f	75 bb		 jne	 SHORT $LN685@lzma_decod@2
  02571	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02574	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02578	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN697@lzma_decod@2:
  0257b	33 c9		 xor	 ecx, ecx
  0257d	0f 85 f0 fe ff
	ff		 jne	 $LN695@lzma_decod@2
$LN678@lzma_decod@2:
  02583	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0258a	73 40		 jae	 SHORT $LN677@lzma_decod@2
  0258c	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  0258f	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02592	75 12		 jne	 SHORT $LN674@lzma_decod@2
  02594	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02597	c7 80 a0 6e 00
	00 21 00 00 00	 mov	 DWORD PTR [eax+28320], 33 ; 00000021H
  025a1	e9 ef 2c 00 00	 jmp	 $out$32609
$LN674@lzma_decod@2:
  025a6	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  025a9	c1 e1 08	 shl	 ecx, 8
  025ac	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  025af	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  025b2	c1 e2 08	 shl	 edx, 8
  025b5	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  025b8	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  025bb	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  025be	0b d1		 or	 edx, ecx
  025c0	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  025c3	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  025c6	83 c2 01	 add	 edx, 1
  025c9	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN677@lzma_decod@2:
  025cc	33 c0		 xor	 eax, eax
  025ce	75 b3		 jne	 SHORT $LN678@lzma_decod@2
  025d0	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  025d3	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  025d6	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  025d9	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  025dc	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [eax+edx*2+26728]
  025e4	0f af ca	 imul	 ecx, edx
  025e7	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  025ea	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  025ed	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  025f0	73 4a		 jae	 SHORT $LN668@lzma_decod@2
$LN672@lzma_decod@2:
  025f2	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  025f5	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  025f8	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  025fb	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  025fe	0f b7 8c 50 68
	68 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+26728]
  02606	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  0260b	2b d1		 sub	 edx, ecx
  0260d	c1 ea 05	 shr	 edx, 5
  02610	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  02613	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  02616	0f b7 84 41 68
	68 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26728]
  0261e	03 c2		 add	 eax, edx
  02620	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02623	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02626	66 89 84 4a 68
	68 00 00	 mov	 WORD PTR [edx+ecx*2+26728], ax
  0262e	33 c0		 xor	 eax, eax
  02630	75 c0		 jne	 SHORT $LN672@lzma_decod@2
  02632	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02635	d1 e1		 shl	 ecx, 1
  02637	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  0263a	eb 4f		 jmp	 SHORT $LN680@lzma_decod@2
$LN668@lzma_decod@2:
  0263c	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0263f	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02642	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02645	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02648	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  0264b	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0264e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02651	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02654	0f b7 84 4a 68
	68 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+26728]
  0265c	c1 f8 05	 sar	 eax, 5
  0265f	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02662	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02665	0f b7 8c 4a 68
	68 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26728]
  0266d	2b c8		 sub	 ecx, eax
  0266f	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02672	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02675	66 89 8c 50 68
	68 00 00	 mov	 WORD PTR [eax+edx*2+26728], cx
  0267d	33 c9		 xor	 ecx, ecx
  0267f	75 bb		 jne	 SHORT $LN668@lzma_decod@2
  02681	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02684	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02688	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN680@lzma_decod@2:
  0268b	33 c9		 xor	 ecx, ecx
  0268d	0f 85 f0 fe ff
	ff		 jne	 $LN678@lzma_decod@2
$LN661@lzma_decod@2:
  02693	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0269a	73 40		 jae	 SHORT $LN660@lzma_decod@2
  0269c	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  0269f	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  026a2	75 12		 jne	 SHORT $LN657@lzma_decod@2
  026a4	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  026a7	c7 80 a0 6e 00
	00 22 00 00 00	 mov	 DWORD PTR [eax+28320], 34 ; 00000022H
  026b1	e9 df 2b 00 00	 jmp	 $out$32609
$LN657@lzma_decod@2:
  026b6	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  026b9	c1 e1 08	 shl	 ecx, 8
  026bc	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  026bf	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  026c2	c1 e2 08	 shl	 edx, 8
  026c5	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  026c8	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  026cb	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  026ce	0b d1		 or	 edx, ecx
  026d0	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  026d3	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  026d6	83 c2 01	 add	 edx, 1
  026d9	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN660@lzma_decod@2:
  026dc	33 c0		 xor	 eax, eax
  026de	75 b3		 jne	 SHORT $LN661@lzma_decod@2
  026e0	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  026e3	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  026e6	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  026e9	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  026ec	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [eax+edx*2+26728]
  026f4	0f af ca	 imul	 ecx, edx
  026f7	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  026fa	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  026fd	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  02700	73 4a		 jae	 SHORT $LN651@lzma_decod@2
$LN655@lzma_decod@2:
  02702	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  02705	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02708	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0270b	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0270e	0f b7 8c 50 68
	68 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+26728]
  02716	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  0271b	2b d1		 sub	 edx, ecx
  0271d	c1 ea 05	 shr	 edx, 5
  02720	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  02723	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  02726	0f b7 84 41 68
	68 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26728]
  0272e	03 c2		 add	 eax, edx
  02730	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02733	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02736	66 89 84 4a 68
	68 00 00	 mov	 WORD PTR [edx+ecx*2+26728], ax
  0273e	33 c0		 xor	 eax, eax
  02740	75 c0		 jne	 SHORT $LN655@lzma_decod@2
  02742	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02745	d1 e1		 shl	 ecx, 1
  02747	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  0274a	eb 4f		 jmp	 SHORT $LN663@lzma_decod@2
$LN651@lzma_decod@2:
  0274c	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0274f	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02752	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02755	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02758	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  0275b	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0275e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02761	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02764	0f b7 84 4a 68
	68 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+26728]
  0276c	c1 f8 05	 sar	 eax, 5
  0276f	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02772	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02775	0f b7 8c 4a 68
	68 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26728]
  0277d	2b c8		 sub	 ecx, eax
  0277f	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02782	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02785	66 89 8c 50 68
	68 00 00	 mov	 WORD PTR [eax+edx*2+26728], cx
  0278d	33 c9		 xor	 ecx, ecx
  0278f	75 bb		 jne	 SHORT $LN651@lzma_decod@2
  02791	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02794	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02798	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN663@lzma_decod@2:
  0279b	33 c9		 xor	 ecx, ecx
  0279d	0f 85 f0 fe ff
	ff		 jne	 $LN661@lzma_decod@2
$LN644@lzma_decod@2:
  027a3	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  027aa	73 40		 jae	 SHORT $LN643@lzma_decod@2
  027ac	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  027af	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  027b2	75 12		 jne	 SHORT $LN640@lzma_decod@2
  027b4	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  027b7	c7 80 a0 6e 00
	00 23 00 00 00	 mov	 DWORD PTR [eax+28320], 35 ; 00000023H
  027c1	e9 cf 2a 00 00	 jmp	 $out$32609
$LN640@lzma_decod@2:
  027c6	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  027c9	c1 e1 08	 shl	 ecx, 8
  027cc	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  027cf	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  027d2	c1 e2 08	 shl	 edx, 8
  027d5	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  027d8	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  027db	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  027de	0b d1		 or	 edx, ecx
  027e0	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  027e3	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  027e6	83 c2 01	 add	 edx, 1
  027e9	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN643@lzma_decod@2:
  027ec	33 c0		 xor	 eax, eax
  027ee	75 b3		 jne	 SHORT $LN644@lzma_decod@2
  027f0	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  027f3	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  027f6	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  027f9	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  027fc	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [eax+edx*2+26728]
  02804	0f af ca	 imul	 ecx, edx
  02807	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  0280a	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  0280d	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  02810	73 4a		 jae	 SHORT $LN634@lzma_decod@2
$LN638@lzma_decod@2:
  02812	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  02815	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02818	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0281b	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0281e	0f b7 8c 50 68
	68 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+26728]
  02826	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  0282b	2b d1		 sub	 edx, ecx
  0282d	c1 ea 05	 shr	 edx, 5
  02830	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  02833	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  02836	0f b7 84 41 68
	68 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26728]
  0283e	03 c2		 add	 eax, edx
  02840	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02843	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02846	66 89 84 4a 68
	68 00 00	 mov	 WORD PTR [edx+ecx*2+26728], ax
  0284e	33 c0		 xor	 eax, eax
  02850	75 c0		 jne	 SHORT $LN638@lzma_decod@2
  02852	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02855	d1 e1		 shl	 ecx, 1
  02857	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  0285a	eb 4f		 jmp	 SHORT $LN646@lzma_decod@2
$LN634@lzma_decod@2:
  0285c	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0285f	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02862	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02865	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02868	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  0286b	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0286e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02871	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02874	0f b7 84 4a 68
	68 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+26728]
  0287c	c1 f8 05	 sar	 eax, 5
  0287f	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02882	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02885	0f b7 8c 4a 68
	68 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26728]
  0288d	2b c8		 sub	 ecx, eax
  0288f	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02892	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02895	66 89 8c 50 68
	68 00 00	 mov	 WORD PTR [eax+edx*2+26728], cx
  0289d	33 c9		 xor	 ecx, ecx
  0289f	75 bb		 jne	 SHORT $LN634@lzma_decod@2
  028a1	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  028a4	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  028a8	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN646@lzma_decod@2:
  028ab	33 c9		 xor	 ecx, ecx
  028ad	0f 85 f0 fe ff
	ff		 jne	 $LN644@lzma_decod@2
  028b3	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  028b6	81 ea ee 00 00
	00		 sub	 edx, 238		; 000000eeH
  028bc	89 55 a8	 mov	 DWORD PTR _len$32587[ebp], edx
$LN899@lzma_decod@2:
  028bf	33 c0		 xor	 eax, eax
  028c1	0f 85 b7 ed ff
	ff		 jne	 $LN900@lzma_decod@2

; 520  : 
; 521  : 			// Prepare to decode the highest two bits of the
; 522  : 			// match distance.
; 523  : 			probs = coder->dist_slot[get_dist_state(len)];

  028c7	83 7d a8 06	 cmp	 DWORD PTR _len$32587[ebp], 6
  028cb	73 0e		 jae	 SHORT $LN1211@lzma_decod@2
  028cd	8b 4d a8	 mov	 ecx, DWORD PTR _len$32587[ebp]
  028d0	83 e9 02	 sub	 ecx, 2
  028d3	89 8d 34 ff ff
	ff		 mov	 DWORD PTR tv2028[ebp], ecx
  028d9	eb 0a		 jmp	 SHORT $LN1212@lzma_decod@2
$LN1211@lzma_decod@2:
  028db	c7 85 34 ff ff
	ff 03 00 00 00	 mov	 DWORD PTR tv2028[ebp], 3
$LN1212@lzma_decod@2:
  028e5	8b 95 34 ff ff
	ff		 mov	 edx, DWORD PTR tv2028[ebp]
  028eb	c1 e2 07	 shl	 edx, 7
  028ee	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  028f1	8d 8c 10 60 63
	00 00		 lea	 ecx, DWORD PTR [eax+edx+25440]
  028f8	89 4d ac	 mov	 DWORD PTR _probs$32583[ebp], ecx

; 524  : 			symbol = 1;

  028fb	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _symbol$32584[ebp], 1
$LN627@lzma_decod@2:

; 525  : 
; 526  : #ifdef HAVE_SMALL
; 527  : 	case SEQ_DIST_SLOT:
; 528  : 			do {
; 529  : 				rc_bit(probs[symbol], , , SEQ_DIST_SLOT);
; 530  : 			} while (symbol < DIST_SLOTS);
; 531  : #else
; 532  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT0);

  02902	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  02909	73 40		 jae	 SHORT $LN626@lzma_decod@2
  0290b	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  0290e	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02911	75 12		 jne	 SHORT $LN623@lzma_decod@2
  02913	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02916	c7 80 a0 6e 00
	00 24 00 00 00	 mov	 DWORD PTR [eax+28320], 36 ; 00000024H
  02920	e9 70 29 00 00	 jmp	 $out$32609
$LN623@lzma_decod@2:
  02925	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02928	c1 e1 08	 shl	 ecx, 8
  0292b	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  0292e	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  02931	c1 e2 08	 shl	 edx, 8
  02934	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  02937	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0293a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0293d	0b d1		 or	 edx, ecx
  0293f	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  02942	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02945	83 c2 01	 add	 edx, 1
  02948	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN626@lzma_decod@2:
  0294b	33 c0		 xor	 eax, eax
  0294d	75 b3		 jne	 SHORT $LN627@lzma_decod@2
  0294f	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02952	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  02955	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02958	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0295b	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  0295f	0f af ca	 imul	 ecx, edx
  02962	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  02965	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02968	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  0296b	73 3e		 jae	 SHORT $LN617@lzma_decod@2
$LN621@lzma_decod@2:
  0296d	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  02970	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02973	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02976	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02979	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  0297d	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  02982	2b d1		 sub	 edx, ecx
  02984	c1 ea 05	 shr	 edx, 5
  02987	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0298a	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  0298d	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  02991	03 c2		 add	 eax, edx
  02993	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02996	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02999	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  0299d	33 c0		 xor	 eax, eax
  0299f	75 cc		 jne	 SHORT $LN621@lzma_decod@2
  029a1	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  029a4	d1 e1		 shl	 ecx, 1
  029a6	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  029a9	eb 43		 jmp	 SHORT $LN629@lzma_decod@2
$LN617@lzma_decod@2:
  029ab	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  029ae	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  029b1	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  029b4	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  029b7	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  029ba	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  029bd	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  029c0	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  029c3	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  029c7	c1 f8 05	 sar	 eax, 5
  029ca	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  029cd	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  029d0	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  029d4	2b c8		 sub	 ecx, eax
  029d6	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  029d9	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  029dc	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  029e0	33 c9		 xor	 ecx, ecx
  029e2	75 c7		 jne	 SHORT $LN617@lzma_decod@2
  029e4	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  029e7	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  029eb	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN629@lzma_decod@2:
  029ee	33 c9		 xor	 ecx, ecx
  029f0	0f 85 0c ff ff
	ff		 jne	 $LN627@lzma_decod@2
$LN610@lzma_decod@2:

; 533  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT1);

  029f6	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  029fd	73 40		 jae	 SHORT $LN609@lzma_decod@2
  029ff	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02a02	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02a05	75 12		 jne	 SHORT $LN606@lzma_decod@2
  02a07	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02a0a	c7 80 a0 6e 00
	00 25 00 00 00	 mov	 DWORD PTR [eax+28320], 37 ; 00000025H
  02a14	e9 7c 28 00 00	 jmp	 $out$32609
$LN606@lzma_decod@2:
  02a19	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02a1c	c1 e1 08	 shl	 ecx, 8
  02a1f	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02a22	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  02a25	c1 e2 08	 shl	 edx, 8
  02a28	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  02a2b	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  02a2e	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  02a31	0b d1		 or	 edx, ecx
  02a33	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  02a36	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02a39	83 c2 01	 add	 edx, 1
  02a3c	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN609@lzma_decod@2:
  02a3f	33 c0		 xor	 eax, eax
  02a41	75 b3		 jne	 SHORT $LN610@lzma_decod@2
  02a43	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02a46	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  02a49	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02a4c	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02a4f	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  02a53	0f af ca	 imul	 ecx, edx
  02a56	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  02a59	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02a5c	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  02a5f	73 3e		 jae	 SHORT $LN600@lzma_decod@2
$LN604@lzma_decod@2:
  02a61	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  02a64	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02a67	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02a6a	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02a6d	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  02a71	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  02a76	2b d1		 sub	 edx, ecx
  02a78	c1 ea 05	 shr	 edx, 5
  02a7b	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  02a7e	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  02a81	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  02a85	03 c2		 add	 eax, edx
  02a87	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02a8a	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02a8d	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  02a91	33 c0		 xor	 eax, eax
  02a93	75 cc		 jne	 SHORT $LN604@lzma_decod@2
  02a95	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02a98	d1 e1		 shl	 ecx, 1
  02a9a	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  02a9d	eb 43		 jmp	 SHORT $LN612@lzma_decod@2
$LN600@lzma_decod@2:
  02a9f	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  02aa2	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02aa5	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02aa8	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02aab	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  02aae	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  02ab1	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02ab4	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02ab7	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  02abb	c1 f8 05	 sar	 eax, 5
  02abe	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02ac1	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02ac4	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  02ac8	2b c8		 sub	 ecx, eax
  02aca	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02acd	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02ad0	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  02ad4	33 c9		 xor	 ecx, ecx
  02ad6	75 c7		 jne	 SHORT $LN600@lzma_decod@2
  02ad8	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02adb	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02adf	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN612@lzma_decod@2:
  02ae2	33 c9		 xor	 ecx, ecx
  02ae4	0f 85 0c ff ff
	ff		 jne	 $LN610@lzma_decod@2
$LN593@lzma_decod@2:

; 534  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT2);

  02aea	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  02af1	73 40		 jae	 SHORT $LN592@lzma_decod@2
  02af3	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02af6	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02af9	75 12		 jne	 SHORT $LN589@lzma_decod@2
  02afb	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02afe	c7 80 a0 6e 00
	00 26 00 00 00	 mov	 DWORD PTR [eax+28320], 38 ; 00000026H
  02b08	e9 88 27 00 00	 jmp	 $out$32609
$LN589@lzma_decod@2:
  02b0d	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02b10	c1 e1 08	 shl	 ecx, 8
  02b13	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02b16	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  02b19	c1 e2 08	 shl	 edx, 8
  02b1c	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  02b1f	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  02b22	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  02b25	0b d1		 or	 edx, ecx
  02b27	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  02b2a	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02b2d	83 c2 01	 add	 edx, 1
  02b30	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN592@lzma_decod@2:
  02b33	33 c0		 xor	 eax, eax
  02b35	75 b3		 jne	 SHORT $LN593@lzma_decod@2
  02b37	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02b3a	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  02b3d	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02b40	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02b43	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  02b47	0f af ca	 imul	 ecx, edx
  02b4a	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  02b4d	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02b50	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  02b53	73 3e		 jae	 SHORT $LN583@lzma_decod@2
$LN587@lzma_decod@2:
  02b55	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  02b58	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02b5b	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02b5e	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02b61	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  02b65	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  02b6a	2b d1		 sub	 edx, ecx
  02b6c	c1 ea 05	 shr	 edx, 5
  02b6f	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  02b72	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  02b75	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  02b79	03 c2		 add	 eax, edx
  02b7b	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02b7e	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02b81	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  02b85	33 c0		 xor	 eax, eax
  02b87	75 cc		 jne	 SHORT $LN587@lzma_decod@2
  02b89	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02b8c	d1 e1		 shl	 ecx, 1
  02b8e	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  02b91	eb 43		 jmp	 SHORT $LN595@lzma_decod@2
$LN583@lzma_decod@2:
  02b93	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  02b96	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02b99	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02b9c	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02b9f	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  02ba2	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  02ba5	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02ba8	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02bab	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  02baf	c1 f8 05	 sar	 eax, 5
  02bb2	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02bb5	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02bb8	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  02bbc	2b c8		 sub	 ecx, eax
  02bbe	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02bc1	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02bc4	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  02bc8	33 c9		 xor	 ecx, ecx
  02bca	75 c7		 jne	 SHORT $LN583@lzma_decod@2
  02bcc	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02bcf	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02bd3	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN595@lzma_decod@2:
  02bd6	33 c9		 xor	 ecx, ecx
  02bd8	0f 85 0c ff ff
	ff		 jne	 $LN593@lzma_decod@2
$LN576@lzma_decod@2:

; 535  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT3);

  02bde	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  02be5	73 40		 jae	 SHORT $LN575@lzma_decod@2
  02be7	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02bea	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02bed	75 12		 jne	 SHORT $LN572@lzma_decod@2
  02bef	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02bf2	c7 80 a0 6e 00
	00 27 00 00 00	 mov	 DWORD PTR [eax+28320], 39 ; 00000027H
  02bfc	e9 94 26 00 00	 jmp	 $out$32609
$LN572@lzma_decod@2:
  02c01	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02c04	c1 e1 08	 shl	 ecx, 8
  02c07	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02c0a	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  02c0d	c1 e2 08	 shl	 edx, 8
  02c10	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  02c13	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  02c16	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  02c19	0b d1		 or	 edx, ecx
  02c1b	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  02c1e	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02c21	83 c2 01	 add	 edx, 1
  02c24	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN575@lzma_decod@2:
  02c27	33 c0		 xor	 eax, eax
  02c29	75 b3		 jne	 SHORT $LN576@lzma_decod@2
  02c2b	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02c2e	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  02c31	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02c34	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02c37	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  02c3b	0f af ca	 imul	 ecx, edx
  02c3e	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  02c41	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02c44	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  02c47	73 3e		 jae	 SHORT $LN566@lzma_decod@2
$LN570@lzma_decod@2:
  02c49	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  02c4c	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02c4f	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02c52	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02c55	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  02c59	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  02c5e	2b d1		 sub	 edx, ecx
  02c60	c1 ea 05	 shr	 edx, 5
  02c63	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  02c66	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  02c69	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  02c6d	03 c2		 add	 eax, edx
  02c6f	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02c72	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02c75	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  02c79	33 c0		 xor	 eax, eax
  02c7b	75 cc		 jne	 SHORT $LN570@lzma_decod@2
  02c7d	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02c80	d1 e1		 shl	 ecx, 1
  02c82	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  02c85	eb 43		 jmp	 SHORT $LN578@lzma_decod@2
$LN566@lzma_decod@2:
  02c87	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  02c8a	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02c8d	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02c90	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02c93	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  02c96	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  02c99	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02c9c	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02c9f	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  02ca3	c1 f8 05	 sar	 eax, 5
  02ca6	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02ca9	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02cac	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  02cb0	2b c8		 sub	 ecx, eax
  02cb2	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02cb5	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02cb8	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  02cbc	33 c9		 xor	 ecx, ecx
  02cbe	75 c7		 jne	 SHORT $LN566@lzma_decod@2
  02cc0	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02cc3	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02cc7	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN578@lzma_decod@2:
  02cca	33 c9		 xor	 ecx, ecx
  02ccc	0f 85 0c ff ff
	ff		 jne	 $LN576@lzma_decod@2
$LN559@lzma_decod@2:

; 536  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT4);

  02cd2	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  02cd9	73 40		 jae	 SHORT $LN558@lzma_decod@2
  02cdb	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02cde	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02ce1	75 12		 jne	 SHORT $LN555@lzma_decod@2
  02ce3	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02ce6	c7 80 a0 6e 00
	00 28 00 00 00	 mov	 DWORD PTR [eax+28320], 40 ; 00000028H
  02cf0	e9 a0 25 00 00	 jmp	 $out$32609
$LN555@lzma_decod@2:
  02cf5	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02cf8	c1 e1 08	 shl	 ecx, 8
  02cfb	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02cfe	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  02d01	c1 e2 08	 shl	 edx, 8
  02d04	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  02d07	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  02d0a	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  02d0d	0b d1		 or	 edx, ecx
  02d0f	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  02d12	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02d15	83 c2 01	 add	 edx, 1
  02d18	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN558@lzma_decod@2:
  02d1b	33 c0		 xor	 eax, eax
  02d1d	75 b3		 jne	 SHORT $LN559@lzma_decod@2
  02d1f	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02d22	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  02d25	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02d28	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02d2b	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  02d2f	0f af ca	 imul	 ecx, edx
  02d32	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  02d35	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02d38	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  02d3b	73 3e		 jae	 SHORT $LN549@lzma_decod@2
$LN553@lzma_decod@2:
  02d3d	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  02d40	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02d43	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02d46	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02d49	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  02d4d	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  02d52	2b d1		 sub	 edx, ecx
  02d54	c1 ea 05	 shr	 edx, 5
  02d57	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  02d5a	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  02d5d	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  02d61	03 c2		 add	 eax, edx
  02d63	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02d66	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02d69	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  02d6d	33 c0		 xor	 eax, eax
  02d6f	75 cc		 jne	 SHORT $LN553@lzma_decod@2
  02d71	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02d74	d1 e1		 shl	 ecx, 1
  02d76	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  02d79	eb 43		 jmp	 SHORT $LN561@lzma_decod@2
$LN549@lzma_decod@2:
  02d7b	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  02d7e	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02d81	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02d84	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02d87	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  02d8a	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  02d8d	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02d90	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02d93	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  02d97	c1 f8 05	 sar	 eax, 5
  02d9a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02d9d	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02da0	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  02da4	2b c8		 sub	 ecx, eax
  02da6	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02da9	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02dac	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  02db0	33 c9		 xor	 ecx, ecx
  02db2	75 c7		 jne	 SHORT $LN549@lzma_decod@2
  02db4	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02db7	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02dbb	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN561@lzma_decod@2:
  02dbe	33 c9		 xor	 ecx, ecx
  02dc0	0f 85 0c ff ff
	ff		 jne	 $LN559@lzma_decod@2
$LN542@lzma_decod@2:

; 537  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT5);

  02dc6	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  02dcd	73 40		 jae	 SHORT $LN541@lzma_decod@2
  02dcf	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02dd2	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02dd5	75 12		 jne	 SHORT $LN538@lzma_decod@2
  02dd7	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02dda	c7 80 a0 6e 00
	00 29 00 00 00	 mov	 DWORD PTR [eax+28320], 41 ; 00000029H
  02de4	e9 ac 24 00 00	 jmp	 $out$32609
$LN538@lzma_decod@2:
  02de9	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02dec	c1 e1 08	 shl	 ecx, 8
  02def	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02df2	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  02df5	c1 e2 08	 shl	 edx, 8
  02df8	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  02dfb	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  02dfe	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  02e01	0b d1		 or	 edx, ecx
  02e03	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  02e06	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02e09	83 c2 01	 add	 edx, 1
  02e0c	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN541@lzma_decod@2:
  02e0f	33 c0		 xor	 eax, eax
  02e11	75 b3		 jne	 SHORT $LN542@lzma_decod@2
  02e13	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02e16	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  02e19	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02e1c	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02e1f	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  02e23	0f af ca	 imul	 ecx, edx
  02e26	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  02e29	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02e2c	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  02e2f	73 3e		 jae	 SHORT $LN532@lzma_decod@2
$LN536@lzma_decod@2:
  02e31	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  02e34	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02e37	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02e3a	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02e3d	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  02e41	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  02e46	2b d1		 sub	 edx, ecx
  02e48	c1 ea 05	 shr	 edx, 5
  02e4b	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  02e4e	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  02e51	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  02e55	03 c2		 add	 eax, edx
  02e57	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02e5a	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02e5d	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  02e61	33 c0		 xor	 eax, eax
  02e63	75 cc		 jne	 SHORT $LN536@lzma_decod@2
  02e65	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02e68	d1 e1		 shl	 ecx, 1
  02e6a	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  02e6d	eb 43		 jmp	 SHORT $LN544@lzma_decod@2
$LN532@lzma_decod@2:
  02e6f	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  02e72	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  02e75	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  02e78	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02e7b	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  02e7e	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  02e81	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02e84	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02e87	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  02e8b	c1 f8 05	 sar	 eax, 5
  02e8e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02e91	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02e94	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  02e98	2b c8		 sub	 ecx, eax
  02e9a	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02e9d	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02ea0	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  02ea4	33 c9		 xor	 ecx, ecx
  02ea6	75 c7		 jne	 SHORT $LN532@lzma_decod@2
  02ea8	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02eab	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  02eaf	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN544@lzma_decod@2:
  02eb2	33 c9		 xor	 ecx, ecx
  02eb4	0f 85 0c ff ff
	ff		 jne	 $LN542@lzma_decod@2

; 538  : #endif
; 539  : 			// Get rid of the highest bit that was needed for
; 540  : 			// indexing of the probability array.
; 541  : 			symbol -= DIST_SLOTS;

  02eba	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02ebd	83 ea 40	 sub	 edx, 64			; 00000040H
  02ec0	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx

; 542  : 			assert(symbol <= 63);
; 543  : 
; 544  : 			if (symbol < DIST_MODEL_START) {

  02ec3	83 7d b0 04	 cmp	 DWORD PTR _symbol$32584[ebp], 4
  02ec7	73 0b		 jae	 SHORT $LN529@lzma_decod@2

; 545  : 				// Match distances [0, 3] have only two bits.
; 546  : 				rep0 = symbol;

  02ec9	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  02ecc	89 45 e4	 mov	 DWORD PTR _rep0$32578[ebp], eax

; 547  : 			} else {

  02ecf	e9 69 0b 00 00	 jmp	 $LN1231@lzma_decod@2
$LN529@lzma_decod@2:

; 548  : 				// Decode the lowest [1, 29] bits of
; 549  : 				// the match distance.
; 550  : 				limit = (symbol >> 1) - 1;

  02ed4	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02ed7	d1 e9		 shr	 ecx, 1
  02ed9	83 e9 01	 sub	 ecx, 1
  02edc	89 4d 9c	 mov	 DWORD PTR _limit$32585[ebp], ecx

; 551  : 				assert(limit >= 1 && limit <= 30);
; 552  : 				rep0 = 2 + (symbol & 1);

  02edf	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02ee2	83 e2 01	 and	 edx, 1
  02ee5	83 c2 02	 add	 edx, 2
  02ee8	89 55 e4	 mov	 DWORD PTR _rep0$32578[ebp], edx

; 553  : 
; 554  : 				if (symbol < DIST_MODEL_END) {

  02eeb	83 7d b0 0e	 cmp	 DWORD PTR _symbol$32584[ebp], 14 ; 0000000eH
  02eef	0f 83 ad 05 00
	00		 jae	 $LN527@lzma_decod@2

; 555  : 					// Prepare to decode the low bits for
; 556  : 					// a distance of [4, 127].
; 557  : 					assert(limit <= 5);
; 558  : 					rep0 <<= limit;

  02ef5	8b 45 e4	 mov	 eax, DWORD PTR _rep0$32578[ebp]
  02ef8	8b 4d 9c	 mov	 ecx, DWORD PTR _limit$32585[ebp]
  02efb	d3 e0		 shl	 eax, cl
  02efd	89 45 e4	 mov	 DWORD PTR _rep0$32578[ebp], eax

; 559  : 					assert(rep0 <= 96);
; 560  : 					// -1 is fine, because we start
; 561  : 					// decoding at probs[1], not probs[0].
; 562  : 					// NOTE: This violates the C standard,
; 563  : 					// since we are doing pointer
; 564  : 					// arithmetic past the beginning of
; 565  : 					// the array.
; 566  : 					assert((int32_t)(rep0 - symbol - 1)
; 567  : 							>= -1);
; 568  : 					assert((int32_t)(rep0 - symbol - 1)
; 569  : 							<= 82);
; 570  : 					probs = coder->pos_special + rep0
; 571  : 							- symbol - 1;

  02f00	8b 4d e4	 mov	 ecx, DWORD PTR _rep0$32578[ebp]
  02f03	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  02f06	8d 84 4a 60 65
	00 00		 lea	 eax, DWORD PTR [edx+ecx*2+25952]
  02f0d	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02f10	d1 e1		 shl	 ecx, 1
  02f12	2b c1		 sub	 eax, ecx
  02f14	83 e8 02	 sub	 eax, 2
  02f17	89 45 ac	 mov	 DWORD PTR _probs$32583[ebp], eax

; 572  : 					symbol = 1;

  02f1a	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _symbol$32584[ebp], 1

; 573  : 					offset = 0;

  02f21	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _offset$32586[ebp], 0
$LN526@lzma_decod@2:

; 574  : 	case SEQ_DIST_MODEL:
; 575  : #ifdef HAVE_SMALL
; 576  : 					do {
; 577  : 						rc_bit(probs[symbol], ,
; 578  : 							rep0 += 1 << offset,
; 579  : 							SEQ_DIST_MODEL);
; 580  : 					} while (++offset < limit);
; 581  : #else
; 582  : 					switch (limit) {

  02f28	8b 55 9c	 mov	 edx, DWORD PTR _limit$32585[ebp]
  02f2b	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv2327[ebp], edx
  02f31	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv2327[ebp]
  02f37	83 e8 01	 sub	 eax, 1
  02f3a	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv2327[ebp], eax
  02f40	83 bd 30 ff ff
	ff 04		 cmp	 DWORD PTR tv2327[ebp], 4
  02f47	0f 87 50 05 00
	00		 ja	 $LN524@lzma_decod@2
  02f4d	8b 8d 30 ff ff
	ff		 mov	 ecx, DWORD PTR tv2327[ebp]
  02f53	ff 24 8d 00 00
	00 00		 jmp	 DWORD PTR $LN1263@lzma_decod@2[ecx*4]
$LN519@lzma_decod@2:

; 583  : 					case 5:
; 584  : 						assert(offset == 0);
; 585  : 						rc_bit(probs[symbol], ,
; 586  : 							rep0 += 1,
; 587  : 							SEQ_DIST_MODEL);

  02f5a	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  02f61	73 40		 jae	 SHORT $LN518@lzma_decod@2
  02f63	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02f66	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  02f69	75 12		 jne	 SHORT $LN515@lzma_decod@2
  02f6b	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  02f6e	c7 80 a0 6e 00
	00 2a 00 00 00	 mov	 DWORD PTR [eax+28320], 42 ; 0000002aH
  02f78	e9 18 23 00 00	 jmp	 $out$32609
$LN515@lzma_decod@2:
  02f7d	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02f80	c1 e1 08	 shl	 ecx, 8
  02f83	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02f86	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  02f89	c1 e2 08	 shl	 edx, 8
  02f8c	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  02f8f	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  02f92	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  02f95	0b d1		 or	 edx, ecx
  02f97	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  02f9a	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  02f9d	83 c2 01	 add	 edx, 1
  02fa0	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN518@lzma_decod@2:
  02fa3	33 c0		 xor	 eax, eax
  02fa5	75 b3		 jne	 SHORT $LN519@lzma_decod@2
  02fa7	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  02faa	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  02fad	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02fb0	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02fb3	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  02fb7	0f af ca	 imul	 ecx, edx
  02fba	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  02fbd	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  02fc0	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  02fc3	73 3e		 jae	 SHORT $LN509@lzma_decod@2
$LN513@lzma_decod@2:
  02fc5	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  02fc8	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  02fcb	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  02fce	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  02fd1	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  02fd5	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  02fda	2b d1		 sub	 edx, ecx
  02fdc	c1 ea 05	 shr	 edx, 5
  02fdf	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  02fe2	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  02fe5	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  02fe9	03 c2		 add	 eax, edx
  02feb	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02fee	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  02ff1	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  02ff5	33 c0		 xor	 eax, eax
  02ff7	75 cc		 jne	 SHORT $LN513@lzma_decod@2
  02ff9	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  02ffc	d1 e1		 shl	 ecx, 1
  02ffe	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  03001	eb 4c		 jmp	 SHORT $LN521@lzma_decod@2
$LN509@lzma_decod@2:
  03003	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  03006	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  03009	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0300c	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  0300f	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  03012	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  03015	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03018	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  0301b	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0301f	c1 f8 05	 sar	 eax, 5
  03022	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03025	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  03028	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  0302c	2b c8		 sub	 ecx, eax
  0302e	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03031	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  03034	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  03038	33 c9		 xor	 ecx, ecx
  0303a	75 c7		 jne	 SHORT $LN509@lzma_decod@2
  0303c	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0303f	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  03043	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  03046	8b 4d e4	 mov	 ecx, DWORD PTR _rep0$32578[ebp]
  03049	83 c1 01	 add	 ecx, 1
  0304c	89 4d e4	 mov	 DWORD PTR _rep0$32578[ebp], ecx
$LN521@lzma_decod@2:
  0304f	33 d2		 xor	 edx, edx
  03051	0f 85 03 ff ff
	ff		 jne	 $LN519@lzma_decod@2

; 588  : 						++offset;

  03057	8b 45 a4	 mov	 eax, DWORD PTR _offset$32586[ebp]
  0305a	83 c0 01	 add	 eax, 1
  0305d	89 45 a4	 mov	 DWORD PTR _offset$32586[ebp], eax

; 589  : 						--limit;

  03060	8b 4d 9c	 mov	 ecx, DWORD PTR _limit$32585[ebp]
  03063	83 e9 01	 sub	 ecx, 1
  03066	89 4d 9c	 mov	 DWORD PTR _limit$32585[ebp], ecx
$LN502@lzma_decod@2:

; 590  : 					case 4:
; 591  : 						rc_bit(probs[symbol], ,
; 592  : 							rep0 += 1 << offset,
; 593  : 							SEQ_DIST_MODEL);

  03069	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  03070	73 40		 jae	 SHORT $LN501@lzma_decod@2
  03072	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  03075	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  03078	75 12		 jne	 SHORT $LN498@lzma_decod@2
  0307a	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0307d	c7 80 a0 6e 00
	00 2a 00 00 00	 mov	 DWORD PTR [eax+28320], 42 ; 0000002aH
  03087	e9 09 22 00 00	 jmp	 $out$32609
$LN498@lzma_decod@2:
  0308c	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  0308f	c1 e1 08	 shl	 ecx, 8
  03092	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  03095	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  03098	c1 e2 08	 shl	 edx, 8
  0309b	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0309e	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  030a1	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  030a4	0b d1		 or	 edx, ecx
  030a6	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  030a9	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  030ac	83 c2 01	 add	 edx, 1
  030af	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN501@lzma_decod@2:
  030b2	33 c0		 xor	 eax, eax
  030b4	75 b3		 jne	 SHORT $LN502@lzma_decod@2
  030b6	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  030b9	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  030bc	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  030bf	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  030c2	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  030c6	0f af ca	 imul	 ecx, edx
  030c9	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  030cc	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  030cf	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  030d2	73 3e		 jae	 SHORT $LN492@lzma_decod@2
$LN496@lzma_decod@2:
  030d4	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  030d7	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  030da	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  030dd	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  030e0	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  030e4	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  030e9	2b d1		 sub	 edx, ecx
  030eb	c1 ea 05	 shr	 edx, 5
  030ee	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  030f1	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  030f4	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  030f8	03 c2		 add	 eax, edx
  030fa	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  030fd	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  03100	66 89 04 4a	 mov	 WORD PTR [edx+ecx*2], ax
  03104	33 c0		 xor	 eax, eax
  03106	75 cc		 jne	 SHORT $LN496@lzma_decod@2
  03108	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0310b	d1 e1		 shl	 ecx, 1
  0310d	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  03110	eb 53		 jmp	 SHORT $LN504@lzma_decod@2
$LN492@lzma_decod@2:
  03112	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  03115	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  03118	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0311b	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  0311e	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  03121	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  03124	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03127	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  0312a	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  0312e	c1 f8 05	 sar	 eax, 5
  03131	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03134	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  03137	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  0313b	2b c8		 sub	 ecx, eax
  0313d	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03140	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  03143	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  03147	33 c9		 xor	 ecx, ecx
  03149	75 c7		 jne	 SHORT $LN492@lzma_decod@2
  0314b	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0314e	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  03152	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  03155	ba 01 00 00 00	 mov	 edx, 1
  0315a	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  0315d	d3 e2		 shl	 edx, cl
  0315f	03 55 e4	 add	 edx, DWORD PTR _rep0$32578[ebp]
  03162	89 55 e4	 mov	 DWORD PTR _rep0$32578[ebp], edx
$LN504@lzma_decod@2:
  03165	33 c0		 xor	 eax, eax
  03167	0f 85 fc fe ff
	ff		 jne	 $LN502@lzma_decod@2

; 594  : 						++offset;

  0316d	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  03170	83 c1 01	 add	 ecx, 1
  03173	89 4d a4	 mov	 DWORD PTR _offset$32586[ebp], ecx

; 595  : 						--limit;

  03176	8b 55 9c	 mov	 edx, DWORD PTR _limit$32585[ebp]
  03179	83 ea 01	 sub	 edx, 1
  0317c	89 55 9c	 mov	 DWORD PTR _limit$32585[ebp], edx
$LN485@lzma_decod@2:

; 596  : 					case 3:
; 597  : 						rc_bit(probs[symbol], ,
; 598  : 							rep0 += 1 << offset,
; 599  : 							SEQ_DIST_MODEL);

  0317f	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  03186	73 40		 jae	 SHORT $LN484@lzma_decod@2
  03188	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0318b	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  0318e	75 12		 jne	 SHORT $LN481@lzma_decod@2
  03190	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03193	c7 81 a0 6e 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+28320], 42 ; 0000002aH
  0319d	e9 f3 20 00 00	 jmp	 $out$32609
$LN481@lzma_decod@2:
  031a2	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  031a5	c1 e2 08	 shl	 edx, 8
  031a8	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  031ab	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  031ae	c1 e0 08	 shl	 eax, 8
  031b1	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  031b4	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  031b7	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  031ba	0b c2		 or	 eax, edx
  031bc	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  031bf	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  031c2	83 c0 01	 add	 eax, 1
  031c5	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN484@lzma_decod@2:
  031c8	33 c9		 xor	 ecx, ecx
  031ca	75 b3		 jne	 SHORT $LN485@lzma_decod@2
  031cc	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  031cf	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  031d2	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  031d5	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  031d8	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  031dc	0f af d0	 imul	 edx, eax
  031df	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  031e2	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  031e5	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  031e8	73 3e		 jae	 SHORT $LN475@lzma_decod@2
$LN479@lzma_decod@2:
  031ea	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  031ed	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  031f0	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  031f3	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  031f6	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  031fa	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  031ff	2b c2		 sub	 eax, edx
  03201	c1 e8 05	 shr	 eax, 5
  03204	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03207	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  0320a	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  0320e	03 c8		 add	 ecx, eax
  03210	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03213	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  03216	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  0321a	33 c9		 xor	 ecx, ecx
  0321c	75 cc		 jne	 SHORT $LN479@lzma_decod@2
  0321e	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03221	d1 e2		 shl	 edx, 1
  03223	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  03226	eb 53		 jmp	 SHORT $LN487@lzma_decod@2
$LN475@lzma_decod@2:
  03228	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  0322b	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  0322e	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  03231	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  03234	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  03237	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  0323a	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0323d	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  03240	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  03244	c1 f9 05	 sar	 ecx, 5
  03247	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0324a	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0324d	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  03251	2b d1		 sub	 edx, ecx
  03253	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  03256	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  03259	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  0325d	33 d2		 xor	 edx, edx
  0325f	75 c7		 jne	 SHORT $LN475@lzma_decod@2
  03261	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  03264	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  03268	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  0326b	ba 01 00 00 00	 mov	 edx, 1
  03270	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  03273	d3 e2		 shl	 edx, cl
  03275	03 55 e4	 add	 edx, DWORD PTR _rep0$32578[ebp]
  03278	89 55 e4	 mov	 DWORD PTR _rep0$32578[ebp], edx
$LN487@lzma_decod@2:
  0327b	33 c0		 xor	 eax, eax
  0327d	0f 85 fc fe ff
	ff		 jne	 $LN485@lzma_decod@2

; 600  : 						++offset;

  03283	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  03286	83 c1 01	 add	 ecx, 1
  03289	89 4d a4	 mov	 DWORD PTR _offset$32586[ebp], ecx

; 601  : 						--limit;

  0328c	8b 55 9c	 mov	 edx, DWORD PTR _limit$32585[ebp]
  0328f	83 ea 01	 sub	 edx, 1
  03292	89 55 9c	 mov	 DWORD PTR _limit$32585[ebp], edx
$LN468@lzma_decod@2:

; 602  : 					case 2:
; 603  : 						rc_bit(probs[symbol], ,
; 604  : 							rep0 += 1 << offset,
; 605  : 							SEQ_DIST_MODEL);

  03295	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0329c	73 40		 jae	 SHORT $LN467@lzma_decod@2
  0329e	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  032a1	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  032a4	75 12		 jne	 SHORT $LN464@lzma_decod@2
  032a6	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  032a9	c7 81 a0 6e 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+28320], 42 ; 0000002aH
  032b3	e9 dd 1f 00 00	 jmp	 $out$32609
$LN464@lzma_decod@2:
  032b8	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  032bb	c1 e2 08	 shl	 edx, 8
  032be	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  032c1	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  032c4	c1 e0 08	 shl	 eax, 8
  032c7	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  032ca	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  032cd	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  032d0	0b c2		 or	 eax, edx
  032d2	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  032d5	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  032d8	83 c0 01	 add	 eax, 1
  032db	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN467@lzma_decod@2:
  032de	33 c9		 xor	 ecx, ecx
  032e0	75 b3		 jne	 SHORT $LN468@lzma_decod@2
  032e2	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  032e5	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  032e8	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  032eb	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  032ee	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  032f2	0f af d0	 imul	 edx, eax
  032f5	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  032f8	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  032fb	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  032fe	73 3e		 jae	 SHORT $LN458@lzma_decod@2
$LN462@lzma_decod@2:
  03300	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  03303	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  03306	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  03309	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  0330c	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  03310	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  03315	2b c2		 sub	 eax, edx
  03317	c1 e8 05	 shr	 eax, 5
  0331a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0331d	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  03320	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  03324	03 c8		 add	 ecx, eax
  03326	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03329	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0332c	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  03330	33 c9		 xor	 ecx, ecx
  03332	75 cc		 jne	 SHORT $LN462@lzma_decod@2
  03334	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03337	d1 e2		 shl	 edx, 1
  03339	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  0333c	eb 53		 jmp	 SHORT $LN470@lzma_decod@2
$LN458@lzma_decod@2:
  0333e	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  03341	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  03344	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  03347	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0334a	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0334d	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  03350	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03353	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  03356	0f b7 0c 50	 movzx	 ecx, WORD PTR [eax+edx*2]
  0335a	c1 f9 05	 sar	 ecx, 5
  0335d	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03360	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  03363	0f b7 14 50	 movzx	 edx, WORD PTR [eax+edx*2]
  03367	2b d1		 sub	 edx, ecx
  03369	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0336c	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  0336f	66 89 14 41	 mov	 WORD PTR [ecx+eax*2], dx
  03373	33 d2		 xor	 edx, edx
  03375	75 c7		 jne	 SHORT $LN458@lzma_decod@2
  03377	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0337a	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  0337e	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  03381	ba 01 00 00 00	 mov	 edx, 1
  03386	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  03389	d3 e2		 shl	 edx, cl
  0338b	03 55 e4	 add	 edx, DWORD PTR _rep0$32578[ebp]
  0338e	89 55 e4	 mov	 DWORD PTR _rep0$32578[ebp], edx
$LN470@lzma_decod@2:
  03391	33 c0		 xor	 eax, eax
  03393	0f 85 fc fe ff
	ff		 jne	 $LN468@lzma_decod@2

; 606  : 						++offset;

  03399	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  0339c	83 c1 01	 add	 ecx, 1
  0339f	89 4d a4	 mov	 DWORD PTR _offset$32586[ebp], ecx

; 607  : 						--limit;

  033a2	8b 55 9c	 mov	 edx, DWORD PTR _limit$32585[ebp]
  033a5	83 ea 01	 sub	 edx, 1
  033a8	89 55 9c	 mov	 DWORD PTR _limit$32585[ebp], edx
$LN451@lzma_decod@2:

; 608  : 					case 1:
; 609  : 						// We need "symbol" only for
; 610  : 						// indexing the probability
; 611  : 						// array, thus we can use
; 612  : 						// rc_bit_last() here to omit
; 613  : 						// the unneeded updating of
; 614  : 						// "symbol".
; 615  : 						rc_bit_last(probs[symbol], ,
; 616  : 							rep0 += 1 << offset,
; 617  : 							SEQ_DIST_MODEL);

  033ab	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  033b2	73 40		 jae	 SHORT $LN450@lzma_decod@2
  033b4	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  033b7	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  033ba	75 12		 jne	 SHORT $LN447@lzma_decod@2
  033bc	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  033bf	c7 81 a0 6e 00
	00 2a 00 00 00	 mov	 DWORD PTR [ecx+28320], 42 ; 0000002aH
  033c9	e9 c7 1e 00 00	 jmp	 $out$32609
$LN447@lzma_decod@2:
  033ce	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  033d1	c1 e2 08	 shl	 edx, 8
  033d4	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  033d7	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  033da	c1 e0 08	 shl	 eax, 8
  033dd	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  033e0	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  033e3	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  033e6	0b c2		 or	 eax, edx
  033e8	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  033eb	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  033ee	83 c0 01	 add	 eax, 1
  033f1	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN450@lzma_decod@2:
  033f4	33 c9		 xor	 ecx, ecx
  033f6	75 b3		 jne	 SHORT $LN451@lzma_decod@2
  033f8	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  033fb	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  033fe	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  03401	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  03404	0f b7 04 41	 movzx	 eax, WORD PTR [ecx+eax*2]
  03408	0f af d0	 imul	 edx, eax
  0340b	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  0340e	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  03411	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  03414	73 36		 jae	 SHORT $LN441@lzma_decod@2
$LN445@lzma_decod@2:
  03416	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  03419	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0341c	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0341f	8b 4d ac	 mov	 ecx, DWORD PTR _probs$32583[ebp]
  03422	0f b7 14 41	 movzx	 edx, WORD PTR [ecx+eax*2]
  03426	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0342b	2b c2		 sub	 eax, edx
  0342d	c1 e8 05	 shr	 eax, 5
  03430	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03433	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  03436	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  0343a	03 c8		 add	 ecx, eax
  0343c	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0343f	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  03442	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  03446	33 c9		 xor	 ecx, ecx
  03448	75 cc		 jne	 SHORT $LN445@lzma_decod@2
  0344a	eb 49		 jmp	 SHORT $LN453@lzma_decod@2
$LN441@lzma_decod@2:
  0344c	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0344f	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  03452	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  03455	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  03458	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  0345b	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0345e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03461	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  03464	0f b7 04 4a	 movzx	 eax, WORD PTR [edx+ecx*2]
  03468	c1 f8 05	 sar	 eax, 5
  0346b	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0346e	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  03471	0f b7 0c 4a	 movzx	 ecx, WORD PTR [edx+ecx*2]
  03475	2b c8		 sub	 ecx, eax
  03477	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0347a	8b 45 ac	 mov	 eax, DWORD PTR _probs$32583[ebp]
  0347d	66 89 0c 50	 mov	 WORD PTR [eax+edx*2], cx
  03481	33 c9		 xor	 ecx, ecx
  03483	75 c7		 jne	 SHORT $LN441@lzma_decod@2
  03485	ba 01 00 00 00	 mov	 edx, 1
  0348a	8b 4d a4	 mov	 ecx, DWORD PTR _offset$32586[ebp]
  0348d	d3 e2		 shl	 edx, cl
  0348f	03 55 e4	 add	 edx, DWORD PTR _rep0$32578[ebp]
  03492	89 55 e4	 mov	 DWORD PTR _rep0$32578[ebp], edx
$LN453@lzma_decod@2:
  03495	33 c0		 xor	 eax, eax
  03497	0f 85 0e ff ff
	ff		 jne	 $LN451@lzma_decod@2
$LN524@lzma_decod@2:

; 618  : 					}
; 619  : #endif
; 620  : 				} else {

  0349d	e9 9b 05 00 00	 jmp	 $LN1231@lzma_decod@2
$LN527@lzma_decod@2:

; 621  : 					// The distance is >= 128. Decode the
; 622  : 					// lower bits without probabilities
; 623  : 					// except the lowest four bits.
; 624  : 					assert(symbol >= 14);
; 625  : 					assert(limit >= 6);
; 626  : 					limit -= ALIGN_BITS;

  034a2	8b 4d 9c	 mov	 ecx, DWORD PTR _limit$32585[ebp]
  034a5	83 e9 04	 sub	 ecx, 4
  034a8	89 4d 9c	 mov	 DWORD PTR _limit$32585[ebp], ecx
$LN430@lzma_decod@2:

; 627  : 					assert(limit >= 2);
; 628  : 	case SEQ_DIRECT:
; 629  : 					// Not worth manual unrolling
; 630  : 					do {
; 631  : 						rc_direct(rep0, SEQ_DIRECT);

  034ab	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  034b2	73 40		 jae	 SHORT $LN429@lzma_decod@2
  034b4	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  034b7	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  034ba	75 12		 jne	 SHORT $LN426@lzma_decod@2
  034bc	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  034bf	c7 80 a0 6e 00
	00 2b 00 00 00	 mov	 DWORD PTR [eax+28320], 43 ; 0000002bH
  034c9	e9 c7 1d 00 00	 jmp	 $out$32609
$LN426@lzma_decod@2:
  034ce	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  034d1	c1 e1 08	 shl	 ecx, 8
  034d4	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  034d7	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  034da	c1 e2 08	 shl	 edx, 8
  034dd	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  034e0	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  034e3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  034e6	0b d1		 or	 edx, ecx
  034e8	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  034eb	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  034ee	83 c2 01	 add	 edx, 1
  034f1	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN429@lzma_decod@2:
  034f4	33 c0		 xor	 eax, eax
  034f6	75 b3		 jne	 SHORT $LN430@lzma_decod@2
  034f8	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  034fb	d1 e9		 shr	 ecx, 1
  034fd	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  03500	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  03503	2b 55 e8	 sub	 edx, DWORD PTR _rc$32574[ebp]
  03506	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  03509	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  0350c	c1 e8 1f	 shr	 eax, 31			; 0000001fH
  0350f	33 c9		 xor	 ecx, ecx
  03511	2b c8		 sub	 ecx, eax
  03513	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  03516	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  03519	23 55 c0	 and	 edx, DWORD PTR _rc_bound$32576[ebp]
  0351c	03 55 ec	 add	 edx, DWORD PTR _rc$32574[ebp+4]
  0351f	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  03522	8b 45 e4	 mov	 eax, DWORD PTR _rep0$32578[ebp]
  03525	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  03528	8d 54 41 01	 lea	 edx, DWORD PTR [ecx+eax*2+1]
  0352c	89 55 e4	 mov	 DWORD PTR _rep0$32578[ebp], edx
  0352f	33 c0		 xor	 eax, eax
  03531	0f 85 74 ff ff
	ff		 jne	 $LN430@lzma_decod@2

; 632  : 					} while (--limit > 0);

  03537	8b 4d 9c	 mov	 ecx, DWORD PTR _limit$32585[ebp]
  0353a	83 e9 01	 sub	 ecx, 1
  0353d	89 4d 9c	 mov	 DWORD PTR _limit$32585[ebp], ecx
  03540	0f 85 65 ff ff
	ff		 jne	 $LN430@lzma_decod@2

; 633  : 
; 634  : 					// Decode the lowest four bits using
; 635  : 					// probabilities.
; 636  : 					rep0 <<= ALIGN_BITS;

  03546	8b 55 e4	 mov	 edx, DWORD PTR _rep0$32578[ebp]
  03549	c1 e2 04	 shl	 edx, 4
  0354c	89 55 e4	 mov	 DWORD PTR _rep0$32578[ebp], edx

; 637  : 					symbol = 1;

  0354f	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _symbol$32584[ebp], 1
$LN421@lzma_decod@2:

; 638  : #ifdef HAVE_SMALL
; 639  : 					offset = 0;
; 640  : 	case SEQ_ALIGN:
; 641  : 					do {
; 642  : 						rc_bit(coder->pos_align[
; 643  : 								symbol], ,
; 644  : 							rep0 += 1 << offset,
; 645  : 							SEQ_ALIGN);
; 646  : 					} while (++offset < ALIGN_BITS);
; 647  : #else
; 648  : 	case SEQ_ALIGN0:
; 649  : 					rc_bit(coder->pos_align[symbol], ,
; 650  : 							rep0 += 1, SEQ_ALIGN0);

  03556	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0355d	73 40		 jae	 SHORT $LN420@lzma_decod@2
  0355f	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  03562	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  03565	75 12		 jne	 SHORT $LN417@lzma_decod@2
  03567	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0356a	c7 81 a0 6e 00
	00 2c 00 00 00	 mov	 DWORD PTR [ecx+28320], 44 ; 0000002cH
  03574	e9 1c 1d 00 00	 jmp	 $out$32609
$LN417@lzma_decod@2:
  03579	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0357c	c1 e2 08	 shl	 edx, 8
  0357f	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  03582	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  03585	c1 e0 08	 shl	 eax, 8
  03588	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  0358b	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  0358e	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  03591	0b c2		 or	 eax, edx
  03593	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  03596	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  03599	83 c0 01	 add	 eax, 1
  0359c	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN420@lzma_decod@2:
  0359f	33 c9		 xor	 ecx, ecx
  035a1	75 b3		 jne	 SHORT $LN421@lzma_decod@2
  035a3	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  035a6	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  035a9	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  035ac	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  035af	0f b7 84 41 44
	66 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26180]
  035b7	0f af d0	 imul	 edx, eax
  035ba	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  035bd	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  035c0	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  035c3	73 4a		 jae	 SHORT $LN411@lzma_decod@2
$LN415@lzma_decod@2:
  035c5	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  035c8	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  035cb	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  035ce	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  035d1	0f b7 94 41 44
	66 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+26180]
  035d9	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  035de	2b c2		 sub	 eax, edx
  035e0	c1 e8 05	 shr	 eax, 5
  035e3	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  035e6	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  035e9	0f b7 8c 4a 44
	66 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26180]
  035f1	03 c8		 add	 ecx, eax
  035f3	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  035f6	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  035f9	66 89 8c 50 44
	66 00 00	 mov	 WORD PTR [eax+edx*2+26180], cx
  03601	33 c9		 xor	 ecx, ecx
  03603	75 c0		 jne	 SHORT $LN415@lzma_decod@2
  03605	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03608	d1 e2		 shl	 edx, 1
  0360a	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  0360d	eb 58		 jmp	 SHORT $LN423@lzma_decod@2
$LN411@lzma_decod@2:
  0360f	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  03612	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  03615	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  03618	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0361b	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0361e	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  03621	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03624	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03627	0f b7 8c 50 44
	66 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+26180]
  0362f	c1 f9 05	 sar	 ecx, 5
  03632	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03635	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03638	0f b7 94 50 44
	66 00 00	 movzx	 edx, WORD PTR [eax+edx*2+26180]
  03640	2b d1		 sub	 edx, ecx
  03642	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  03645	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03648	66 89 94 41 44
	66 00 00	 mov	 WORD PTR [ecx+eax*2+26180], dx
  03650	33 d2		 xor	 edx, edx
  03652	75 bb		 jne	 SHORT $LN411@lzma_decod@2
  03654	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  03657	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  0365b	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  0365e	8b 55 e4	 mov	 edx, DWORD PTR _rep0$32578[ebp]
  03661	83 c2 01	 add	 edx, 1
  03664	89 55 e4	 mov	 DWORD PTR _rep0$32578[ebp], edx
$LN423@lzma_decod@2:
  03667	33 c0		 xor	 eax, eax
  03669	0f 85 e7 fe ff
	ff		 jne	 $LN421@lzma_decod@2
$LN404@lzma_decod@2:

; 651  : 	case SEQ_ALIGN1:
; 652  : 					rc_bit(coder->pos_align[symbol], ,
; 653  : 							rep0 += 2, SEQ_ALIGN1);

  0366f	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  03676	73 40		 jae	 SHORT $LN403@lzma_decod@2
  03678	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  0367b	3b 4d 18	 cmp	 ecx, DWORD PTR _in_size$[ebp]
  0367e	75 12		 jne	 SHORT $LN400@lzma_decod@2
  03680	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03683	c7 82 a0 6e 00
	00 2d 00 00 00	 mov	 DWORD PTR [edx+28320], 45 ; 0000002dH
  0368d	e9 03 1c 00 00	 jmp	 $out$32609
$LN400@lzma_decod@2:
  03692	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  03695	c1 e0 08	 shl	 eax, 8
  03698	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  0369b	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0369e	c1 e1 08	 shl	 ecx, 8
  036a1	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  036a4	03 55 c8	 add	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  036a7	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  036aa	0b c8		 or	 ecx, eax
  036ac	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  036af	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  036b2	83 c1 01	 add	 ecx, 1
  036b5	89 4d c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], ecx
$LN403@lzma_decod@2:
  036b8	33 d2		 xor	 edx, edx
  036ba	75 b3		 jne	 SHORT $LN404@lzma_decod@2
  036bc	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  036bf	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  036c2	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  036c5	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  036c8	0f b7 8c 4a 44
	66 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26180]
  036d0	0f af c1	 imul	 eax, ecx
  036d3	89 45 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], eax
  036d6	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  036d9	3b 55 c0	 cmp	 edx, DWORD PTR _rc_bound$32576[ebp]
  036dc	73 4a		 jae	 SHORT $LN394@lzma_decod@2
$LN398@lzma_decod@2:
  036de	8b 45 c0	 mov	 eax, DWORD PTR _rc_bound$32576[ebp]
  036e1	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  036e4	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  036e7	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  036ea	0f b7 84 4a 44
	66 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+26180]
  036f2	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  036f7	2b c8		 sub	 ecx, eax
  036f9	c1 e9 05	 shr	 ecx, 5
  036fc	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  036ff	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03702	0f b7 94 50 44
	66 00 00	 movzx	 edx, WORD PTR [eax+edx*2+26180]
  0370a	03 d1		 add	 edx, ecx
  0370c	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0370f	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03712	66 89 94 41 44
	66 00 00	 mov	 WORD PTR [ecx+eax*2+26180], dx
  0371a	33 d2		 xor	 edx, edx
  0371c	75 c0		 jne	 SHORT $LN398@lzma_decod@2
  0371e	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  03721	d1 e0		 shl	 eax, 1
  03723	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  03726	eb 58		 jmp	 SHORT $LN406@lzma_decod@2
$LN394@lzma_decod@2:
  03728	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  0372b	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0372e	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  03731	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  03734	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  03737	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  0373a	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0373d	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03740	0f b7 94 41 44
	66 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+26180]
  03748	c1 fa 05	 sar	 edx, 5
  0374b	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0374e	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03751	0f b7 84 41 44
	66 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26180]
  03759	2b c2		 sub	 eax, edx
  0375b	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0375e	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03761	66 89 84 4a 44
	66 00 00	 mov	 WORD PTR [edx+ecx*2+26180], ax
  03769	33 c0		 xor	 eax, eax
  0376b	75 bb		 jne	 SHORT $LN394@lzma_decod@2
  0376d	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03770	8d 54 09 01	 lea	 edx, DWORD PTR [ecx+ecx+1]
  03774	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  03777	8b 45 e4	 mov	 eax, DWORD PTR _rep0$32578[ebp]
  0377a	83 c0 02	 add	 eax, 2
  0377d	89 45 e4	 mov	 DWORD PTR _rep0$32578[ebp], eax
$LN406@lzma_decod@2:
  03780	33 c9		 xor	 ecx, ecx
  03782	0f 85 e7 fe ff
	ff		 jne	 $LN404@lzma_decod@2
$LN387@lzma_decod@2:

; 654  : 	case SEQ_ALIGN2:
; 655  : 					rc_bit(coder->pos_align[symbol], ,
; 656  : 							rep0 += 4, SEQ_ALIGN2);

  03788	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0378f	73 40		 jae	 SHORT $LN386@lzma_decod@2
  03791	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  03794	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  03797	75 12		 jne	 SHORT $LN383@lzma_decod@2
  03799	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0379c	c7 80 a0 6e 00
	00 2e 00 00 00	 mov	 DWORD PTR [eax+28320], 46 ; 0000002eH
  037a6	e9 ea 1a 00 00	 jmp	 $out$32609
$LN383@lzma_decod@2:
  037ab	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  037ae	c1 e1 08	 shl	 ecx, 8
  037b1	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  037b4	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  037b7	c1 e2 08	 shl	 edx, 8
  037ba	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  037bd	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  037c0	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  037c3	0b d1		 or	 edx, ecx
  037c5	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  037c8	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  037cb	83 c2 01	 add	 edx, 1
  037ce	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN386@lzma_decod@2:
  037d1	33 c0		 xor	 eax, eax
  037d3	75 b3		 jne	 SHORT $LN387@lzma_decod@2
  037d5	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  037d8	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  037db	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  037de	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  037e1	0f b7 94 50 44
	66 00 00	 movzx	 edx, WORD PTR [eax+edx*2+26180]
  037e9	0f af ca	 imul	 ecx, edx
  037ec	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  037ef	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  037f2	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  037f5	73 4a		 jae	 SHORT $LN377@lzma_decod@2
$LN381@lzma_decod@2:
  037f7	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  037fa	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  037fd	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03800	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03803	0f b7 8c 50 44
	66 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+26180]
  0380b	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  03810	2b d1		 sub	 edx, ecx
  03812	c1 ea 05	 shr	 edx, 5
  03815	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  03818	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0381b	0f b7 84 41 44
	66 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26180]
  03823	03 c2		 add	 eax, edx
  03825	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03828	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0382b	66 89 84 4a 44
	66 00 00	 mov	 WORD PTR [edx+ecx*2+26180], ax
  03833	33 c0		 xor	 eax, eax
  03835	75 c0		 jne	 SHORT $LN381@lzma_decod@2
  03837	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0383a	d1 e1		 shl	 ecx, 1
  0383c	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  0383f	eb 58		 jmp	 SHORT $LN389@lzma_decod@2
$LN377@lzma_decod@2:
  03841	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  03844	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  03847	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0384a	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  0384d	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  03850	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  03853	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03856	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03859	0f b7 84 4a 44
	66 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+26180]
  03861	c1 f8 05	 sar	 eax, 5
  03864	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03867	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0386a	0f b7 8c 4a 44
	66 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26180]
  03872	2b c8		 sub	 ecx, eax
  03874	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03877	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0387a	66 89 8c 50 44
	66 00 00	 mov	 WORD PTR [eax+edx*2+26180], cx
  03882	33 c9		 xor	 ecx, ecx
  03884	75 bb		 jne	 SHORT $LN377@lzma_decod@2
  03886	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03889	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  0388d	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  03890	8b 4d e4	 mov	 ecx, DWORD PTR _rep0$32578[ebp]
  03893	83 c1 04	 add	 ecx, 4
  03896	89 4d e4	 mov	 DWORD PTR _rep0$32578[ebp], ecx
$LN389@lzma_decod@2:
  03899	33 d2		 xor	 edx, edx
  0389b	0f 85 e7 fe ff
	ff		 jne	 $LN387@lzma_decod@2
$LN370@lzma_decod@2:

; 657  : 	case SEQ_ALIGN3:
; 658  : 					// Like in SEQ_DIST_MODEL, we don't
; 659  : 					// need "symbol" for anything else
; 660  : 					// than indexing the probability array.
; 661  : 					rc_bit_last(coder->pos_align[symbol], ,
; 662  : 							rep0 += 8, SEQ_ALIGN3);

  038a1	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  038a8	73 40		 jae	 SHORT $LN369@lzma_decod@2
  038aa	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  038ad	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  038b0	75 12		 jne	 SHORT $LN366@lzma_decod@2
  038b2	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  038b5	c7 81 a0 6e 00
	00 2f 00 00 00	 mov	 DWORD PTR [ecx+28320], 47 ; 0000002fH
  038bf	e9 d1 19 00 00	 jmp	 $out$32609
$LN366@lzma_decod@2:
  038c4	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  038c7	c1 e2 08	 shl	 edx, 8
  038ca	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  038cd	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  038d0	c1 e0 08	 shl	 eax, 8
  038d3	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  038d6	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  038d9	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  038dc	0b c2		 or	 eax, edx
  038de	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  038e1	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  038e4	83 c0 01	 add	 eax, 1
  038e7	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN369@lzma_decod@2:
  038ea	33 c9		 xor	 ecx, ecx
  038ec	75 b3		 jne	 SHORT $LN370@lzma_decod@2
  038ee	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  038f1	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  038f4	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  038f7	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  038fa	0f b7 84 41 44
	66 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+26180]
  03902	0f af d0	 imul	 edx, eax
  03905	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  03908	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0390b	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0390e	73 42		 jae	 SHORT $LN360@lzma_decod@2
$LN364@lzma_decod@2:
  03910	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  03913	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  03916	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  03919	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0391c	0f b7 94 41 44
	66 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+26180]
  03924	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  03929	2b c2		 sub	 eax, edx
  0392b	c1 e8 05	 shr	 eax, 5
  0392e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03931	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03934	0f b7 8c 4a 44
	66 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26180]
  0393c	03 c8		 add	 ecx, eax
  0393e	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03941	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03944	66 89 8c 50 44
	66 00 00	 mov	 WORD PTR [eax+edx*2+26180], cx
  0394c	33 c9		 xor	 ecx, ecx
  0394e	75 c0		 jne	 SHORT $LN364@lzma_decod@2
  03950	eb 4e		 jmp	 SHORT $LN372@lzma_decod@2
$LN360@lzma_decod@2:
  03952	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  03955	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  03958	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0395b	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  0395e	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  03961	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  03964	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03967	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0396a	0f b7 84 4a 44
	66 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+26180]
  03972	c1 f8 05	 sar	 eax, 5
  03975	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  03978	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0397b	0f b7 8c 4a 44
	66 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+26180]
  03983	2b c8		 sub	 ecx, eax
  03985	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  03988	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0398b	66 89 8c 50 44
	66 00 00	 mov	 WORD PTR [eax+edx*2+26180], cx
  03993	33 c9		 xor	 ecx, ecx
  03995	75 bb		 jne	 SHORT $LN360@lzma_decod@2
  03997	8b 55 e4	 mov	 edx, DWORD PTR _rep0$32578[ebp]
  0399a	83 c2 08	 add	 edx, 8
  0399d	89 55 e4	 mov	 DWORD PTR _rep0$32578[ebp], edx
$LN372@lzma_decod@2:
  039a0	33 c0		 xor	 eax, eax
  039a2	0f 85 f9 fe ff
	ff		 jne	 $LN370@lzma_decod@2

; 663  : #endif
; 664  : 
; 665  : 					if (rep0 == UINT32_MAX) {

  039a8	83 7d e4 ff	 cmp	 DWORD PTR _rep0$32578[ebp], -1
  039ac	0f 85 8b 00 00
	00		 jne	 $LN1231@lzma_decod@2

; 666  : 						// End of payload marker was
; 667  : 						// found. It must not be
; 668  : 						// present if uncompressed
; 669  : 						// size is known.
; 670  : 						if (coder->uncompressed_size
; 671  : 						!= LZMA_VLI_UNKNOWN) {

  039b2	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  039b5	89 8d 2c ff ff
	ff		 mov	 DWORD PTR tv5918[ebp], ecx
  039bb	8b 95 2c ff ff
	ff		 mov	 edx, DWORD PTR tv5918[ebp]
  039c1	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR tv5918[ebp]
  039c7	8b 8a 98 6e 00
	00		 mov	 ecx, DWORD PTR [edx+28312]
  039cd	23 88 9c 6e 00
	00		 and	 ecx, DWORD PTR [eax+28316]
  039d3	83 f9 ff	 cmp	 ecx, -1
  039d6	74 0c		 je	 SHORT $LN354@lzma_decod@2

; 672  : 							ret = LZMA_DATA_ERROR;

  039d8	c7 45 90 09 00
	00 00		 mov	 DWORD PTR _ret$32591[ebp], 9

; 673  : 							goto out;

  039df	e9 b1 18 00 00	 jmp	 $out$32609
$LN354@lzma_decod@2:

; 674  : 						}
; 675  : 
; 676  : 	case SEQ_EOPM:
; 677  : 						// LZMA1 stream with
; 678  : 						// end-of-payload marker.
; 679  : 						rc_normalize(SEQ_EOPM);

  039e4	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  039eb	73 40		 jae	 SHORT $LN353@lzma_decod@2
  039ed	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  039f0	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  039f3	75 12		 jne	 SHORT $LN350@lzma_decod@2
  039f5	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  039f8	c7 80 a0 6e 00
	00 30 00 00 00	 mov	 DWORD PTR [eax+28320], 48 ; 00000030H
  03a02	e9 8e 18 00 00	 jmp	 $out$32609
$LN350@lzma_decod@2:
  03a07	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  03a0a	c1 e1 08	 shl	 ecx, 8
  03a0d	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  03a10	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  03a13	c1 e2 08	 shl	 edx, 8
  03a16	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  03a19	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  03a1c	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  03a1f	0b d1		 or	 edx, ecx
  03a21	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  03a24	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  03a27	83 c2 01	 add	 edx, 1
  03a2a	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN353@lzma_decod@2:
  03a2d	33 c0		 xor	 eax, eax
  03a2f	75 b3		 jne	 SHORT $LN354@lzma_decod@2

; 680  : 						ret = LZMA_STREAM_END;

  03a31	c7 45 90 01 00
	00 00		 mov	 DWORD PTR _ret$32591[ebp], 1

; 681  : 						goto out;

  03a38	e9 58 18 00 00	 jmp	 $out$32609

; 682  : 					}
; 683  : 				}
; 684  : 			}
; 685  : 
; 686  : 			// Validate the distance we just decoded.
; 687  : 			if (unlikely(!dict_is_distance_valid(&dict, rep0))) {

$LN1231@lzma_decod@2:
  03a3d	8b 4d d4	 mov	 ecx, DWORD PTR _dict$32572[ebp+8]
  03a40	39 4d e4	 cmp	 DWORD PTR _rep0$32578[ebp], ecx
  03a43	1b d2		 sbb	 edx, edx
  03a45	f7 da		 neg	 edx
  03a47	0f b6 c2	 movzx	 eax, dl
  03a4a	85 c0		 test	 eax, eax
  03a4c	75 0c		 jne	 SHORT $LN349@lzma_decod@2

; 688  : 				ret = LZMA_DATA_ERROR;

  03a4e	c7 45 90 09 00
	00 00		 mov	 DWORD PTR _ret$32591[ebp], 9

; 689  : 				goto out;

  03a55	e9 3b 18 00 00	 jmp	 $out$32609
$LN349@lzma_decod@2:

; 690  : 			}
; 691  : 
; 692  : 		} else {

  03a5a	e9 b0 17 00 00	 jmp	 $LN17@lzma_decod@2
$LN347@lzma_decod@2:

; 693  : 			rc_update_1(coder->is_rep[state]);

  03a5f	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  03a62	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  03a65	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  03a68	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  03a6b	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  03a6e	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  03a71	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03a74	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03a77	0f b7 94 41 80
	61 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+24960]
  03a7f	c1 fa 05	 sar	 edx, 5
  03a82	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03a85	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03a88	0f b7 84 41 80
	61 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+24960]
  03a90	2b c2		 sub	 eax, edx
  03a92	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  03a95	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03a98	66 89 84 4a 80
	61 00 00	 mov	 WORD PTR [edx+ecx*2+24960], ax
  03aa0	33 c0		 xor	 eax, eax
  03aa2	75 bb		 jne	 SHORT $LN347@lzma_decod@2

; 694  : 
; 695  : 			// Repeated match
; 696  : 			//
; 697  : 			// The match distance is a value that we have had
; 698  : 			// earlier. The latest four match distances are
; 699  : 			// available as rep0, rep1, rep2 and rep3. We will
; 700  : 			// now decode which of them is the new distance.
; 701  : 			//
; 702  : 			// There cannot be a match if we haven't produced
; 703  : 			// any output, so check that first.
; 704  : 			if (unlikely(!dict_is_distance_valid(&dict, 0))) {

  03aa4	33 c9		 xor	 ecx, ecx
  03aa6	3b 4d d4	 cmp	 ecx, DWORD PTR _dict$32572[ebp+8]
  03aa9	1b d2		 sbb	 edx, edx
  03aab	f7 da		 neg	 edx
  03aad	0f b6 c2	 movzx	 eax, dl
  03ab0	85 c0		 test	 eax, eax
  03ab2	75 0c		 jne	 SHORT $LN342@lzma_decod@2

; 705  : 				ret = LZMA_DATA_ERROR;

  03ab4	c7 45 90 09 00
	00 00		 mov	 DWORD PTR _ret$32591[ebp], 9

; 706  : 				goto out;

  03abb	e9 d5 17 00 00	 jmp	 $out$32609
$LN342@lzma_decod@2:

; 707  : 			}
; 708  : 
; 709  : 	case SEQ_IS_REP0:
; 710  : 			rc_if_0(coder->is_rep0[state], SEQ_IS_REP0) {

  03ac0	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  03ac7	73 40		 jae	 SHORT $LN341@lzma_decod@2
  03ac9	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  03acc	3b 4d 18	 cmp	 ecx, DWORD PTR _in_size$[ebp]
  03acf	75 12		 jne	 SHORT $LN338@lzma_decod@2
  03ad1	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03ad4	c7 82 a0 6e 00
	00 31 00 00 00	 mov	 DWORD PTR [edx+28320], 49 ; 00000031H
  03ade	e9 b2 17 00 00	 jmp	 $out$32609
$LN338@lzma_decod@2:
  03ae3	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  03ae6	c1 e0 08	 shl	 eax, 8
  03ae9	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  03aec	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  03aef	c1 e1 08	 shl	 ecx, 8
  03af2	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  03af5	03 55 c8	 add	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  03af8	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  03afb	0b c8		 or	 ecx, eax
  03afd	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  03b00	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  03b03	83 c1 01	 add	 ecx, 1
  03b06	89 4d c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], ecx
$LN341@lzma_decod@2:
  03b09	33 d2		 xor	 edx, edx
  03b0b	75 b3		 jne	 SHORT $LN342@lzma_decod@2
  03b0d	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  03b10	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  03b13	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  03b16	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03b19	0f b7 8c 4a 98
	61 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+24984]
  03b21	0f af c1	 imul	 eax, ecx
  03b24	89 45 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], eax
  03b27	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  03b2a	3b 55 c0	 cmp	 edx, DWORD PTR _rc_bound$32576[ebp]
  03b2d	0f 83 f6 01 00
	00		 jae	 $LN317@lzma_decod@2
$LN336@lzma_decod@2:

; 711  : 				rc_update_0(coder->is_rep0[state]);

  03b33	8b 45 c0	 mov	 eax, DWORD PTR _rc_bound$32576[ebp]
  03b36	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  03b39	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  03b3c	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03b3f	0f b7 84 4a 98
	61 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+24984]
  03b47	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  03b4c	2b c8		 sub	 ecx, eax
  03b4e	c1 e9 05	 shr	 ecx, 5
  03b51	8b 55 b4	 mov	 edx, DWORD PTR _state$32577[ebp]
  03b54	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03b57	0f b7 94 50 98
	61 00 00	 movzx	 edx, WORD PTR [eax+edx*2+24984]
  03b5f	03 d1		 add	 edx, ecx
  03b61	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03b64	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03b67	66 89 94 41 98
	61 00 00	 mov	 WORD PTR [ecx+eax*2+24984], dx
  03b6f	33 d2		 xor	 edx, edx
  03b71	75 c0		 jne	 SHORT $LN336@lzma_decod@2
$LN332@lzma_decod@2:

; 712  : 				// The distance is rep0.
; 713  : 
; 714  : 	case SEQ_IS_REP0_LONG:
; 715  : 				rc_if_0(coder->is_rep0_long[state][pos_state],
; 716  : 						SEQ_IS_REP0_LONG) {

  03b73	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  03b7a	73 40		 jae	 SHORT $LN331@lzma_decod@2
  03b7c	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  03b7f	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  03b82	75 12		 jne	 SHORT $LN328@lzma_decod@2
  03b84	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03b87	c7 81 a0 6e 00
	00 33 00 00 00	 mov	 DWORD PTR [ecx+28320], 51 ; 00000033H
  03b91	e9 ff 16 00 00	 jmp	 $out$32609
$LN328@lzma_decod@2:
  03b96	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  03b99	c1 e2 08	 shl	 edx, 8
  03b9c	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  03b9f	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  03ba2	c1 e0 08	 shl	 eax, 8
  03ba5	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  03ba8	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  03bab	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  03bae	0b c2		 or	 eax, edx
  03bb0	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  03bb3	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  03bb6	83 c0 01	 add	 eax, 1
  03bb9	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN331@lzma_decod@2:
  03bbc	33 c9		 xor	 ecx, ecx
  03bbe	75 b3		 jne	 SHORT $LN332@lzma_decod@2
  03bc0	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  03bc3	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  03bc6	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03bc9	c1 e0 05	 shl	 eax, 5
  03bcc	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03bcf	8d 84 01 e0 61
	00 00		 lea	 eax, DWORD PTR [ecx+eax+25056]
  03bd6	8b 4d 98	 mov	 ecx, DWORD PTR _pos_state$32590[ebp]
  03bd9	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  03bdd	0f af d0	 imul	 edx, eax
  03be0	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  03be3	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  03be6	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  03be9	0f 83 d5 00 00
	00		 jae	 $LN321@lzma_decod@2
$LN326@lzma_decod@2:

; 717  : 					rc_update_0(coder->is_rep0_long[
; 718  : 							state][pos_state]);

  03bef	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  03bf2	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  03bf5	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03bf8	c1 e0 05	 shl	 eax, 5
  03bfb	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03bfe	8d 94 01 e0 61
	00 00		 lea	 edx, DWORD PTR [ecx+eax+25056]
  03c05	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03c08	c1 e0 05	 shl	 eax, 5
  03c0b	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03c0e	8d 84 01 e0 61
	00 00		 lea	 eax, DWORD PTR [ecx+eax+25056]
  03c15	8b 4d 98	 mov	 ecx, DWORD PTR _pos_state$32590[ebp]
  03c18	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  03c1c	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  03c21	2b c8		 sub	 ecx, eax
  03c23	c1 e9 05	 shr	 ecx, 5
  03c26	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  03c29	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  03c2d	03 d1		 add	 edx, ecx
  03c2f	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03c32	c1 e0 05	 shl	 eax, 5
  03c35	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03c38	8d 84 01 e0 61
	00 00		 lea	 eax, DWORD PTR [ecx+eax+25056]
  03c3f	8b 4d 98	 mov	 ecx, DWORD PTR _pos_state$32590[ebp]
  03c42	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  03c46	33 d2		 xor	 edx, edx
  03c48	75 a5		 jne	 SHORT $LN326@lzma_decod@2

; 719  : 
; 720  : 					update_short_rep(state);

  03c4a	83 7d b4 07	 cmp	 DWORD PTR _state$32577[ebp], 7
  03c4e	1b c0		 sbb	 eax, eax
  03c50	83 e0 fe	 and	 eax, -2			; fffffffeH
  03c53	83 c0 0b	 add	 eax, 11			; 0000000bH
  03c56	89 45 b4	 mov	 DWORD PTR _state$32577[ebp], eax
$LN323@lzma_decod@2:

; 721  : 
; 722  : 	case SEQ_SHORTREP:
; 723  : 					if (unlikely(dict_put(&dict, dict_get(
; 724  : 							&dict, rep0)))) {

  03c59	8b 4d e4	 mov	 ecx, DWORD PTR _rep0$32578[ebp]
  03c5c	3b 4d d0	 cmp	 ecx, DWORD PTR _dict$32572[ebp+4]
  03c5f	73 0c		 jae	 SHORT $LN1237@lzma_decod@2
  03c61	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv4093[ebp], 0
  03c6b	eb 09		 jmp	 SHORT $LN1238@lzma_decod@2
$LN1237@lzma_decod@2:
  03c6d	8b 55 dc	 mov	 edx, DWORD PTR _dict$32572[ebp+16]
  03c70	89 95 28 ff ff
	ff		 mov	 DWORD PTR tv4093[ebp], edx
$LN1238@lzma_decod@2:
  03c76	8b 45 d0	 mov	 eax, DWORD PTR _dict$32572[ebp+4]
  03c79	2b 45 e4	 sub	 eax, DWORD PTR _rep0$32578[ebp]
  03c7c	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR tv4093[ebp]
  03c82	8d 54 08 ff	 lea	 edx, DWORD PTR [eax+ecx-1]
  03c86	8b 45 cc	 mov	 eax, DWORD PTR _dict$32572[ebp]
  03c89	8a 0c 10	 mov	 cl, BYTE PTR [eax+edx]
  03c8c	88 8d 6d ff ff
	ff		 mov	 BYTE PTR $T36002[ebp], cl
  03c92	0f b6 95 6d ff
	ff ff		 movzx	 edx, BYTE PTR $T36002[ebp]
  03c99	52		 push	 edx
  03c9a	8d 45 cc	 lea	 eax, DWORD PTR _dict$32572[ebp]
  03c9d	50		 push	 eax
  03c9e	e8 00 00 00 00	 call	 _dict_put
  03ca3	83 c4 08	 add	 esp, 8
  03ca6	0f b6 c8	 movzx	 ecx, al
  03ca9	85 c9		 test	 ecx, ecx
  03cab	74 12		 je	 SHORT $LN322@lzma_decod@2

; 725  : 						coder->sequence = SEQ_SHORTREP;

  03cad	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03cb0	c7 82 a0 6e 00
	00 32 00 00 00	 mov	 DWORD PTR [edx+28320], 50 ; 00000032H

; 726  : 						goto out;

  03cba	e9 d6 15 00 00	 jmp	 $out$32609
$LN322@lzma_decod@2:

; 727  : 					}
; 728  : 
; 729  : 					continue;

  03cbf	e9 c8 c5 ff ff	 jmp	 $LN1202@lzma_decod@2
$LN321@lzma_decod@2:

; 730  : 				}
; 731  : 
; 732  : 				// Repeating more than one byte at
; 733  : 				// distance of rep0.
; 734  : 				rc_update_1(coder->is_rep0_long[
; 735  : 						state][pos_state]);

  03cc4	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  03cc7	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  03cca	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  03ccd	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  03cd0	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  03cd3	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  03cd6	8b 55 b4	 mov	 edx, DWORD PTR _state$32577[ebp]
  03cd9	c1 e2 05	 shl	 edx, 5
  03cdc	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03cdf	8d 8c 10 e0 61
	00 00		 lea	 ecx, DWORD PTR [eax+edx+25056]
  03ce6	8b 55 b4	 mov	 edx, DWORD PTR _state$32577[ebp]
  03ce9	c1 e2 05	 shl	 edx, 5
  03cec	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03cef	8d 94 10 e0 61
	00 00		 lea	 edx, DWORD PTR [eax+edx+25056]
  03cf6	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  03cf9	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  03cfd	c1 fa 05	 sar	 edx, 5
  03d00	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  03d03	0f b7 0c 41	 movzx	 ecx, WORD PTR [ecx+eax*2]
  03d07	2b ca		 sub	 ecx, edx
  03d09	8b 55 b4	 mov	 edx, DWORD PTR _state$32577[ebp]
  03d0c	c1 e2 05	 shl	 edx, 5
  03d0f	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03d12	8d 94 10 e0 61
	00 00		 lea	 edx, DWORD PTR [eax+edx+25056]
  03d19	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  03d1c	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  03d20	33 c9		 xor	 ecx, ecx
  03d22	75 a0		 jne	 SHORT $LN321@lzma_decod@2

; 736  : 
; 737  : 			} else {

  03d24	e9 8e 02 00 00	 jmp	 $LN318@lzma_decod@2
$LN317@lzma_decod@2:

; 738  : 				rc_update_1(coder->is_rep0[state]);

  03d29	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  03d2c	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  03d2f	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  03d32	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  03d35	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  03d38	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  03d3b	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  03d3e	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03d41	0f b7 84 4a 98
	61 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+24984]
  03d49	c1 f8 05	 sar	 eax, 5
  03d4c	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  03d4f	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03d52	0f b7 8c 4a 98
	61 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+24984]
  03d5a	2b c8		 sub	 ecx, eax
  03d5c	8b 55 b4	 mov	 edx, DWORD PTR _state$32577[ebp]
  03d5f	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03d62	66 89 8c 50 98
	61 00 00	 mov	 WORD PTR [eax+edx*2+24984], cx
  03d6a	33 c9		 xor	 ecx, ecx
  03d6c	75 bb		 jne	 SHORT $LN317@lzma_decod@2
$LN313@lzma_decod@2:

; 739  : 
; 740  : 	case SEQ_IS_REP1:
; 741  : 				// The distance is rep1, rep2 or rep3. Once
; 742  : 				// we find out which one of these three, it
; 743  : 				// is stored to rep0 and rep1, rep2 and rep3
; 744  : 				// are updated accordingly.
; 745  : 				rc_if_0(coder->is_rep1[state], SEQ_IS_REP1) {

  03d6e	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  03d75	73 40		 jae	 SHORT $LN312@lzma_decod@2
  03d77	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  03d7a	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  03d7d	75 12		 jne	 SHORT $LN309@lzma_decod@2
  03d7f	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03d82	c7 80 a0 6e 00
	00 34 00 00 00	 mov	 DWORD PTR [eax+28320], 52 ; 00000034H
  03d8c	e9 04 15 00 00	 jmp	 $out$32609
$LN309@lzma_decod@2:
  03d91	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  03d94	c1 e1 08	 shl	 ecx, 8
  03d97	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  03d9a	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  03d9d	c1 e2 08	 shl	 edx, 8
  03da0	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  03da3	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  03da6	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  03da9	0b d1		 or	 edx, ecx
  03dab	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  03dae	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  03db1	83 c2 01	 add	 edx, 1
  03db4	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN312@lzma_decod@2:
  03db7	33 c0		 xor	 eax, eax
  03db9	75 b3		 jne	 SHORT $LN313@lzma_decod@2
  03dbb	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  03dbe	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  03dc1	8b 55 b4	 mov	 edx, DWORD PTR _state$32577[ebp]
  03dc4	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03dc7	0f b7 94 50 b0
	61 00 00	 movzx	 edx, WORD PTR [eax+edx*2+25008]
  03dcf	0f af ca	 imul	 ecx, edx
  03dd2	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  03dd5	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  03dd8	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  03ddb	73 5d		 jae	 SHORT $LN303@lzma_decod@2
$LN307@lzma_decod@2:

; 746  : 					rc_update_0(coder->is_rep1[state]);

  03ddd	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  03de0	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  03de3	8b 55 b4	 mov	 edx, DWORD PTR _state$32577[ebp]
  03de6	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03de9	0f b7 8c 50 b0
	61 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+25008]
  03df1	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  03df6	2b d1		 sub	 edx, ecx
  03df8	c1 ea 05	 shr	 edx, 5
  03dfb	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03dfe	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03e01	0f b7 84 41 b0
	61 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+25008]
  03e09	03 c2		 add	 eax, edx
  03e0b	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  03e0e	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03e11	66 89 84 4a b0
	61 00 00	 mov	 WORD PTR [edx+ecx*2+25008], ax
  03e19	33 c0		 xor	 eax, eax
  03e1b	75 c0		 jne	 SHORT $LN307@lzma_decod@2

; 747  : 
; 748  : 				  {
; 749  : 					const uint32_t distance = rep1;

  03e1d	8b 4d f4	 mov	 ecx, DWORD PTR _rep1$32579[ebp]
  03e20	89 8d 7c ff ff
	ff		 mov	 DWORD PTR _distance$33515[ebp], ecx

; 750  : 					rep1 = rep0;

  03e26	8b 55 e4	 mov	 edx, DWORD PTR _rep0$32578[ebp]
  03e29	89 55 f4	 mov	 DWORD PTR _rep1$32579[ebp], edx

; 751  : 					rep0 = distance;

  03e2c	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _distance$33515[ebp]
  03e32	89 45 e4	 mov	 DWORD PTR _rep0$32578[ebp], eax

; 752  : 				  }
; 753  : 
; 754  : 				} else {

  03e35	e9 7d 01 00 00	 jmp	 $LN318@lzma_decod@2
$LN303@lzma_decod@2:

; 755  : 					rc_update_1(coder->is_rep1[state]);

  03e3a	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  03e3d	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  03e40	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  03e43	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  03e46	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  03e49	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  03e4c	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03e4f	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03e52	0f b7 94 41 b0
	61 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+25008]
  03e5a	c1 fa 05	 sar	 edx, 5
  03e5d	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03e60	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03e63	0f b7 84 41 b0
	61 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+25008]
  03e6b	2b c2		 sub	 eax, edx
  03e6d	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  03e70	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03e73	66 89 84 4a b0
	61 00 00	 mov	 WORD PTR [edx+ecx*2+25008], ax
  03e7b	33 c0		 xor	 eax, eax
  03e7d	75 bb		 jne	 SHORT $LN303@lzma_decod@2
$LN299@lzma_decod@2:

; 756  : 	case SEQ_IS_REP2:
; 757  : 					rc_if_0(coder->is_rep2[state],
; 758  : 							SEQ_IS_REP2) {

  03e7f	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  03e86	73 40		 jae	 SHORT $LN298@lzma_decod@2
  03e88	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  03e8b	3b 4d 18	 cmp	 ecx, DWORD PTR _in_size$[ebp]
  03e8e	75 12		 jne	 SHORT $LN295@lzma_decod@2
  03e90	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03e93	c7 82 a0 6e 00
	00 35 00 00 00	 mov	 DWORD PTR [edx+28320], 53 ; 00000035H
  03e9d	e9 f3 13 00 00	 jmp	 $out$32609
$LN295@lzma_decod@2:
  03ea2	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  03ea5	c1 e0 08	 shl	 eax, 8
  03ea8	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  03eab	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  03eae	c1 e1 08	 shl	 ecx, 8
  03eb1	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  03eb4	03 55 c8	 add	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  03eb7	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  03eba	0b c8		 or	 ecx, eax
  03ebc	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  03ebf	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  03ec2	83 c1 01	 add	 ecx, 1
  03ec5	89 4d c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], ecx
$LN298@lzma_decod@2:
  03ec8	33 d2		 xor	 edx, edx
  03eca	75 b3		 jne	 SHORT $LN299@lzma_decod@2
  03ecc	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  03ecf	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  03ed2	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  03ed5	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03ed8	0f b7 8c 4a c8
	61 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+25032]
  03ee0	0f af c1	 imul	 eax, ecx
  03ee3	89 45 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], eax
  03ee6	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  03ee9	3b 55 c0	 cmp	 edx, DWORD PTR _rc_bound$32576[ebp]
  03eec	73 60		 jae	 SHORT $LN289@lzma_decod@2
$LN293@lzma_decod@2:

; 759  : 						rc_update_0(coder->is_rep2[
; 760  : 								state]);

  03eee	8b 45 c0	 mov	 eax, DWORD PTR _rc_bound$32576[ebp]
  03ef1	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  03ef4	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  03ef7	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03efa	0f b7 84 4a c8
	61 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+25032]
  03f02	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  03f07	2b c8		 sub	 ecx, eax
  03f09	c1 e9 05	 shr	 ecx, 5
  03f0c	8b 55 b4	 mov	 edx, DWORD PTR _state$32577[ebp]
  03f0f	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  03f12	0f b7 94 50 c8
	61 00 00	 movzx	 edx, WORD PTR [eax+edx*2+25032]
  03f1a	03 d1		 add	 edx, ecx
  03f1c	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03f1f	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03f22	66 89 94 41 c8
	61 00 00	 mov	 WORD PTR [ecx+eax*2+25032], dx
  03f2a	33 d2		 xor	 edx, edx
  03f2c	75 c0		 jne	 SHORT $LN293@lzma_decod@2

; 761  : 
; 762  : 					  {
; 763  : 						const uint32_t distance = rep2;

  03f2e	8b 45 b8	 mov	 eax, DWORD PTR _rep2$32580[ebp]
  03f31	89 85 78 ff ff
	ff		 mov	 DWORD PTR _distance$33530[ebp], eax

; 764  : 						rep2 = rep1;

  03f37	8b 4d f4	 mov	 ecx, DWORD PTR _rep1$32579[ebp]
  03f3a	89 4d b8	 mov	 DWORD PTR _rep2$32580[ebp], ecx

; 765  : 						rep1 = rep0;

  03f3d	8b 55 e4	 mov	 edx, DWORD PTR _rep0$32578[ebp]
  03f40	89 55 f4	 mov	 DWORD PTR _rep1$32579[ebp], edx

; 766  : 						rep0 = distance;

  03f43	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _distance$33530[ebp]
  03f49	89 45 e4	 mov	 DWORD PTR _rep0$32578[ebp], eax

; 767  : 					  }
; 768  : 
; 769  : 					} else {

  03f4c	eb 69		 jmp	 SHORT $LN318@lzma_decod@2
$LN289@lzma_decod@2:

; 770  : 						rc_update_1(coder->is_rep2[
; 771  : 								state]);

  03f4e	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  03f51	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  03f54	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  03f57	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  03f5a	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  03f5d	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  03f60	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03f63	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03f66	0f b7 94 41 c8
	61 00 00	 movzx	 edx, WORD PTR [ecx+eax*2+25032]
  03f6e	c1 fa 05	 sar	 edx, 5
  03f71	8b 45 b4	 mov	 eax, DWORD PTR _state$32577[ebp]
  03f74	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  03f77	0f b7 84 41 c8
	61 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+25032]
  03f7f	2b c2		 sub	 eax, edx
  03f81	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  03f84	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03f87	66 89 84 4a c8
	61 00 00	 mov	 WORD PTR [edx+ecx*2+25032], ax
  03f8f	33 c0		 xor	 eax, eax
  03f91	75 bb		 jne	 SHORT $LN289@lzma_decod@2

; 772  : 
; 773  : 					  {
; 774  : 						const uint32_t distance = rep3;

  03f93	8b 4d c4	 mov	 ecx, DWORD PTR _rep3$32581[ebp]
  03f96	89 8d 74 ff ff
	ff		 mov	 DWORD PTR _distance$33535[ebp], ecx

; 775  : 						rep3 = rep2;

  03f9c	8b 55 b8	 mov	 edx, DWORD PTR _rep2$32580[ebp]
  03f9f	89 55 c4	 mov	 DWORD PTR _rep3$32581[ebp], edx

; 776  : 						rep2 = rep1;

  03fa2	8b 45 f4	 mov	 eax, DWORD PTR _rep1$32579[ebp]
  03fa5	89 45 b8	 mov	 DWORD PTR _rep2$32580[ebp], eax

; 777  : 						rep1 = rep0;

  03fa8	8b 4d e4	 mov	 ecx, DWORD PTR _rep0$32578[ebp]
  03fab	89 4d f4	 mov	 DWORD PTR _rep1$32579[ebp], ecx

; 778  : 						rep0 = distance;

  03fae	8b 95 74 ff ff
	ff		 mov	 edx, DWORD PTR _distance$33535[ebp]
  03fb4	89 55 e4	 mov	 DWORD PTR _rep0$32578[ebp], edx
$LN318@lzma_decod@2:

; 779  : 					  }
; 780  : 					}
; 781  : 				}
; 782  : 			}
; 783  : 
; 784  : 			update_long_rep(state);

  03fb7	83 7d b4 07	 cmp	 DWORD PTR _state$32577[ebp], 7
  03fbb	1b c0		 sbb	 eax, eax
  03fbd	83 e0 fd	 and	 eax, -3			; fffffffdH
  03fc0	83 c0 0b	 add	 eax, 11			; 0000000bH
  03fc3	89 45 b4	 mov	 DWORD PTR _state$32577[ebp], eax
$LN286@lzma_decod@2:

; 785  : 
; 786  : 			// Decode the length of the repeated match.
; 787  : 			len_decode(len, coder->rep_len_decoder,
; 788  : 					pos_state, SEQ_REP_LEN);

  03fc6	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR _symbol$32584[ebp], 1
$LN282@lzma_decod@2:
  03fcd	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  03fd4	73 40		 jae	 SHORT $LN281@lzma_decod@2
  03fd6	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  03fd9	3b 4d 18	 cmp	 ecx, DWORD PTR _in_size$[ebp]
  03fdc	75 12		 jne	 SHORT $LN278@lzma_decod@2
  03fde	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  03fe1	c7 82 a0 6e 00
	00 36 00 00 00	 mov	 DWORD PTR [edx+28320], 54 ; 00000036H
  03feb	e9 a5 12 00 00	 jmp	 $out$32609
$LN278@lzma_decod@2:
  03ff0	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  03ff3	c1 e0 08	 shl	 eax, 8
  03ff6	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  03ff9	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  03ffc	c1 e1 08	 shl	 ecx, 8
  03fff	8b 55 10	 mov	 edx, DWORD PTR _in$[ebp]
  04002	03 55 c8	 add	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04005	0f b6 02	 movzx	 eax, BYTE PTR [edx]
  04008	0b c8		 or	 ecx, eax
  0400a	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  0400d	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  04010	83 c1 01	 add	 ecx, 1
  04013	89 4d c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], ecx
$LN281@lzma_decod@2:
  04016	33 d2		 xor	 edx, edx
  04018	75 b3		 jne	 SHORT $LN282@lzma_decod@2
  0401a	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  0401d	c1 e8 0b	 shr	 eax, 11			; 0000000bH
  04020	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04023	0f b7 91 68 6a
	00 00		 movzx	 edx, WORD PTR [ecx+27240]
  0402a	0f af c2	 imul	 eax, edx
  0402d	89 45 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], eax
  04030	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04033	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  04036	0f 83 2f 04 00
	00		 jae	 $LN221@lzma_decod@2
$LN276@lzma_decod@2:
  0403c	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0403f	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04042	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04045	0f b7 82 68 6a
	00 00		 movzx	 eax, WORD PTR [edx+27240]
  0404c	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  04051	2b c8		 sub	 ecx, eax
  04053	c1 e9 05	 shr	 ecx, 5
  04056	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04059	0f b7 82 68 6a
	00 00		 movzx	 eax, WORD PTR [edx+27240]
  04060	03 c1		 add	 eax, ecx
  04062	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04065	66 89 81 68 6a
	00 00		 mov	 WORD PTR [ecx+27240], ax
  0406c	33 d2		 xor	 edx, edx
  0406e	75 cc		 jne	 SHORT $LN276@lzma_decod@2
$LN269@lzma_decod@2:
  04070	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  04077	73 40		 jae	 SHORT $LN268@lzma_decod@2
  04079	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0407c	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  0407f	75 12		 jne	 SHORT $LN265@lzma_decod@2
  04081	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04084	c7 81 a0 6e 00
	00 37 00 00 00	 mov	 DWORD PTR [ecx+28320], 55 ; 00000037H
  0408e	e9 02 12 00 00	 jmp	 $out$32609
$LN265@lzma_decod@2:
  04093	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  04096	c1 e2 08	 shl	 edx, 8
  04099	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0409c	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  0409f	c1 e0 08	 shl	 eax, 8
  040a2	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  040a5	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  040a8	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  040ab	0b c2		 or	 eax, edx
  040ad	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  040b0	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  040b3	83 c0 01	 add	 eax, 1
  040b6	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN268@lzma_decod@2:
  040b9	33 c9		 xor	 ecx, ecx
  040bb	75 b3		 jne	 SHORT $LN269@lzma_decod@2
  040bd	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  040c0	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  040c3	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  040c6	c1 e0 04	 shl	 eax, 4
  040c9	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  040cc	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  040d3	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  040d6	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  040da	0f af d0	 imul	 edx, eax
  040dd	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  040e0	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  040e3	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  040e6	73 65		 jae	 SHORT $LN259@lzma_decod@2
$LN263@lzma_decod@2:
  040e8	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  040eb	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  040ee	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  040f1	c1 e0 04	 shl	 eax, 4
  040f4	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  040f7	8d 94 01 6c 6a
	00 00		 lea	 edx, DWORD PTR [ecx+eax+27244]
  040fe	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  04101	c1 e0 04	 shl	 eax, 4
  04104	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04107	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  0410e	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04111	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  04115	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0411a	2b c8		 sub	 ecx, eax
  0411c	c1 e9 05	 shr	 ecx, 5
  0411f	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04122	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  04126	03 d1		 add	 edx, ecx
  04128	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  0412b	c1 e0 04	 shl	 eax, 4
  0412e	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04131	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  04138	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0413b	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  0413f	33 d2		 xor	 edx, edx
  04141	75 a5		 jne	 SHORT $LN263@lzma_decod@2
  04143	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04146	d1 e0		 shl	 eax, 1
  04148	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  0414b	eb 6a		 jmp	 SHORT $LN271@lzma_decod@2
$LN259@lzma_decod@2:
  0414d	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04150	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04153	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04156	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  04159	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  0415c	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  0415f	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  04162	c1 e0 04	 shl	 eax, 4
  04165	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04168	8d 94 01 6c 6a
	00 00		 lea	 edx, DWORD PTR [ecx+eax+27244]
  0416f	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  04172	c1 e0 04	 shl	 eax, 4
  04175	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04178	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  0417f	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04182	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  04186	c1 f8 05	 sar	 eax, 5
  04189	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0418c	0f b7 14 4a	 movzx	 edx, WORD PTR [edx+ecx*2]
  04190	2b d0		 sub	 edx, eax
  04192	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  04195	c1 e0 04	 shl	 eax, 4
  04198	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0419b	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  041a2	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  041a5	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  041a9	33 d2		 xor	 edx, edx
  041ab	75 a0		 jne	 SHORT $LN259@lzma_decod@2
  041ad	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  041b0	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  041b4	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN271@lzma_decod@2:
  041b7	33 d2		 xor	 edx, edx
  041b9	0f 85 b1 fe ff
	ff		 jne	 $LN269@lzma_decod@2
$LN252@lzma_decod@2:
  041bf	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  041c6	73 40		 jae	 SHORT $LN251@lzma_decod@2
  041c8	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  041cb	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  041ce	75 12		 jne	 SHORT $LN248@lzma_decod@2
  041d0	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  041d3	c7 81 a0 6e 00
	00 38 00 00 00	 mov	 DWORD PTR [ecx+28320], 56 ; 00000038H
  041dd	e9 b3 10 00 00	 jmp	 $out$32609
$LN248@lzma_decod@2:
  041e2	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  041e5	c1 e2 08	 shl	 edx, 8
  041e8	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  041eb	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  041ee	c1 e0 08	 shl	 eax, 8
  041f1	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  041f4	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  041f7	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  041fa	0b c2		 or	 eax, edx
  041fc	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  041ff	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  04202	83 c0 01	 add	 eax, 1
  04205	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN251@lzma_decod@2:
  04208	33 c9		 xor	 ecx, ecx
  0420a	75 b3		 jne	 SHORT $LN252@lzma_decod@2
  0420c	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0420f	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  04212	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  04215	c1 e0 04	 shl	 eax, 4
  04218	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0421b	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  04222	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04225	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  04229	0f af d0	 imul	 edx, eax
  0422c	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  0422f	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  04232	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04235	73 65		 jae	 SHORT $LN242@lzma_decod@2
$LN246@lzma_decod@2:
  04237	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  0423a	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0423d	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  04240	c1 e0 04	 shl	 eax, 4
  04243	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04246	8d 94 01 6c 6a
	00 00		 lea	 edx, DWORD PTR [ecx+eax+27244]
  0424d	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  04250	c1 e0 04	 shl	 eax, 4
  04253	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04256	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  0425d	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04260	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  04264	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  04269	2b c8		 sub	 ecx, eax
  0426b	c1 e9 05	 shr	 ecx, 5
  0426e	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04271	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  04275	03 d1		 add	 edx, ecx
  04277	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  0427a	c1 e0 04	 shl	 eax, 4
  0427d	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04280	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  04287	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0428a	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  0428e	33 d2		 xor	 edx, edx
  04290	75 a5		 jne	 SHORT $LN246@lzma_decod@2
  04292	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04295	d1 e0		 shl	 eax, 1
  04297	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  0429a	eb 6a		 jmp	 SHORT $LN254@lzma_decod@2
$LN242@lzma_decod@2:
  0429c	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  0429f	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  042a2	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  042a5	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  042a8	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  042ab	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  042ae	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  042b1	c1 e0 04	 shl	 eax, 4
  042b4	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  042b7	8d 94 01 6c 6a
	00 00		 lea	 edx, DWORD PTR [ecx+eax+27244]
  042be	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  042c1	c1 e0 04	 shl	 eax, 4
  042c4	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  042c7	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  042ce	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  042d1	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  042d5	c1 f8 05	 sar	 eax, 5
  042d8	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  042db	0f b7 14 4a	 movzx	 edx, WORD PTR [edx+ecx*2]
  042df	2b d0		 sub	 edx, eax
  042e1	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  042e4	c1 e0 04	 shl	 eax, 4
  042e7	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  042ea	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  042f1	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  042f4	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  042f8	33 d2		 xor	 edx, edx
  042fa	75 a0		 jne	 SHORT $LN242@lzma_decod@2
  042fc	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  042ff	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  04303	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN254@lzma_decod@2:
  04306	33 d2		 xor	 edx, edx
  04308	0f 85 b1 fe ff
	ff		 jne	 $LN252@lzma_decod@2
$LN235@lzma_decod@2:
  0430e	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  04315	73 40		 jae	 SHORT $LN234@lzma_decod@2
  04317	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0431a	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  0431d	75 12		 jne	 SHORT $LN231@lzma_decod@2
  0431f	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04322	c7 81 a0 6e 00
	00 39 00 00 00	 mov	 DWORD PTR [ecx+28320], 57 ; 00000039H
  0432c	e9 64 0f 00 00	 jmp	 $out$32609
$LN231@lzma_decod@2:
  04331	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  04334	c1 e2 08	 shl	 edx, 8
  04337	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0433a	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  0433d	c1 e0 08	 shl	 eax, 8
  04340	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  04343	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  04346	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  04349	0b c2		 or	 eax, edx
  0434b	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0434e	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  04351	83 c0 01	 add	 eax, 1
  04354	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN234@lzma_decod@2:
  04357	33 c9		 xor	 ecx, ecx
  04359	75 b3		 jne	 SHORT $LN235@lzma_decod@2
  0435b	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  0435e	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  04361	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  04364	c1 e0 04	 shl	 eax, 4
  04367	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0436a	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  04371	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04374	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  04378	0f af d0	 imul	 edx, eax
  0437b	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  0437e	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  04381	3b 4d c0	 cmp	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04384	73 65		 jae	 SHORT $LN225@lzma_decod@2
$LN229@lzma_decod@2:
  04386	8b 55 c0	 mov	 edx, DWORD PTR _rc_bound$32576[ebp]
  04389	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0438c	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  0438f	c1 e0 04	 shl	 eax, 4
  04392	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04395	8d 94 01 6c 6a
	00 00		 lea	 edx, DWORD PTR [ecx+eax+27244]
  0439c	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  0439f	c1 e0 04	 shl	 eax, 4
  043a2	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  043a5	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  043ac	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  043af	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  043b3	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  043b8	2b c8		 sub	 ecx, eax
  043ba	c1 e9 05	 shr	 ecx, 5
  043bd	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  043c0	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  043c4	03 d1		 add	 edx, ecx
  043c6	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  043c9	c1 e0 04	 shl	 eax, 4
  043cc	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  043cf	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  043d6	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  043d9	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  043dd	33 d2		 xor	 edx, edx
  043df	75 a5		 jne	 SHORT $LN229@lzma_decod@2
  043e1	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  043e4	d1 e0		 shl	 eax, 1
  043e6	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
  043e9	eb 6a		 jmp	 SHORT $LN237@lzma_decod@2
$LN225@lzma_decod@2:
  043eb	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  043ee	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  043f1	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  043f4	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  043f7	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  043fa	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  043fd	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  04400	c1 e0 04	 shl	 eax, 4
  04403	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04406	8d 94 01 6c 6a
	00 00		 lea	 edx, DWORD PTR [ecx+eax+27244]
  0440d	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  04410	c1 e0 04	 shl	 eax, 4
  04413	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04416	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  0441d	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04420	0f b7 04 48	 movzx	 eax, WORD PTR [eax+ecx*2]
  04424	c1 f8 05	 sar	 eax, 5
  04427	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0442a	0f b7 14 4a	 movzx	 edx, WORD PTR [edx+ecx*2]
  0442e	2b d0		 sub	 edx, eax
  04430	8b 45 98	 mov	 eax, DWORD PTR _pos_state$32590[ebp]
  04433	c1 e0 04	 shl	 eax, 4
  04436	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04439	8d 84 01 6c 6a
	00 00		 lea	 eax, DWORD PTR [ecx+eax+27244]
  04440	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04443	66 89 14 48	 mov	 WORD PTR [eax+ecx*2], dx
  04447	33 d2		 xor	 edx, edx
  04449	75 a0		 jne	 SHORT $LN225@lzma_decod@2
  0444b	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0444e	8d 4c 00 01	 lea	 ecx, DWORD PTR [eax+eax+1]
  04452	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
$LN237@lzma_decod@2:
  04455	33 d2		 xor	 edx, edx
  04457	0f 85 b1 fe ff
	ff		 jne	 $LN235@lzma_decod@2
  0445d	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04460	83 e8 06	 sub	 eax, 6
  04463	89 45 a8	 mov	 DWORD PTR _len$32587[ebp], eax
  04466	e9 9c 0d 00 00	 jmp	 $LN285@lzma_decod@2
$LN221@lzma_decod@2:
  0446b	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  0446e	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04471	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04474	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  04477	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  0447a	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  0447d	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04480	0f b7 88 68 6a
	00 00		 movzx	 ecx, WORD PTR [eax+27240]
  04487	c1 f9 05	 sar	 ecx, 5
  0448a	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0448d	0f b7 82 68 6a
	00 00		 movzx	 eax, WORD PTR [edx+27240]
  04494	2b c1		 sub	 eax, ecx
  04496	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04499	66 89 81 68 6a
	00 00		 mov	 WORD PTR [ecx+27240], ax
  044a0	33 d2		 xor	 edx, edx
  044a2	75 c7		 jne	 SHORT $LN221@lzma_decod@2
$LN217@lzma_decod@2:
  044a4	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  044ab	73 40		 jae	 SHORT $LN216@lzma_decod@2
  044ad	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  044b0	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  044b3	75 12		 jne	 SHORT $LN213@lzma_decod@2
  044b5	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  044b8	c7 81 a0 6e 00
	00 3a 00 00 00	 mov	 DWORD PTR [ecx+28320], 58 ; 0000003aH
  044c2	e9 ce 0d 00 00	 jmp	 $out$32609
$LN213@lzma_decod@2:
  044c7	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  044ca	c1 e2 08	 shl	 edx, 8
  044cd	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  044d0	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  044d3	c1 e0 08	 shl	 eax, 8
  044d6	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  044d9	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  044dc	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  044df	0b c2		 or	 eax, edx
  044e1	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  044e4	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  044e7	83 c0 01	 add	 eax, 1
  044ea	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN216@lzma_decod@2:
  044ed	33 c9		 xor	 ecx, ecx
  044ef	75 b3		 jne	 SHORT $LN217@lzma_decod@2
  044f1	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  044f4	c1 ea 0b	 shr	 edx, 11			; 0000000bH
  044f7	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  044fa	0f b7 88 6a 6a
	00 00		 movzx	 ecx, WORD PTR [eax+27242]
  04501	0f af d1	 imul	 edx, ecx
  04504	89 55 c0	 mov	 DWORD PTR _rc_bound$32576[ebp], edx
  04507	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  0450a	3b 55 c0	 cmp	 edx, DWORD PTR _rc_bound$32576[ebp]
  0450d	0f 83 2f 04 00
	00		 jae	 $LN156@lzma_decod@2
$LN211@lzma_decod@2:
  04513	8b 45 c0	 mov	 eax, DWORD PTR _rc_bound$32576[ebp]
  04516	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  04519	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0451c	0f b7 91 6a 6a
	00 00		 movzx	 edx, WORD PTR [ecx+27242]
  04523	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  04528	2b c2		 sub	 eax, edx
  0452a	c1 e8 05	 shr	 eax, 5
  0452d	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04530	0f b7 91 6a 6a
	00 00		 movzx	 edx, WORD PTR [ecx+27242]
  04537	03 d0		 add	 edx, eax
  04539	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0453c	66 89 90 6a 6a
	00 00		 mov	 WORD PTR [eax+27242], dx
  04543	33 c9		 xor	 ecx, ecx
  04545	75 cc		 jne	 SHORT $LN211@lzma_decod@2
$LN204@lzma_decod@2:
  04547	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0454e	73 40		 jae	 SHORT $LN203@lzma_decod@2
  04550	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04553	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  04556	75 12		 jne	 SHORT $LN200@lzma_decod@2
  04558	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0455b	c7 80 a0 6e 00
	00 3b 00 00 00	 mov	 DWORD PTR [eax+28320], 59 ; 0000003bH
  04565	e9 2b 0d 00 00	 jmp	 $out$32609
$LN200@lzma_decod@2:
  0456a	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  0456d	c1 e1 08	 shl	 ecx, 8
  04570	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04573	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  04576	c1 e2 08	 shl	 edx, 8
  04579	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0457c	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0457f	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  04582	0b d1		 or	 edx, ecx
  04584	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  04587	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  0458a	83 c2 01	 add	 edx, 1
  0458d	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN203@lzma_decod@2:
  04590	33 c0		 xor	 eax, eax
  04592	75 b3		 jne	 SHORT $LN204@lzma_decod@2
  04594	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04597	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  0459a	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  0459d	c1 e2 04	 shl	 edx, 4
  045a0	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  045a3	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  045aa	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  045ad	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  045b1	0f af ca	 imul	 ecx, edx
  045b4	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  045b7	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  045ba	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  045bd	73 65		 jae	 SHORT $LN194@lzma_decod@2
$LN198@lzma_decod@2:
  045bf	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  045c2	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  045c5	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  045c8	c1 e2 04	 shl	 edx, 4
  045cb	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  045ce	8d 8c 10 6c 6b
	00 00		 lea	 ecx, DWORD PTR [eax+edx+27500]
  045d5	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  045d8	c1 e2 04	 shl	 edx, 4
  045db	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  045de	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  045e5	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  045e8	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  045ec	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  045f1	2b c2		 sub	 eax, edx
  045f3	c1 e8 05	 shr	 eax, 5
  045f6	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  045f9	0f b7 0c 51	 movzx	 ecx, WORD PTR [ecx+edx*2]
  045fd	03 c8		 add	 ecx, eax
  045ff	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  04602	c1 e2 04	 shl	 edx, 4
  04605	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04608	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  0460f	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04612	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  04616	33 c9		 xor	 ecx, ecx
  04618	75 a5		 jne	 SHORT $LN198@lzma_decod@2
  0461a	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0461d	d1 e2		 shl	 edx, 1
  0461f	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  04622	eb 6a		 jmp	 SHORT $LN206@lzma_decod@2
$LN194@lzma_decod@2:
  04624	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  04627	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  0462a	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  0462d	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  04630	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04633	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  04636	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  04639	c1 e2 04	 shl	 edx, 4
  0463c	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0463f	8d 8c 10 6c 6b
	00 00		 lea	 ecx, DWORD PTR [eax+edx+27500]
  04646	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  04649	c1 e2 04	 shl	 edx, 4
  0464c	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0464f	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  04656	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04659	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  0465d	c1 fa 05	 sar	 edx, 5
  04660	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04663	0f b7 0c 41	 movzx	 ecx, WORD PTR [ecx+eax*2]
  04667	2b ca		 sub	 ecx, edx
  04669	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  0466c	c1 e2 04	 shl	 edx, 4
  0466f	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04672	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  04679	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0467c	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  04680	33 c9		 xor	 ecx, ecx
  04682	75 a0		 jne	 SHORT $LN194@lzma_decod@2
  04684	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04687	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  0468b	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN206@lzma_decod@2:
  0468e	33 c9		 xor	 ecx, ecx
  04690	0f 85 b1 fe ff
	ff		 jne	 $LN204@lzma_decod@2
$LN187@lzma_decod@2:
  04696	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  0469d	73 40		 jae	 SHORT $LN186@lzma_decod@2
  0469f	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  046a2	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  046a5	75 12		 jne	 SHORT $LN183@lzma_decod@2
  046a7	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  046aa	c7 80 a0 6e 00
	00 3c 00 00 00	 mov	 DWORD PTR [eax+28320], 60 ; 0000003cH
  046b4	e9 dc 0b 00 00	 jmp	 $out$32609
$LN183@lzma_decod@2:
  046b9	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  046bc	c1 e1 08	 shl	 ecx, 8
  046bf	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  046c2	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  046c5	c1 e2 08	 shl	 edx, 8
  046c8	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  046cb	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  046ce	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  046d1	0b d1		 or	 edx, ecx
  046d3	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  046d6	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  046d9	83 c2 01	 add	 edx, 1
  046dc	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN186@lzma_decod@2:
  046df	33 c0		 xor	 eax, eax
  046e1	75 b3		 jne	 SHORT $LN187@lzma_decod@2
  046e3	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  046e6	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  046e9	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  046ec	c1 e2 04	 shl	 edx, 4
  046ef	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  046f2	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  046f9	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  046fc	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  04700	0f af ca	 imul	 ecx, edx
  04703	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  04706	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04709	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  0470c	73 65		 jae	 SHORT $LN177@lzma_decod@2
$LN181@lzma_decod@2:
  0470e	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04711	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04714	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  04717	c1 e2 04	 shl	 edx, 4
  0471a	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0471d	8d 8c 10 6c 6b
	00 00		 lea	 ecx, DWORD PTR [eax+edx+27500]
  04724	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  04727	c1 e2 04	 shl	 edx, 4
  0472a	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0472d	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  04734	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04737	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  0473b	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  04740	2b c2		 sub	 eax, edx
  04742	c1 e8 05	 shr	 eax, 5
  04745	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04748	0f b7 0c 51	 movzx	 ecx, WORD PTR [ecx+edx*2]
  0474c	03 c8		 add	 ecx, eax
  0474e	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  04751	c1 e2 04	 shl	 edx, 4
  04754	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04757	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  0475e	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04761	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  04765	33 c9		 xor	 ecx, ecx
  04767	75 a5		 jne	 SHORT $LN181@lzma_decod@2
  04769	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  0476c	d1 e2		 shl	 edx, 1
  0476e	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  04771	eb 6a		 jmp	 SHORT $LN189@lzma_decod@2
$LN177@lzma_decod@2:
  04773	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  04776	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  04779	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  0477c	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0477f	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04782	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  04785	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  04788	c1 e2 04	 shl	 edx, 4
  0478b	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0478e	8d 8c 10 6c 6b
	00 00		 lea	 ecx, DWORD PTR [eax+edx+27500]
  04795	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  04798	c1 e2 04	 shl	 edx, 4
  0479b	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0479e	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  047a5	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  047a8	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  047ac	c1 fa 05	 sar	 edx, 5
  047af	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  047b2	0f b7 0c 41	 movzx	 ecx, WORD PTR [ecx+eax*2]
  047b6	2b ca		 sub	 ecx, edx
  047b8	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  047bb	c1 e2 04	 shl	 edx, 4
  047be	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  047c1	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  047c8	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  047cb	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  047cf	33 c9		 xor	 ecx, ecx
  047d1	75 a0		 jne	 SHORT $LN177@lzma_decod@2
  047d3	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  047d6	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  047da	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN189@lzma_decod@2:
  047dd	33 c9		 xor	 ecx, ecx
  047df	0f 85 b1 fe ff
	ff		 jne	 $LN187@lzma_decod@2
$LN170@lzma_decod@2:
  047e5	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  047ec	73 40		 jae	 SHORT $LN169@lzma_decod@2
  047ee	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  047f1	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  047f4	75 12		 jne	 SHORT $LN166@lzma_decod@2
  047f6	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  047f9	c7 80 a0 6e 00
	00 3d 00 00 00	 mov	 DWORD PTR [eax+28320], 61 ; 0000003dH
  04803	e9 8d 0a 00 00	 jmp	 $out$32609
$LN166@lzma_decod@2:
  04808	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  0480b	c1 e1 08	 shl	 ecx, 8
  0480e	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04811	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  04814	c1 e2 08	 shl	 edx, 8
  04817	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  0481a	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0481d	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  04820	0b d1		 or	 edx, ecx
  04822	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  04825	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04828	83 c2 01	 add	 edx, 1
  0482b	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN169@lzma_decod@2:
  0482e	33 c0		 xor	 eax, eax
  04830	75 b3		 jne	 SHORT $LN170@lzma_decod@2
  04832	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04835	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  04838	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  0483b	c1 e2 04	 shl	 edx, 4
  0483e	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04841	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  04848	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0484b	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  0484f	0f af ca	 imul	 ecx, edx
  04852	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  04855	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04858	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  0485b	73 65		 jae	 SHORT $LN160@lzma_decod@2
$LN164@lzma_decod@2:
  0485d	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04860	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04863	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  04866	c1 e2 04	 shl	 edx, 4
  04869	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0486c	8d 8c 10 6c 6b
	00 00		 lea	 ecx, DWORD PTR [eax+edx+27500]
  04873	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  04876	c1 e2 04	 shl	 edx, 4
  04879	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0487c	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  04883	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04886	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  0488a	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0488f	2b c2		 sub	 eax, edx
  04891	c1 e8 05	 shr	 eax, 5
  04894	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04897	0f b7 0c 51	 movzx	 ecx, WORD PTR [ecx+edx*2]
  0489b	03 c8		 add	 ecx, eax
  0489d	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  048a0	c1 e2 04	 shl	 edx, 4
  048a3	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  048a6	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  048ad	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  048b0	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  048b4	33 c9		 xor	 ecx, ecx
  048b6	75 a5		 jne	 SHORT $LN164@lzma_decod@2
  048b8	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  048bb	d1 e2		 shl	 edx, 1
  048bd	89 55 b0	 mov	 DWORD PTR _symbol$32584[ebp], edx
  048c0	eb 6a		 jmp	 SHORT $LN172@lzma_decod@2
$LN160@lzma_decod@2:
  048c2	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  048c5	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  048c8	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  048cb	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  048ce	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  048d1	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  048d4	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  048d7	c1 e2 04	 shl	 edx, 4
  048da	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  048dd	8d 8c 10 6c 6b
	00 00		 lea	 ecx, DWORD PTR [eax+edx+27500]
  048e4	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  048e7	c1 e2 04	 shl	 edx, 4
  048ea	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  048ed	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  048f4	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  048f7	0f b7 14 42	 movzx	 edx, WORD PTR [edx+eax*2]
  048fb	c1 fa 05	 sar	 edx, 5
  048fe	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04901	0f b7 0c 41	 movzx	 ecx, WORD PTR [ecx+eax*2]
  04905	2b ca		 sub	 ecx, edx
  04907	8b 55 98	 mov	 edx, DWORD PTR _pos_state$32590[ebp]
  0490a	c1 e2 04	 shl	 edx, 4
  0490d	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04910	8d 94 10 6c 6b
	00 00		 lea	 edx, DWORD PTR [eax+edx+27500]
  04917	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0491a	66 89 0c 42	 mov	 WORD PTR [edx+eax*2], cx
  0491e	33 c9		 xor	 ecx, ecx
  04920	75 a0		 jne	 SHORT $LN160@lzma_decod@2
  04922	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04925	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  04929	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN172@lzma_decod@2:
  0492c	33 c9		 xor	 ecx, ecx
  0492e	0f 85 b1 fe ff
	ff		 jne	 $LN170@lzma_decod@2
  04934	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04937	83 c2 02	 add	 edx, 2
  0493a	89 55 a8	 mov	 DWORD PTR _len$32587[ebp], edx
  0493d	e9 c5 08 00 00	 jmp	 $LN285@lzma_decod@2
$LN156@lzma_decod@2:
  04942	8b 45 e8	 mov	 eax, DWORD PTR _rc$32574[ebp]
  04945	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  04948	89 45 e8	 mov	 DWORD PTR _rc$32574[ebp], eax
  0494b	8b 4d ec	 mov	 ecx, DWORD PTR _rc$32574[ebp+4]
  0494e	2b 4d c0	 sub	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04951	89 4d ec	 mov	 DWORD PTR _rc$32574[ebp+4], ecx
  04954	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04957	0f b7 82 6a 6a
	00 00		 movzx	 eax, WORD PTR [edx+27242]
  0495e	c1 f8 05	 sar	 eax, 5
  04961	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04964	0f b7 91 6a 6a
	00 00		 movzx	 edx, WORD PTR [ecx+27242]
  0496b	2b d0		 sub	 edx, eax
  0496d	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04970	66 89 90 6a 6a
	00 00		 mov	 WORD PTR [eax+27242], dx
  04977	33 c9		 xor	 ecx, ecx
  04979	75 c7		 jne	 SHORT $LN156@lzma_decod@2
$LN149@lzma_decod@2:
  0497b	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  04982	73 40		 jae	 SHORT $LN148@lzma_decod@2
  04984	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04987	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  0498a	75 12		 jne	 SHORT $LN145@lzma_decod@2
  0498c	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0498f	c7 80 a0 6e 00
	00 3e 00 00 00	 mov	 DWORD PTR [eax+28320], 62 ; 0000003eH
  04999	e9 f7 08 00 00	 jmp	 $out$32609
$LN145@lzma_decod@2:
  0499e	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  049a1	c1 e1 08	 shl	 ecx, 8
  049a4	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  049a7	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  049aa	c1 e2 08	 shl	 edx, 8
  049ad	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  049b0	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  049b3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  049b6	0b d1		 or	 edx, ecx
  049b8	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  049bb	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  049be	83 c2 01	 add	 edx, 1
  049c1	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN148@lzma_decod@2:
  049c4	33 c0		 xor	 eax, eax
  049c6	75 b3		 jne	 SHORT $LN149@lzma_decod@2
  049c8	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  049cb	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  049ce	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  049d1	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  049d4	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [eax+edx*2+27756]
  049dc	0f af ca	 imul	 ecx, edx
  049df	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  049e2	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  049e5	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  049e8	73 4a		 jae	 SHORT $LN139@lzma_decod@2
$LN143@lzma_decod@2:
  049ea	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  049ed	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  049f0	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  049f3	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  049f6	0f b7 8c 50 6c
	6c 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+27756]
  049fe	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  04a03	2b d1		 sub	 edx, ecx
  04a05	c1 ea 05	 shr	 edx, 5
  04a08	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04a0b	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04a0e	0f b7 84 41 6c
	6c 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+27756]
  04a16	03 c2		 add	 eax, edx
  04a18	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04a1b	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04a1e	66 89 84 4a 6c
	6c 00 00	 mov	 WORD PTR [edx+ecx*2+27756], ax
  04a26	33 c0		 xor	 eax, eax
  04a28	75 c0		 jne	 SHORT $LN143@lzma_decod@2
  04a2a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04a2d	d1 e1		 shl	 ecx, 1
  04a2f	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  04a32	eb 4f		 jmp	 SHORT $LN151@lzma_decod@2
$LN139@lzma_decod@2:
  04a34	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  04a37	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  04a3a	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  04a3d	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04a40	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  04a43	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  04a46	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04a49	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04a4c	0f b7 84 4a 6c
	6c 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+27756]
  04a54	c1 f8 05	 sar	 eax, 5
  04a57	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04a5a	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04a5d	0f b7 8c 4a 6c
	6c 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+27756]
  04a65	2b c8		 sub	 ecx, eax
  04a67	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04a6a	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04a6d	66 89 8c 50 6c
	6c 00 00	 mov	 WORD PTR [eax+edx*2+27756], cx
  04a75	33 c9		 xor	 ecx, ecx
  04a77	75 bb		 jne	 SHORT $LN139@lzma_decod@2
  04a79	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04a7c	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  04a80	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN151@lzma_decod@2:
  04a83	33 c9		 xor	 ecx, ecx
  04a85	0f 85 f0 fe ff
	ff		 jne	 $LN149@lzma_decod@2
$LN132@lzma_decod@2:
  04a8b	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  04a92	73 40		 jae	 SHORT $LN131@lzma_decod@2
  04a94	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04a97	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  04a9a	75 12		 jne	 SHORT $LN128@lzma_decod@2
  04a9c	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04a9f	c7 80 a0 6e 00
	00 3f 00 00 00	 mov	 DWORD PTR [eax+28320], 63 ; 0000003fH
  04aa9	e9 e7 07 00 00	 jmp	 $out$32609
$LN128@lzma_decod@2:
  04aae	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04ab1	c1 e1 08	 shl	 ecx, 8
  04ab4	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04ab7	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  04aba	c1 e2 08	 shl	 edx, 8
  04abd	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  04ac0	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  04ac3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  04ac6	0b d1		 or	 edx, ecx
  04ac8	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  04acb	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04ace	83 c2 01	 add	 edx, 1
  04ad1	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN131@lzma_decod@2:
  04ad4	33 c0		 xor	 eax, eax
  04ad6	75 b3		 jne	 SHORT $LN132@lzma_decod@2
  04ad8	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04adb	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  04ade	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04ae1	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04ae4	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [eax+edx*2+27756]
  04aec	0f af ca	 imul	 ecx, edx
  04aef	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  04af2	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04af5	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  04af8	73 4a		 jae	 SHORT $LN122@lzma_decod@2
$LN126@lzma_decod@2:
  04afa	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04afd	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04b00	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04b03	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04b06	0f b7 8c 50 6c
	6c 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+27756]
  04b0e	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  04b13	2b d1		 sub	 edx, ecx
  04b15	c1 ea 05	 shr	 edx, 5
  04b18	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04b1b	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04b1e	0f b7 84 41 6c
	6c 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+27756]
  04b26	03 c2		 add	 eax, edx
  04b28	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04b2b	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04b2e	66 89 84 4a 6c
	6c 00 00	 mov	 WORD PTR [edx+ecx*2+27756], ax
  04b36	33 c0		 xor	 eax, eax
  04b38	75 c0		 jne	 SHORT $LN126@lzma_decod@2
  04b3a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04b3d	d1 e1		 shl	 ecx, 1
  04b3f	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  04b42	eb 4f		 jmp	 SHORT $LN134@lzma_decod@2
$LN122@lzma_decod@2:
  04b44	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  04b47	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  04b4a	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  04b4d	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04b50	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  04b53	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  04b56	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04b59	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04b5c	0f b7 84 4a 6c
	6c 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+27756]
  04b64	c1 f8 05	 sar	 eax, 5
  04b67	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04b6a	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04b6d	0f b7 8c 4a 6c
	6c 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+27756]
  04b75	2b c8		 sub	 ecx, eax
  04b77	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04b7a	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04b7d	66 89 8c 50 6c
	6c 00 00	 mov	 WORD PTR [eax+edx*2+27756], cx
  04b85	33 c9		 xor	 ecx, ecx
  04b87	75 bb		 jne	 SHORT $LN122@lzma_decod@2
  04b89	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04b8c	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  04b90	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN134@lzma_decod@2:
  04b93	33 c9		 xor	 ecx, ecx
  04b95	0f 85 f0 fe ff
	ff		 jne	 $LN132@lzma_decod@2
$LN115@lzma_decod@2:
  04b9b	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  04ba2	73 40		 jae	 SHORT $LN114@lzma_decod@2
  04ba4	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04ba7	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  04baa	75 12		 jne	 SHORT $LN111@lzma_decod@2
  04bac	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04baf	c7 80 a0 6e 00
	00 40 00 00 00	 mov	 DWORD PTR [eax+28320], 64 ; 00000040H
  04bb9	e9 d7 06 00 00	 jmp	 $out$32609
$LN111@lzma_decod@2:
  04bbe	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04bc1	c1 e1 08	 shl	 ecx, 8
  04bc4	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04bc7	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  04bca	c1 e2 08	 shl	 edx, 8
  04bcd	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  04bd0	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  04bd3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  04bd6	0b d1		 or	 edx, ecx
  04bd8	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  04bdb	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04bde	83 c2 01	 add	 edx, 1
  04be1	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN114@lzma_decod@2:
  04be4	33 c0		 xor	 eax, eax
  04be6	75 b3		 jne	 SHORT $LN115@lzma_decod@2
  04be8	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04beb	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  04bee	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04bf1	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04bf4	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [eax+edx*2+27756]
  04bfc	0f af ca	 imul	 ecx, edx
  04bff	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  04c02	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04c05	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  04c08	73 4a		 jae	 SHORT $LN105@lzma_decod@2
$LN109@lzma_decod@2:
  04c0a	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04c0d	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04c10	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04c13	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04c16	0f b7 8c 50 6c
	6c 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+27756]
  04c1e	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  04c23	2b d1		 sub	 edx, ecx
  04c25	c1 ea 05	 shr	 edx, 5
  04c28	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04c2b	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04c2e	0f b7 84 41 6c
	6c 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+27756]
  04c36	03 c2		 add	 eax, edx
  04c38	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04c3b	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04c3e	66 89 84 4a 6c
	6c 00 00	 mov	 WORD PTR [edx+ecx*2+27756], ax
  04c46	33 c0		 xor	 eax, eax
  04c48	75 c0		 jne	 SHORT $LN109@lzma_decod@2
  04c4a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04c4d	d1 e1		 shl	 ecx, 1
  04c4f	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  04c52	eb 4f		 jmp	 SHORT $LN117@lzma_decod@2
$LN105@lzma_decod@2:
  04c54	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  04c57	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  04c5a	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  04c5d	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04c60	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  04c63	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  04c66	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04c69	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04c6c	0f b7 84 4a 6c
	6c 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+27756]
  04c74	c1 f8 05	 sar	 eax, 5
  04c77	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04c7a	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04c7d	0f b7 8c 4a 6c
	6c 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+27756]
  04c85	2b c8		 sub	 ecx, eax
  04c87	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04c8a	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04c8d	66 89 8c 50 6c
	6c 00 00	 mov	 WORD PTR [eax+edx*2+27756], cx
  04c95	33 c9		 xor	 ecx, ecx
  04c97	75 bb		 jne	 SHORT $LN105@lzma_decod@2
  04c99	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04c9c	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  04ca0	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN117@lzma_decod@2:
  04ca3	33 c9		 xor	 ecx, ecx
  04ca5	0f 85 f0 fe ff
	ff		 jne	 $LN115@lzma_decod@2
$LN98@lzma_decod@2:
  04cab	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  04cb2	73 40		 jae	 SHORT $LN97@lzma_decod@2
  04cb4	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04cb7	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  04cba	75 12		 jne	 SHORT $LN94@lzma_decod@2
  04cbc	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04cbf	c7 80 a0 6e 00
	00 41 00 00 00	 mov	 DWORD PTR [eax+28320], 65 ; 00000041H
  04cc9	e9 c7 05 00 00	 jmp	 $out$32609
$LN94@lzma_decod@2:
  04cce	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04cd1	c1 e1 08	 shl	 ecx, 8
  04cd4	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04cd7	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  04cda	c1 e2 08	 shl	 edx, 8
  04cdd	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  04ce0	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  04ce3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  04ce6	0b d1		 or	 edx, ecx
  04ce8	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  04ceb	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04cee	83 c2 01	 add	 edx, 1
  04cf1	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN97@lzma_decod@2:
  04cf4	33 c0		 xor	 eax, eax
  04cf6	75 b3		 jne	 SHORT $LN98@lzma_decod@2
  04cf8	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04cfb	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  04cfe	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04d01	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04d04	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [eax+edx*2+27756]
  04d0c	0f af ca	 imul	 ecx, edx
  04d0f	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  04d12	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04d15	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  04d18	73 4a		 jae	 SHORT $LN88@lzma_decod@2
$LN92@lzma_decod@2:
  04d1a	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04d1d	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04d20	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04d23	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04d26	0f b7 8c 50 6c
	6c 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+27756]
  04d2e	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  04d33	2b d1		 sub	 edx, ecx
  04d35	c1 ea 05	 shr	 edx, 5
  04d38	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04d3b	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04d3e	0f b7 84 41 6c
	6c 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+27756]
  04d46	03 c2		 add	 eax, edx
  04d48	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04d4b	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04d4e	66 89 84 4a 6c
	6c 00 00	 mov	 WORD PTR [edx+ecx*2+27756], ax
  04d56	33 c0		 xor	 eax, eax
  04d58	75 c0		 jne	 SHORT $LN92@lzma_decod@2
  04d5a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04d5d	d1 e1		 shl	 ecx, 1
  04d5f	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  04d62	eb 4f		 jmp	 SHORT $LN100@lzma_decod@2
$LN88@lzma_decod@2:
  04d64	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  04d67	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  04d6a	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  04d6d	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04d70	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  04d73	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  04d76	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04d79	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04d7c	0f b7 84 4a 6c
	6c 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+27756]
  04d84	c1 f8 05	 sar	 eax, 5
  04d87	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04d8a	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04d8d	0f b7 8c 4a 6c
	6c 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+27756]
  04d95	2b c8		 sub	 ecx, eax
  04d97	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04d9a	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04d9d	66 89 8c 50 6c
	6c 00 00	 mov	 WORD PTR [eax+edx*2+27756], cx
  04da5	33 c9		 xor	 ecx, ecx
  04da7	75 bb		 jne	 SHORT $LN88@lzma_decod@2
  04da9	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04dac	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  04db0	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN100@lzma_decod@2:
  04db3	33 c9		 xor	 ecx, ecx
  04db5	0f 85 f0 fe ff
	ff		 jne	 $LN98@lzma_decod@2
$LN81@lzma_decod@2:
  04dbb	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  04dc2	73 40		 jae	 SHORT $LN80@lzma_decod@2
  04dc4	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04dc7	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  04dca	75 12		 jne	 SHORT $LN77@lzma_decod@2
  04dcc	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04dcf	c7 80 a0 6e 00
	00 42 00 00 00	 mov	 DWORD PTR [eax+28320], 66 ; 00000042H
  04dd9	e9 b7 04 00 00	 jmp	 $out$32609
$LN77@lzma_decod@2:
  04dde	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04de1	c1 e1 08	 shl	 ecx, 8
  04de4	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04de7	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  04dea	c1 e2 08	 shl	 edx, 8
  04ded	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  04df0	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  04df3	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  04df6	0b d1		 or	 edx, ecx
  04df8	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  04dfb	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04dfe	83 c2 01	 add	 edx, 1
  04e01	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN80@lzma_decod@2:
  04e04	33 c0		 xor	 eax, eax
  04e06	75 b3		 jne	 SHORT $LN81@lzma_decod@2
  04e08	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04e0b	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  04e0e	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04e11	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04e14	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [eax+edx*2+27756]
  04e1c	0f af ca	 imul	 ecx, edx
  04e1f	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  04e22	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04e25	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  04e28	73 4a		 jae	 SHORT $LN71@lzma_decod@2
$LN75@lzma_decod@2:
  04e2a	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04e2d	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04e30	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04e33	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04e36	0f b7 8c 50 6c
	6c 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+27756]
  04e3e	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  04e43	2b d1		 sub	 edx, ecx
  04e45	c1 ea 05	 shr	 edx, 5
  04e48	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04e4b	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04e4e	0f b7 84 41 6c
	6c 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+27756]
  04e56	03 c2		 add	 eax, edx
  04e58	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04e5b	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04e5e	66 89 84 4a 6c
	6c 00 00	 mov	 WORD PTR [edx+ecx*2+27756], ax
  04e66	33 c0		 xor	 eax, eax
  04e68	75 c0		 jne	 SHORT $LN75@lzma_decod@2
  04e6a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04e6d	d1 e1		 shl	 ecx, 1
  04e6f	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  04e72	eb 4f		 jmp	 SHORT $LN83@lzma_decod@2
$LN71@lzma_decod@2:
  04e74	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  04e77	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  04e7a	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  04e7d	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04e80	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  04e83	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  04e86	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04e89	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04e8c	0f b7 84 4a 6c
	6c 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+27756]
  04e94	c1 f8 05	 sar	 eax, 5
  04e97	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04e9a	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04e9d	0f b7 8c 4a 6c
	6c 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+27756]
  04ea5	2b c8		 sub	 ecx, eax
  04ea7	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04eaa	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04ead	66 89 8c 50 6c
	6c 00 00	 mov	 WORD PTR [eax+edx*2+27756], cx
  04eb5	33 c9		 xor	 ecx, ecx
  04eb7	75 bb		 jne	 SHORT $LN71@lzma_decod@2
  04eb9	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04ebc	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  04ec0	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN83@lzma_decod@2:
  04ec3	33 c9		 xor	 ecx, ecx
  04ec5	0f 85 f0 fe ff
	ff		 jne	 $LN81@lzma_decod@2
$LN64@lzma_decod@2:
  04ecb	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  04ed2	73 40		 jae	 SHORT $LN63@lzma_decod@2
  04ed4	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04ed7	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  04eda	75 12		 jne	 SHORT $LN60@lzma_decod@2
  04edc	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04edf	c7 80 a0 6e 00
	00 43 00 00 00	 mov	 DWORD PTR [eax+28320], 67 ; 00000043H
  04ee9	e9 a7 03 00 00	 jmp	 $out$32609
$LN60@lzma_decod@2:
  04eee	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04ef1	c1 e1 08	 shl	 ecx, 8
  04ef4	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04ef7	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  04efa	c1 e2 08	 shl	 edx, 8
  04efd	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  04f00	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  04f03	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  04f06	0b d1		 or	 edx, ecx
  04f08	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  04f0b	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04f0e	83 c2 01	 add	 edx, 1
  04f11	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN63@lzma_decod@2:
  04f14	33 c0		 xor	 eax, eax
  04f16	75 b3		 jne	 SHORT $LN64@lzma_decod@2
  04f18	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  04f1b	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  04f1e	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04f21	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04f24	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [eax+edx*2+27756]
  04f2c	0f af ca	 imul	 ecx, edx
  04f2f	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  04f32	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04f35	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  04f38	73 4a		 jae	 SHORT $LN54@lzma_decod@2
$LN58@lzma_decod@2:
  04f3a	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  04f3d	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  04f40	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04f43	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04f46	0f b7 8c 50 6c
	6c 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+27756]
  04f4e	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  04f53	2b d1		 sub	 edx, ecx
  04f55	c1 ea 05	 shr	 edx, 5
  04f58	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  04f5b	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  04f5e	0f b7 84 41 6c
	6c 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+27756]
  04f66	03 c2		 add	 eax, edx
  04f68	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04f6b	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04f6e	66 89 84 4a 6c
	6c 00 00	 mov	 WORD PTR [edx+ecx*2+27756], ax
  04f76	33 c0		 xor	 eax, eax
  04f78	75 c0		 jne	 SHORT $LN58@lzma_decod@2
  04f7a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04f7d	d1 e1		 shl	 ecx, 1
  04f7f	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  04f82	eb 4f		 jmp	 SHORT $LN66@lzma_decod@2
$LN54@lzma_decod@2:
  04f84	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  04f87	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  04f8a	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  04f8d	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  04f90	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  04f93	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  04f96	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04f99	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04f9c	0f b7 84 4a 6c
	6c 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+27756]
  04fa4	c1 f8 05	 sar	 eax, 5
  04fa7	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  04faa	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  04fad	0f b7 8c 4a 6c
	6c 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+27756]
  04fb5	2b c8		 sub	 ecx, eax
  04fb7	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04fba	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04fbd	66 89 8c 50 6c
	6c 00 00	 mov	 WORD PTR [eax+edx*2+27756], cx
  04fc5	33 c9		 xor	 ecx, ecx
  04fc7	75 bb		 jne	 SHORT $LN54@lzma_decod@2
  04fc9	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  04fcc	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  04fd0	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN66@lzma_decod@2:
  04fd3	33 c9		 xor	 ecx, ecx
  04fd5	0f 85 f0 fe ff
	ff		 jne	 $LN64@lzma_decod@2
$LN47@lzma_decod@2:
  04fdb	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  04fe2	73 40		 jae	 SHORT $LN46@lzma_decod@2
  04fe4	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  04fe7	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  04fea	75 12		 jne	 SHORT $LN43@lzma_decod@2
  04fec	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  04fef	c7 80 a0 6e 00
	00 44 00 00 00	 mov	 DWORD PTR [eax+28320], 68 ; 00000044H
  04ff9	e9 97 02 00 00	 jmp	 $out$32609
$LN43@lzma_decod@2:
  04ffe	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  05001	c1 e1 08	 shl	 ecx, 8
  05004	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  05007	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  0500a	c1 e2 08	 shl	 edx, 8
  0500d	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  05010	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  05013	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  05016	0b d1		 or	 edx, ecx
  05018	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  0501b	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  0501e	83 c2 01	 add	 edx, 1
  05021	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN46@lzma_decod@2:
  05024	33 c0		 xor	 eax, eax
  05026	75 b3		 jne	 SHORT $LN47@lzma_decod@2
  05028	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  0502b	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  0502e	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  05031	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  05034	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [eax+edx*2+27756]
  0503c	0f af ca	 imul	 ecx, edx
  0503f	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  05042	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  05045	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  05048	73 4a		 jae	 SHORT $LN37@lzma_decod@2
$LN41@lzma_decod@2:
  0504a	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0504d	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  05050	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  05053	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  05056	0f b7 8c 50 6c
	6c 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+27756]
  0505e	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  05063	2b d1		 sub	 edx, ecx
  05065	c1 ea 05	 shr	 edx, 5
  05068	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0506b	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0506e	0f b7 84 41 6c
	6c 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+27756]
  05076	03 c2		 add	 eax, edx
  05078	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0507b	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0507e	66 89 84 4a 6c
	6c 00 00	 mov	 WORD PTR [edx+ecx*2+27756], ax
  05086	33 c0		 xor	 eax, eax
  05088	75 c0		 jne	 SHORT $LN41@lzma_decod@2
  0508a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0508d	d1 e1		 shl	 ecx, 1
  0508f	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  05092	eb 4f		 jmp	 SHORT $LN49@lzma_decod@2
$LN37@lzma_decod@2:
  05094	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  05097	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  0509a	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  0509d	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  050a0	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  050a3	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  050a6	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  050a9	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  050ac	0f b7 84 4a 6c
	6c 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+27756]
  050b4	c1 f8 05	 sar	 eax, 5
  050b7	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  050ba	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  050bd	0f b7 8c 4a 6c
	6c 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+27756]
  050c5	2b c8		 sub	 ecx, eax
  050c7	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  050ca	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  050cd	66 89 8c 50 6c
	6c 00 00	 mov	 WORD PTR [eax+edx*2+27756], cx
  050d5	33 c9		 xor	 ecx, ecx
  050d7	75 bb		 jne	 SHORT $LN37@lzma_decod@2
  050d9	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  050dc	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  050e0	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN49@lzma_decod@2:
  050e3	33 c9		 xor	 ecx, ecx
  050e5	0f 85 f0 fe ff
	ff		 jne	 $LN47@lzma_decod@2
$LN30@lzma_decod@2:
  050eb	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  050f2	73 40		 jae	 SHORT $LN29@lzma_decod@2
  050f4	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  050f7	3b 55 18	 cmp	 edx, DWORD PTR _in_size$[ebp]
  050fa	75 12		 jne	 SHORT $LN26@lzma_decod@2
  050fc	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  050ff	c7 80 a0 6e 00
	00 45 00 00 00	 mov	 DWORD PTR [eax+28320], 69 ; 00000045H
  05109	e9 87 01 00 00	 jmp	 $out$32609
$LN26@lzma_decod@2:
  0510e	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  05111	c1 e1 08	 shl	 ecx, 8
  05114	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  05117	8b 55 ec	 mov	 edx, DWORD PTR _rc$32574[ebp+4]
  0511a	c1 e2 08	 shl	 edx, 8
  0511d	8b 45 10	 mov	 eax, DWORD PTR _in$[ebp]
  05120	03 45 c8	 add	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  05123	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  05126	0b d1		 or	 edx, ecx
  05128	89 55 ec	 mov	 DWORD PTR _rc$32574[ebp+4], edx
  0512b	8b 55 c8	 mov	 edx, DWORD PTR _rc_in_pos$32575[ebp]
  0512e	83 c2 01	 add	 edx, 1
  05131	89 55 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], edx
$LN29@lzma_decod@2:
  05134	33 c0		 xor	 eax, eax
  05136	75 b3		 jne	 SHORT $LN30@lzma_decod@2
  05138	8b 4d e8	 mov	 ecx, DWORD PTR _rc$32574[ebp]
  0513b	c1 e9 0b	 shr	 ecx, 11			; 0000000bH
  0513e	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  05141	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  05144	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [eax+edx*2+27756]
  0514c	0f af ca	 imul	 ecx, edx
  0514f	89 4d c0	 mov	 DWORD PTR _rc_bound$32576[ebp], ecx
  05152	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  05155	3b 45 c0	 cmp	 eax, DWORD PTR _rc_bound$32576[ebp]
  05158	73 4a		 jae	 SHORT $LN20@lzma_decod@2
$LN24@lzma_decod@2:
  0515a	8b 4d c0	 mov	 ecx, DWORD PTR _rc_bound$32576[ebp]
  0515d	89 4d e8	 mov	 DWORD PTR _rc$32574[ebp], ecx
  05160	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  05163	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  05166	0f b7 8c 50 6c
	6c 00 00	 movzx	 ecx, WORD PTR [eax+edx*2+27756]
  0516e	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  05173	2b d1		 sub	 edx, ecx
  05175	c1 ea 05	 shr	 edx, 5
  05178	8b 45 b0	 mov	 eax, DWORD PTR _symbol$32584[ebp]
  0517b	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0517e	0f b7 84 41 6c
	6c 00 00	 movzx	 eax, WORD PTR [ecx+eax*2+27756]
  05186	03 c2		 add	 eax, edx
  05188	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0518b	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0518e	66 89 84 4a 6c
	6c 00 00	 mov	 WORD PTR [edx+ecx*2+27756], ax
  05196	33 c0		 xor	 eax, eax
  05198	75 c0		 jne	 SHORT $LN24@lzma_decod@2
  0519a	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0519d	d1 e1		 shl	 ecx, 1
  0519f	89 4d b0	 mov	 DWORD PTR _symbol$32584[ebp], ecx
  051a2	eb 4f		 jmp	 SHORT $LN32@lzma_decod@2
$LN20@lzma_decod@2:
  051a4	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  051a7	2b 55 c0	 sub	 edx, DWORD PTR _rc_bound$32576[ebp]
  051aa	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  051ad	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  051b0	2b 45 c0	 sub	 eax, DWORD PTR _rc_bound$32576[ebp]
  051b3	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  051b6	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  051b9	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  051bc	0f b7 84 4a 6c
	6c 00 00	 movzx	 eax, WORD PTR [edx+ecx*2+27756]
  051c4	c1 f8 05	 sar	 eax, 5
  051c7	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  051ca	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  051cd	0f b7 8c 4a 6c
	6c 00 00	 movzx	 ecx, WORD PTR [edx+ecx*2+27756]
  051d5	2b c8		 sub	 ecx, eax
  051d7	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  051da	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  051dd	66 89 8c 50 6c
	6c 00 00	 mov	 WORD PTR [eax+edx*2+27756], cx
  051e5	33 c9		 xor	 ecx, ecx
  051e7	75 bb		 jne	 SHORT $LN20@lzma_decod@2
  051e9	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  051ec	8d 44 12 01	 lea	 eax, DWORD PTR [edx+edx+1]
  051f0	89 45 b0	 mov	 DWORD PTR _symbol$32584[ebp], eax
$LN32@lzma_decod@2:
  051f3	33 c9		 xor	 ecx, ecx
  051f5	0f 85 f0 fe ff
	ff		 jne	 $LN30@lzma_decod@2
  051fb	8b 55 b0	 mov	 edx, DWORD PTR _symbol$32584[ebp]
  051fe	81 ea ee 00 00
	00		 sub	 edx, 238		; 000000eeH
  05204	89 55 a8	 mov	 DWORD PTR _len$32587[ebp], edx
$LN285@lzma_decod@2:
  05207	33 c0		 xor	 eax, eax
  05209	0f 85 b7 ed ff
	ff		 jne	 $LN286@lzma_decod@2
$LN17@lzma_decod@2:

; 789  : 		}
; 790  : 
; 791  : 		/////////////////////////////////
; 792  : 		// Repeat from history buffer. //
; 793  : 		/////////////////////////////////
; 794  : 
; 795  : 		// The length is always between these limits. There is no way
; 796  : 		// to trigger the algorithm to set len outside this range.
; 797  : 		assert(len >= MATCH_LEN_MIN);
; 798  : 		assert(len <= MATCH_LEN_MAX);
; 799  : 
; 800  : 	case SEQ_COPY:
; 801  : 		// Repeat len bytes from distance of rep0.
; 802  : 		if (unlikely(dict_repeat(&dict, rep0, &len))) {

  0520f	8d 4d a8	 lea	 ecx, DWORD PTR _len$32587[ebp]
  05212	51		 push	 ecx
  05213	8b 55 e4	 mov	 edx, DWORD PTR _rep0$32578[ebp]
  05216	52		 push	 edx
  05217	8d 45 cc	 lea	 eax, DWORD PTR _dict$32572[ebp]
  0521a	50		 push	 eax
  0521b	e8 00 00 00 00	 call	 _dict_repeat
  05220	83 c4 0c	 add	 esp, 12			; 0000000cH
  05223	0f b6 c8	 movzx	 ecx, al
  05226	85 c9		 test	 ecx, ecx
  05228	74 0f		 je	 SHORT $LN16@lzma_decod@2

; 803  : 			coder->sequence = SEQ_COPY;

  0522a	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0522d	c7 82 a0 6e 00
	00 46 00 00 00	 mov	 DWORD PTR [edx+28320], 70 ; 00000046H

; 804  : 			goto out;

  05237	eb 5c		 jmp	 SHORT $out$32609
$LN16@lzma_decod@2:

; 805  : 		}

  05239	e9 4e b0 ff ff	 jmp	 $LN1202@lzma_decod@2
$LN15@lzma_decod@2:

; 806  : 	}
; 807  : 
; 808  : 	rc_normalize(SEQ_NORMALIZE);

  0523e	81 7d e8 00 00
	00 01		 cmp	 DWORD PTR _rc$32574[ebp], 16777216 ; 01000000H
  05245	73 3d		 jae	 SHORT $LN14@lzma_decod@2
  05247	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0524a	3b 45 18	 cmp	 eax, DWORD PTR _in_size$[ebp]
  0524d	75 0f		 jne	 SHORT $LN11@lzma_decod@2
  0524f	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  05252	c7 81 a0 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [ecx+28320], 0
  0525c	eb 37		 jmp	 SHORT $out$32609
$LN11@lzma_decod@2:
  0525e	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  05261	c1 e2 08	 shl	 edx, 8
  05264	89 55 e8	 mov	 DWORD PTR _rc$32574[ebp], edx
  05267	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  0526a	c1 e0 08	 shl	 eax, 8
  0526d	8b 4d 10	 mov	 ecx, DWORD PTR _in$[ebp]
  05270	03 4d c8	 add	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  05273	0f b6 11	 movzx	 edx, BYTE PTR [ecx]
  05276	0b c2		 or	 eax, edx
  05278	89 45 ec	 mov	 DWORD PTR _rc$32574[ebp+4], eax
  0527b	8b 45 c8	 mov	 eax, DWORD PTR _rc_in_pos$32575[ebp]
  0527e	83 c0 01	 add	 eax, 1
  05281	89 45 c8	 mov	 DWORD PTR _rc_in_pos$32575[ebp], eax
$LN14@lzma_decod@2:
  05284	33 c9		 xor	 ecx, ecx
  05286	75 b6		 jne	 SHORT $LN15@lzma_decod@2

; 809  : 	coder->sequence = SEQ_IS_MATCH;

  05288	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0528b	c7 82 a0 6e 00
	00 01 00 00 00	 mov	 DWORD PTR [edx+28320], 1
$out$32609:

; 810  : 
; 811  : out:
; 812  : 	// Save state
; 813  : 
; 814  : 	// NOTE: Must not copy dict.limit.
; 815  : 	dictptr->pos = dict.pos;

  05295	8b 45 0c	 mov	 eax, DWORD PTR _dictptr$[ebp]
  05298	8b 4d d0	 mov	 ecx, DWORD PTR _dict$32572[ebp+4]
  0529b	89 48 04	 mov	 DWORD PTR [eax+4], ecx

; 816  : 	dictptr->full = dict.full;

  0529e	8b 55 0c	 mov	 edx, DWORD PTR _dictptr$[ebp]
  052a1	8b 45 d4	 mov	 eax, DWORD PTR _dict$32572[ebp+8]
  052a4	89 42 08	 mov	 DWORD PTR [edx+8], eax
$LN10@lzma_decod@2:

; 817  : 
; 818  : 	rc_from_local(coder->rc, *in_pos);

  052a7	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  052aa	81 c1 6c 6e 00
	00		 add	 ecx, 28268		; 00006e6cH
  052b0	8b 55 e8	 mov	 edx, DWORD PTR _rc$32574[ebp]
  052b3	89 11		 mov	 DWORD PTR [ecx], edx
  052b5	8b 45 ec	 mov	 eax, DWORD PTR _rc$32574[ebp+4]
  052b8	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  052bb	8b 55 f0	 mov	 edx, DWORD PTR _rc$32574[ebp+8]
  052be	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  052c1	8b 45 14	 mov	 eax, DWORD PTR _in_pos$[ebp]
  052c4	8b 4d c8	 mov	 ecx, DWORD PTR _rc_in_pos$32575[ebp]
  052c7	89 08		 mov	 DWORD PTR [eax], ecx
  052c9	33 d2		 xor	 edx, edx
  052cb	75 da		 jne	 SHORT $LN10@lzma_decod@2

; 819  : 
; 820  : 	coder->state = state;

  052cd	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  052d0	8b 4d b4	 mov	 ecx, DWORD PTR _state$32577[ebp]
  052d3	89 88 78 6e 00
	00		 mov	 DWORD PTR [eax+28280], ecx

; 821  : 	coder->rep0 = rep0;

  052d9	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  052dc	8b 45 e4	 mov	 eax, DWORD PTR _rep0$32578[ebp]
  052df	89 82 7c 6e 00
	00		 mov	 DWORD PTR [edx+28284], eax

; 822  : 	coder->rep1 = rep1;

  052e5	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  052e8	8b 55 f4	 mov	 edx, DWORD PTR _rep1$32579[ebp]
  052eb	89 91 80 6e 00
	00		 mov	 DWORD PTR [ecx+28288], edx

; 823  : 	coder->rep2 = rep2;

  052f1	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  052f4	8b 4d b8	 mov	 ecx, DWORD PTR _rep2$32580[ebp]
  052f7	89 88 84 6e 00
	00		 mov	 DWORD PTR [eax+28292], ecx

; 824  : 	coder->rep3 = rep3;

  052fd	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  05300	8b 45 c4	 mov	 eax, DWORD PTR _rep3$32581[ebp]
  05303	89 82 88 6e 00
	00		 mov	 DWORD PTR [edx+28296], eax

; 825  : 
; 826  : 	coder->probs = probs;

  05309	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  0530c	8b 55 ac	 mov	 edx, DWORD PTR _probs$32583[ebp]
  0530f	89 91 a4 6e 00
	00		 mov	 DWORD PTR [ecx+28324], edx

; 827  : 	coder->symbol = symbol;

  05315	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  05318	8b 4d b0	 mov	 ecx, DWORD PTR _symbol$32584[ebp]
  0531b	89 88 a8 6e 00
	00		 mov	 DWORD PTR [eax+28328], ecx

; 828  : 	coder->limit = limit;

  05321	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  05324	8b 45 9c	 mov	 eax, DWORD PTR _limit$32585[ebp]
  05327	89 82 ac 6e 00
	00		 mov	 DWORD PTR [edx+28332], eax

; 829  : 	coder->offset = offset;

  0532d	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  05330	8b 55 a4	 mov	 edx, DWORD PTR _offset$32586[ebp]
  05333	89 91 b0 6e 00
	00		 mov	 DWORD PTR [ecx+28336], edx

; 830  : 	coder->len = len;

  05339	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  0533c	8b 4d a8	 mov	 ecx, DWORD PTR _len$32587[ebp]
  0533f	89 88 b4 6e 00
	00		 mov	 DWORD PTR [eax+28340], ecx

; 831  : 
; 832  : 	// Update the remaining amount of uncompressed data if uncompressed
; 833  : 	// size was known.
; 834  : 	if (coder->uncompressed_size != LZMA_VLI_UNKNOWN) {

  05345	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  05348	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv6682[ebp], edx
  0534e	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv6682[ebp]
  05354	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR tv6682[ebp]
  0535a	8b 90 98 6e 00
	00		 mov	 edx, DWORD PTR [eax+28312]
  05360	23 91 9c 6e 00
	00		 and	 edx, DWORD PTR [ecx+28316]
  05366	83 fa ff	 cmp	 edx, -1
  05369	74 78		 je	 SHORT $LN7@lzma_decod@2

; 835  : 		coder->uncompressed_size -= dict.pos - dict_start;

  0536b	8b 45 d0	 mov	 eax, DWORD PTR _dict$32572[ebp+4]
  0536e	2b 45 bc	 sub	 eax, DWORD PTR _dict_start$32573[ebp]
  05371	33 c9		 xor	 ecx, ecx
  05373	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  05376	8b b2 98 6e 00
	00		 mov	 esi, DWORD PTR [edx+28312]
  0537c	2b f0		 sub	 esi, eax
  0537e	8b 82 9c 6e 00
	00		 mov	 eax, DWORD PTR [edx+28316]
  05384	1b c1		 sbb	 eax, ecx
  05386	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  05389	89 b1 98 6e 00
	00		 mov	 DWORD PTR [ecx+28312], esi
  0538f	89 81 9c 6e 00
	00		 mov	 DWORD PTR [ecx+28316], eax

; 836  : 
; 837  : 		// Since there cannot be end of payload marker if the
; 838  : 		// uncompressed size was known, we check here if we
; 839  : 		// finished decoding.
; 840  : 		if (coder->uncompressed_size == 0 && ret == LZMA_OK
; 841  : 				&& coder->sequence != SEQ_NORMALIZE)

  05395	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  05398	89 95 20 ff ff
	ff		 mov	 DWORD PTR tv6701[ebp], edx
  0539e	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR tv6701[ebp]
  053a4	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR tv6701[ebp]
  053aa	8b 90 98 6e 00
	00		 mov	 edx, DWORD PTR [eax+28312]
  053b0	0b 91 9c 6e 00
	00		 or	 edx, DWORD PTR [ecx+28316]
  053b6	75 2b		 jne	 SHORT $LN7@lzma_decod@2
  053b8	83 7d 90 00	 cmp	 DWORD PTR _ret$32591[ebp], 0
  053bc	75 25		 jne	 SHORT $LN7@lzma_decod@2
  053be	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  053c1	83 b8 a0 6e 00
	00 00		 cmp	 DWORD PTR [eax+28320], 0
  053c8	74 19		 je	 SHORT $LN7@lzma_decod@2

; 842  : 			ret = coder->sequence == SEQ_IS_MATCH
; 843  : 					? LZMA_STREAM_END : LZMA_DATA_ERROR;

  053ca	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  053cd	33 d2		 xor	 edx, edx
  053cf	83 b9 a0 6e 00
	00 01		 cmp	 DWORD PTR [ecx+28320], 1
  053d6	0f 95 c2	 setne	 dl
  053d9	8d 14 d5 01 00
	00 00		 lea	 edx, DWORD PTR [edx*8+1]
  053e0	89 55 90	 mov	 DWORD PTR _ret$32591[ebp], edx
$LN7@lzma_decod@2:

; 844  : 	}
; 845  : 
; 846  : 	// We can do an additional check in the range decoder to catch some
; 847  : 	// corrupted files.
; 848  : 	if (ret == LZMA_STREAM_END) {

  053e3	83 7d 90 01	 cmp	 DWORD PTR _ret$32591[ebp], 1
  053e7	75 3e		 jne	 SHORT $LN5@lzma_decod@2

; 849  : 		if (!rc_is_finished(coder->rc))

  053e9	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  053ec	83 b8 70 6e 00
	00 00		 cmp	 DWORD PTR [eax+28272], 0
  053f3	74 07		 je	 SHORT $LN3@lzma_decod@2

; 850  : 			ret = LZMA_DATA_ERROR;

  053f5	c7 45 90 09 00
	00 00		 mov	 DWORD PTR _ret$32591[ebp], 9
$LN3@lzma_decod@2:

; 851  : 
; 852  : 		// Reset the range decoder so that it is ready to reinitialize
; 853  : 		// for a new LZMA2 chunk.
; 854  : 		rc_reset(coder->rc);

  053fc	8b 4d fc	 mov	 ecx, DWORD PTR _coder$[ebp]
  053ff	c7 81 6c 6e 00
	00 ff ff ff ff	 mov	 DWORD PTR [ecx+28268], -1
  05409	8b 55 fc	 mov	 edx, DWORD PTR _coder$[ebp]
  0540c	c7 82 70 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [edx+28272], 0
  05416	8b 45 fc	 mov	 eax, DWORD PTR _coder$[ebp]
  05419	c7 80 74 6e 00
	00 05 00 00 00	 mov	 DWORD PTR [eax+28276], 5
  05423	33 c9		 xor	 ecx, ecx
  05425	75 d5		 jne	 SHORT $LN3@lzma_decod@2
$LN5@lzma_decod@2:

; 855  : 	}
; 856  :   }
; 857  : 
; 858  : 	return ret;

  05427	8b 45 90	 mov	 eax, DWORD PTR _ret$32591[ebp]
$LN1207@lzma_decod@2:

; 859  :   }}}
; 860  : }

  0542a	5e		 pop	 esi
  0542b	8b e5		 mov	 esp, ebp
  0542d	5d		 pop	 ebp
  0542e	c3		 ret	 0
  0542f	90		 npad	 1
$LN1262@lzma_decod@2:
  05430	00 00 00 00	 DD	 $LN1200@lzma_decod@2
  05434	00 00 00 00	 DD	 $LN1200@lzma_decod@2
  05438	00 00 00 00	 DD	 $LN1184@lzma_decod@2
  0543c	00 00 00 00	 DD	 $LN1167@lzma_decod@2
  05440	00 00 00 00	 DD	 $LN1150@lzma_decod@2
  05444	00 00 00 00	 DD	 $LN1133@lzma_decod@2
  05448	00 00 00 00	 DD	 $LN1116@lzma_decod@2
  0544c	00 00 00 00	 DD	 $LN1099@lzma_decod@2
  05450	00 00 00 00	 DD	 $LN1082@lzma_decod@2
  05454	00 00 00 00	 DD	 $LN1065@lzma_decod@2
  05458	00 00 00 00	 DD	 $LN1051@lzma_decod@2
  0545c	00 00 00 00	 DD	 $LN1034@lzma_decod@2
  05460	00 00 00 00	 DD	 $LN1017@lzma_decod@2
  05464	00 00 00 00	 DD	 $LN1000@lzma_decod@2
  05468	00 00 00 00	 DD	 $LN983@lzma_decod@2
  0546c	00 00 00 00	 DD	 $LN966@lzma_decod@2
  05470	00 00 00 00	 DD	 $LN949@lzma_decod@2
  05474	00 00 00 00	 DD	 $LN932@lzma_decod@2
  05478	00 00 00 00	 DD	 $LN915@lzma_decod@2
  0547c	00 00 00 00	 DD	 $LN909@lzma_decod@2
  05480	00 00 00 00	 DD	 $LN896@lzma_decod@2
  05484	00 00 00 00	 DD	 $LN883@lzma_decod@2
  05488	00 00 00 00	 DD	 $LN866@lzma_decod@2
  0548c	00 00 00 00	 DD	 $LN849@lzma_decod@2
  05490	00 00 00 00	 DD	 $LN831@lzma_decod@2
  05494	00 00 00 00	 DD	 $LN818@lzma_decod@2
  05498	00 00 00 00	 DD	 $LN801@lzma_decod@2
  0549c	00 00 00 00	 DD	 $LN784@lzma_decod@2
  054a0	00 00 00 00	 DD	 $LN763@lzma_decod@2
  054a4	00 00 00 00	 DD	 $LN746@lzma_decod@2
  054a8	00 00 00 00	 DD	 $LN729@lzma_decod@2
  054ac	00 00 00 00	 DD	 $LN712@lzma_decod@2
  054b0	00 00 00 00	 DD	 $LN695@lzma_decod@2
  054b4	00 00 00 00	 DD	 $LN678@lzma_decod@2
  054b8	00 00 00 00	 DD	 $LN661@lzma_decod@2
  054bc	00 00 00 00	 DD	 $LN644@lzma_decod@2
  054c0	00 00 00 00	 DD	 $LN627@lzma_decod@2
  054c4	00 00 00 00	 DD	 $LN610@lzma_decod@2
  054c8	00 00 00 00	 DD	 $LN593@lzma_decod@2
  054cc	00 00 00 00	 DD	 $LN576@lzma_decod@2
  054d0	00 00 00 00	 DD	 $LN559@lzma_decod@2
  054d4	00 00 00 00	 DD	 $LN542@lzma_decod@2
  054d8	00 00 00 00	 DD	 $LN526@lzma_decod@2
  054dc	00 00 00 00	 DD	 $LN430@lzma_decod@2
  054e0	00 00 00 00	 DD	 $LN421@lzma_decod@2
  054e4	00 00 00 00	 DD	 $LN404@lzma_decod@2
  054e8	00 00 00 00	 DD	 $LN387@lzma_decod@2
  054ec	00 00 00 00	 DD	 $LN370@lzma_decod@2
  054f0	00 00 00 00	 DD	 $LN354@lzma_decod@2
  054f4	00 00 00 00	 DD	 $LN342@lzma_decod@2
  054f8	00 00 00 00	 DD	 $LN323@lzma_decod@2
  054fc	00 00 00 00	 DD	 $LN332@lzma_decod@2
  05500	00 00 00 00	 DD	 $LN313@lzma_decod@2
  05504	00 00 00 00	 DD	 $LN299@lzma_decod@2
  05508	00 00 00 00	 DD	 $LN282@lzma_decod@2
  0550c	00 00 00 00	 DD	 $LN269@lzma_decod@2
  05510	00 00 00 00	 DD	 $LN252@lzma_decod@2
  05514	00 00 00 00	 DD	 $LN235@lzma_decod@2
  05518	00 00 00 00	 DD	 $LN217@lzma_decod@2
  0551c	00 00 00 00	 DD	 $LN204@lzma_decod@2
  05520	00 00 00 00	 DD	 $LN187@lzma_decod@2
  05524	00 00 00 00	 DD	 $LN170@lzma_decod@2
  05528	00 00 00 00	 DD	 $LN149@lzma_decod@2
  0552c	00 00 00 00	 DD	 $LN132@lzma_decod@2
  05530	00 00 00 00	 DD	 $LN115@lzma_decod@2
  05534	00 00 00 00	 DD	 $LN98@lzma_decod@2
  05538	00 00 00 00	 DD	 $LN81@lzma_decod@2
  0553c	00 00 00 00	 DD	 $LN64@lzma_decod@2
  05540	00 00 00 00	 DD	 $LN47@lzma_decod@2
  05544	00 00 00 00	 DD	 $LN30@lzma_decod@2
  05548	00 00 00 00	 DD	 $LN17@lzma_decod@2
$LN1263@lzma_decod@2:
  0554c	00 00 00 00	 DD	 $LN451@lzma_decod@2
  05550	00 00 00 00	 DD	 $LN468@lzma_decod@2
  05554	00 00 00 00	 DD	 $LN485@lzma_decod@2
  05558	00 00 00 00	 DD	 $LN502@lzma_decod@2
  0555c	00 00 00 00	 DD	 $LN519@lzma_decod@2
_lzma_decode ENDP
PUBLIC	_lzma_lzma_decoder_create
; Function compile flags: /Odtp
;	COMDAT _lzma_lzma_decoder_create
_TEXT	SEGMENT
_options$33908 = -4					; size = 4
_lz$ = 8						; size = 4
_allocator$ = 12					; size = 4
_opt$ = 16						; size = 4
_lz_options$ = 20					; size = 4
_lzma_lzma_decoder_create PROC				; COMDAT

; 966  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	51		 push	 ecx

; 967  : 	if (lz->coder == NULL) {

  00004	8b 45 08	 mov	 eax, DWORD PTR _lz$[ebp]
  00007	83 38 00	 cmp	 DWORD PTR [eax], 0
  0000a	75 43		 jne	 SHORT $LN2@lzma_lzma_@4

; 968  : 		lz->coder = lzma_alloc(sizeof(lzma_lzma1_decoder), allocator);

  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _allocator$[ebp]
  0000f	51		 push	 ecx
  00010	68 b8 6e 00 00	 push	 28344			; 00006eb8H
  00015	e8 00 00 00 00	 call	 _lzma_alloc
  0001a	83 c4 08	 add	 esp, 8
  0001d	8b 55 08	 mov	 edx, DWORD PTR _lz$[ebp]
  00020	89 02		 mov	 DWORD PTR [edx], eax

; 969  : 		if (lz->coder == NULL)

  00022	8b 45 08	 mov	 eax, DWORD PTR _lz$[ebp]
  00025	83 38 00	 cmp	 DWORD PTR [eax], 0
  00028	75 07		 jne	 SHORT $LN1@lzma_lzma_@4

; 970  : 			return LZMA_MEM_ERROR;

  0002a	b8 05 00 00 00	 mov	 eax, 5
  0002f	eb 48		 jmp	 SHORT $LN3@lzma_lzma_@4
$LN1@lzma_lzma_@4:

; 971  : 
; 972  : 		lz->code = &lzma_decode;

  00031	8b 4d 08	 mov	 ecx, DWORD PTR _lz$[ebp]
  00034	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], OFFSET _lzma_decode

; 973  : 		lz->reset = &lzma_decoder_reset;

  0003b	8b 55 08	 mov	 edx, DWORD PTR _lz$[ebp]
  0003e	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], OFFSET _lzma_decoder_reset

; 974  : 		lz->set_uncompressed = &lzma_decoder_uncompressed;

  00045	8b 45 08	 mov	 eax, DWORD PTR _lz$[ebp]
  00048	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET _lzma_decoder_uncompressed
$LN2@lzma_lzma_@4:

; 975  : 	}
; 976  : 
; 977  : 	// All dictionary sizes are OK here. LZ decoder will take care of
; 978  : 	// the special cases.
; 979  :   {
; 980  : 	const lzma_options_lzma *options = opt;

  0004f	8b 4d 10	 mov	 ecx, DWORD PTR _opt$[ebp]
  00052	89 4d fc	 mov	 DWORD PTR _options$33908[ebp], ecx

; 981  : 	lz_options->dict_size = options->dict_size;

  00055	8b 55 14	 mov	 edx, DWORD PTR _lz_options$[ebp]
  00058	8b 45 fc	 mov	 eax, DWORD PTR _options$33908[ebp]
  0005b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005d	89 0a		 mov	 DWORD PTR [edx], ecx

; 982  : 	lz_options->preset_dict = options->preset_dict;

  0005f	8b 55 14	 mov	 edx, DWORD PTR _lz_options$[ebp]
  00062	8b 45 fc	 mov	 eax, DWORD PTR _options$33908[ebp]
  00065	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00068	89 4a 04	 mov	 DWORD PTR [edx+4], ecx

; 983  : 	lz_options->preset_dict_size = options->preset_dict_size;

  0006b	8b 55 14	 mov	 edx, DWORD PTR _lz_options$[ebp]
  0006e	8b 45 fc	 mov	 eax, DWORD PTR _options$33908[ebp]
  00071	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00074	89 4a 08	 mov	 DWORD PTR [edx+8], ecx

; 984  :   }
; 985  : 
; 986  : 	return LZMA_OK;

  00077	33 c0		 xor	 eax, eax
$LN3@lzma_lzma_@4:

; 987  : }

  00079	8b e5		 mov	 esp, ebp
  0007b	5d		 pop	 ebp
  0007c	c3		 ret	 0
_lzma_lzma_decoder_create ENDP
; Function compile flags: /Odtp
;	COMDAT _lzma_decoder_init
_TEXT	SEGMENT
tv89 = -8						; size = 4
_ret_$33923 = -4					; size = 4
_lz$ = 8						; size = 4
_allocator$ = 12					; size = 4
_options$ = 16						; size = 4
_lz_options$ = 20					; size = 4
_lzma_decoder_init PROC					; COMDAT

; 996  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 997  : 	if (!is_lclppb_valid(options))

  00006	8b 45 10	 mov	 eax, DWORD PTR _options$[ebp]
  00009	83 78 0c 04	 cmp	 DWORD PTR [eax+12], 4
  0000d	77 2c		 ja	 SHORT $LN10@lzma_decod@3
  0000f	8b 4d 10	 mov	 ecx, DWORD PTR _options$[ebp]
  00012	83 79 10 04	 cmp	 DWORD PTR [ecx+16], 4
  00016	77 23		 ja	 SHORT $LN10@lzma_decod@3
  00018	8b 55 10	 mov	 edx, DWORD PTR _options$[ebp]
  0001b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0001e	8b 4d 10	 mov	 ecx, DWORD PTR _options$[ebp]
  00021	03 41 10	 add	 eax, DWORD PTR [ecx+16]
  00024	83 f8 04	 cmp	 eax, 4
  00027	77 12		 ja	 SHORT $LN10@lzma_decod@3
  00029	8b 55 10	 mov	 edx, DWORD PTR _options$[ebp]
  0002c	83 7a 14 04	 cmp	 DWORD PTR [edx+20], 4
  00030	77 09		 ja	 SHORT $LN10@lzma_decod@3
  00032	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv89[ebp], 1
  00039	eb 07		 jmp	 SHORT $LN8@lzma_decod@3
$LN10@lzma_decod@3:
  0003b	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv89[ebp], 0
$LN8@lzma_decod@3:
  00042	0f b6 45 f8	 movzx	 eax, BYTE PTR tv89[ebp]
  00046	85 c0		 test	 eax, eax
  00048	75 07		 jne	 SHORT $LN4@lzma_decod@3

; 998  : 		return LZMA_PROG_ERROR;

  0004a	b8 0b 00 00 00	 mov	 eax, 11			; 0000000bH
  0004f	eb 50		 jmp	 SHORT $LN6@lzma_decod@3
$LN4@lzma_decod@3:

; 999  : 
; 1000 : 	return_if_error(lzma_lzma_decoder_create(
; 1001 : 			lz, allocator, options, lz_options));

  00051	8b 4d 14	 mov	 ecx, DWORD PTR _lz_options$[ebp]
  00054	51		 push	 ecx
  00055	8b 55 10	 mov	 edx, DWORD PTR _options$[ebp]
  00058	52		 push	 edx
  00059	8b 45 0c	 mov	 eax, DWORD PTR _allocator$[ebp]
  0005c	50		 push	 eax
  0005d	8b 4d 08	 mov	 ecx, DWORD PTR _lz$[ebp]
  00060	51		 push	 ecx
  00061	e8 00 00 00 00	 call	 _lzma_lzma_decoder_create
  00066	83 c4 10	 add	 esp, 16			; 00000010H
  00069	89 45 fc	 mov	 DWORD PTR _ret_$33923[ebp], eax
  0006c	83 7d fc 00	 cmp	 DWORD PTR _ret_$33923[ebp], 0
  00070	74 05		 je	 SHORT $LN3@lzma_decod@3
  00072	8b 45 fc	 mov	 eax, DWORD PTR _ret_$33923[ebp]
  00075	eb 2a		 jmp	 SHORT $LN6@lzma_decod@3
$LN3@lzma_decod@3:
  00077	33 d2		 xor	 edx, edx
  00079	75 d6		 jne	 SHORT $LN4@lzma_decod@3

; 1002 : 
; 1003 : 	lzma_decoder_reset(lz->coder, options);

  0007b	8b 45 10	 mov	 eax, DWORD PTR _options$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d 08	 mov	 ecx, DWORD PTR _lz$[ebp]
  00082	8b 11		 mov	 edx, DWORD PTR [ecx]
  00084	52		 push	 edx
  00085	e8 00 00 00 00	 call	 _lzma_decoder_reset
  0008a	83 c4 08	 add	 esp, 8

; 1004 : 	lzma_decoder_uncompressed(lz->coder, LZMA_VLI_UNKNOWN);

  0008d	6a ff		 push	 -1
  0008f	6a ff		 push	 -1
  00091	8b 45 08	 mov	 eax, DWORD PTR _lz$[ebp]
  00094	8b 08		 mov	 ecx, DWORD PTR [eax]
  00096	51		 push	 ecx
  00097	e8 00 00 00 00	 call	 _lzma_decoder_uncompressed
  0009c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1005 : 
; 1006 : 	return LZMA_OK;

  0009f	33 c0		 xor	 eax, eax
$LN6@lzma_decod@3:

; 1007 : }

  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c3		 ret	 0
_lzma_decoder_init ENDP
; Function compile flags: /Odtp
;	COMDAT _lzma_lzma_decoder_init
_TEXT	SEGMENT
_next$ = 8						; size = 4
_allocator$ = 12					; size = 4
_filters$ = 16						; size = 4
_lzma_lzma_decoder_init PROC				; COMDAT

; 1013 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 1014 : 	// LZMA can only be the last filter in the chain. This is enforced
; 1015 : 	// by the raw_decoder initialization.
; 1016 : 	assert(filters[1].init == NULL);
; 1017 : 
; 1018 : 	return lzma_lz_decoder_init(next, allocator, filters,
; 1019 : 			&lzma_decoder_init);

  00003	68 00 00 00 00	 push	 OFFSET _lzma_decoder_init
  00008	8b 45 10	 mov	 eax, DWORD PTR _filters$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 0c	 mov	 ecx, DWORD PTR _allocator$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 08	 mov	 edx, DWORD PTR _next$[ebp]
  00013	52		 push	 edx
  00014	e8 00 00 00 00	 call	 _lzma_lz_decoder_init
  00019	83 c4 10	 add	 esp, 16			; 00000010H

; 1020 : }

  0001c	5d		 pop	 ebp
  0001d	c3		 ret	 0
_lzma_lzma_decoder_init ENDP
END
