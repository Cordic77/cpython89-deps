; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

	TITLE	d:\SDK\C\Library\Algorithms\Information theory and signal processing\Coding theory\Lossless compression algorithms\Dictionary coders\Lempel?Ziv\Lempel?Ziv?Markov chain (LZMA)\xz\src\c89\liblzma\simple\simple_encoder.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB OLDNAMES

PUBLIC	_lzma_simple_props_encode
PUBLIC	_lzma_simple_props_size
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\simple\simple_encoder.c
;	COMDAT _lzma_simple_props_size
_TEXT	SEGMENT
tv66 = -8						; size = 4
_opt$ = -4						; size = 4
_size$ = 8						; size = 4
_options$ = 12						; size = 4
_lzma_simple_props_size PROC				; COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 19   : 	const lzma_options_bcj *const opt = options;

  00006	8b 45 0c	 mov	 eax, DWORD PTR _options$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _opt$[ebp], eax

; 20   : 	*size = (opt == NULL || opt->start_offset == 0) ? 0 : 4;

  0000c	83 7d fc 00	 cmp	 DWORD PTR _opt$[ebp], 0
  00010	74 11		 je	 SHORT $LN3@lzma_simpl
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _opt$[ebp]
  00015	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00018	74 09		 je	 SHORT $LN3@lzma_simpl
  0001a	c7 45 f8 04 00
	00 00		 mov	 DWORD PTR tv66[ebp], 4
  00021	eb 07		 jmp	 SHORT $LN4@lzma_simpl
$LN3@lzma_simpl:
  00023	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv66[ebp], 0
$LN4@lzma_simpl:
  0002a	8b 55 08	 mov	 edx, DWORD PTR _size$[ebp]
  0002d	8b 45 f8	 mov	 eax, DWORD PTR tv66[ebp]
  00030	89 02		 mov	 DWORD PTR [edx], eax

; 21   : 	return LZMA_OK;

  00032	33 c0		 xor	 eax, eax

; 22   : }

  00034	8b e5		 mov	 esp, ebp
  00036	5d		 pop	 ebp
  00037	c3		 ret	 0
_lzma_simple_props_size ENDP
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\common\tuklib_integer.h
_TEXT	ENDS
;	COMDAT _write32ne
_TEXT	SEGMENT
_buf$ = 8						; size = 4
_num$ = 12						; size = 4
_write32ne PROC						; COMDAT

; 266  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp

; 267  : 	*(uint32_t *)buf = num;

  00003	8b 45 08	 mov	 eax, DWORD PTR _buf$[ebp]
  00006	8b 4d 0c	 mov	 ecx, DWORD PTR _num$[ebp]
  00009	89 08		 mov	 DWORD PTR [eax], ecx

; 268  : 	return;
; 269  : }

  0000b	5d		 pop	 ebp
  0000c	c3		 ret	 0
_write32ne ENDP
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\simple\simple_encoder.c
;	COMDAT _lzma_simple_props_encode
_TEXT	SEGMENT
$T77009 = -8						; size = 4
_opt$ = -4						; size = 4
_options$ = 8						; size = 4
_out$ = 12						; size = 4
_lzma_simple_props_encode PROC				; COMDAT

; 27   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	83 ec 08	 sub	 esp, 8

; 28   : 	const lzma_options_bcj *const opt = options;

  00006	8b 45 08	 mov	 eax, DWORD PTR _options$[ebp]
  00009	89 45 fc	 mov	 DWORD PTR _opt$[ebp], eax

; 29   : 
; 30   : 	// The default start offset is zero, so we don't need to store any
; 31   : 	// options unless the start offset is non-zero.
; 32   : 	if (opt == NULL || opt->start_offset == 0)

  0000c	83 7d fc 00	 cmp	 DWORD PTR _opt$[ebp], 0
  00010	74 08		 je	 SHORT $LN1@lzma_simpl@2
  00012	8b 4d fc	 mov	 ecx, DWORD PTR _opt$[ebp]
  00015	83 39 00	 cmp	 DWORD PTR [ecx], 0
  00018	75 04		 jne	 SHORT $LN2@lzma_simpl@2
$LN1@lzma_simpl@2:

; 33   : 		return LZMA_OK;

  0001a	33 c0		 xor	 eax, eax
  0001c	eb 12		 jmp	 SHORT $LN3@lzma_simpl@2
$LN2@lzma_simpl@2:

; 34   : 
; 35   : 	unaligned_write32le(out, opt->start_offset);

  0001e	8b 55 fc	 mov	 edx, DWORD PTR _opt$[ebp]
  00021	8b 02		 mov	 eax, DWORD PTR [edx]
  00023	89 45 f8	 mov	 DWORD PTR $T77009[ebp], eax
  00026	8b 4d 0c	 mov	 ecx, DWORD PTR _out$[ebp]
  00029	8b 55 f8	 mov	 edx, DWORD PTR $T77009[ebp]
  0002c	89 11		 mov	 DWORD PTR [ecx], edx

; 36   : 
; 37   : 	return LZMA_OK;

  0002e	33 c0		 xor	 eax, eax
$LN3@lzma_simpl@2:

; 38   : }

  00030	8b e5		 mov	 esp, ebp
  00032	5d		 pop	 ebp
  00033	c3		 ret	 0
_lzma_simple_props_encode ENDP
END
