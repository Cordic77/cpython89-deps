; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

?depths@?4??lzma_lzma_preset@@9@9 DB 04H		; `lzma_lzma_preset'::`5'::depths
	DB	08H
	DB	018H
	DB	030H
?dict_pow2@?2??lzma_lzma_preset@@9@9 DB 012H		; `lzma_lzma_preset'::`3'::dict_pow2
	DB	014H
	DB	015H
	DB	016H
	DB	016H
	DB	017H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
PUBLIC	lzma_lzma_preset
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_encoder_presets.c
pdata	SEGMENT
$pdata$lzma_lzma_preset DD imagerel $LN19
	DD	imagerel $LN19+478
	DD	imagerel $unwind$lzma_lzma_preset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_lzma_preset DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_lzma_preset
_TEXT	SEGMENT
level$ = 0
flags$ = 4
supported_flags$ = 8
tv83 = 12
tv86 = 16
tv129 = 20
tv128 = 24
options$ = 48
preset$ = 56
lzma_lzma_preset PROC					; COMDAT

; 19   : {

$LN19:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 20   : 	const uint32_t level = preset & LZMA_PRESET_LEVEL_MASK;

  0000d	8b 44 24 38	 mov	 eax, DWORD PTR preset$[rsp]
  00011	83 e0 1f	 and	 eax, 31
  00014	89 04 24	 mov	 DWORD PTR level$[rsp], eax

; 21   : 	const uint32_t flags = preset & ~LZMA_PRESET_LEVEL_MASK;

  00017	8b 44 24 38	 mov	 eax, DWORD PTR preset$[rsp]
  0001b	83 e0 e0	 and	 eax, -32		; ffffffe0H
  0001e	89 44 24 04	 mov	 DWORD PTR flags$[rsp], eax

; 22   : 	const uint32_t supported_flags = LZMA_PRESET_EXTREME;

  00022	c7 44 24 08 00
	00 00 80	 mov	 DWORD PTR supported_flags$[rsp], -2147483648 ; 80000000H

; 23   : 
; 24   : 	if (level > 9 || (flags & ~supported_flags))

  0002a	83 3c 24 09	 cmp	 DWORD PTR level$[rsp], 9
  0002e	77 10		 ja	 SHORT $LN7@lzma_lzma_@2
  00030	8b 4c 24 08	 mov	 ecx, DWORD PTR supported_flags$[rsp]
  00034	f7 d1		 not	 ecx
  00036	8b 44 24 04	 mov	 eax, DWORD PTR flags$[rsp]
  0003a	23 c1		 and	 eax, ecx
  0003c	85 c0		 test	 eax, eax
  0003e	74 07		 je	 SHORT $LN8@lzma_lzma_@2
$LN7@lzma_lzma_@2:

; 25   : 		return true;

  00040	b0 01		 mov	 al, 1
  00042	e9 92 01 00 00	 jmp	 $LN9@lzma_lzma_@2
$LN8@lzma_lzma_@2:

; 26   : 
; 27   : 	options->preset_dict = NULL;

  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  0004c	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 28   : 	options->preset_dict_size = 0;

  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  00059	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 29   : 
; 30   : 	options->lc = LZMA_LC_DEFAULT;

  00060	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  00065	c7 40 14 03 00
	00 00		 mov	 DWORD PTR [rax+20], 3

; 31   : 	options->lp = LZMA_LP_DEFAULT;

  0006c	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  00071	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [rax+24], 0

; 32   : 	options->pb = LZMA_PB_DEFAULT;

  00078	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  0007d	c7 40 1c 02 00
	00 00		 mov	 DWORD PTR [rax+28], 2

; 33   : 
; 34   :   { static const uint8_t dict_pow2[]
; 35   : 			= { 18, 20, 21, 22, 22, 23, 23, 24, 25, 26 };
; 36   : 	options->dict_size = UINT32_C(1) << dict_pow2[level];

  00084	8b 0c 24	 mov	 ecx, DWORD PTR level$[rsp]
  00087	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?dict_pow2@?2??lzma_lzma_preset@@9@9
  0008e	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  00092	b8 01 00 00 00	 mov	 eax, 1
  00097	d3 e0		 shl	 eax, cl
  00099	8b c8		 mov	 ecx, eax
  0009b	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  000a0	89 08		 mov	 DWORD PTR [rax], ecx

; 37   :   }
; 38   : 
; 39   : 	if (level <= 3) {

  000a2	83 3c 24 03	 cmp	 DWORD PTR level$[rsp], 3
  000a6	77 6c		 ja	 SHORT $LN6@lzma_lzma_@2

; 40   : 		options->mode = LZMA_MODE_FAST;

  000a8	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  000ad	c7 40 20 01 00
	00 00		 mov	 DWORD PTR [rax+32], 1

; 41   : 		options->mf = level == 0 ? LZMA_MF_HC3 : LZMA_MF_HC4;

  000b4	83 3c 24 00	 cmp	 DWORD PTR level$[rsp], 0
  000b8	75 0a		 jne	 SHORT $LN11@lzma_lzma_@2
  000ba	c7 44 24 0c 03
	00 00 00	 mov	 DWORD PTR tv83[rsp], 3
  000c2	eb 08		 jmp	 SHORT $LN12@lzma_lzma_@2
$LN11@lzma_lzma_@2:
  000c4	c7 44 24 0c 04
	00 00 00	 mov	 DWORD PTR tv83[rsp], 4
$LN12@lzma_lzma_@2:
  000cc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR options$[rsp]
  000d1	8b 44 24 0c	 mov	 eax, DWORD PTR tv83[rsp]
  000d5	89 41 28	 mov	 DWORD PTR [rcx+40], eax

; 42   : 		options->nice_len = level <= 1 ? 128 : 273;

  000d8	83 3c 24 01	 cmp	 DWORD PTR level$[rsp], 1
  000dc	77 0a		 ja	 SHORT $LN13@lzma_lzma_@2
  000de	c7 44 24 10 80
	00 00 00	 mov	 DWORD PTR tv86[rsp], 128 ; 00000080H
  000e6	eb 08		 jmp	 SHORT $LN14@lzma_lzma_@2
$LN13@lzma_lzma_@2:
  000e8	c7 44 24 10 11
	01 00 00	 mov	 DWORD PTR tv86[rsp], 273 ; 00000111H
$LN14@lzma_lzma_@2:
  000f0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR options$[rsp]
  000f5	8b 44 24 10	 mov	 eax, DWORD PTR tv86[rsp]
  000f9	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 43   : 	  {
; 44   : 		static const uint8_t depths[] = { 4, 8, 24, 48 };
; 45   : 		options->depth = depths[level];

  000fc	8b 0c 24	 mov	 ecx, DWORD PTR level$[rsp]
  000ff	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?depths@?4??lzma_lzma_preset@@9@9
  00106	0f b6 0c 08	 movzx	 ecx, BYTE PTR [rax+rcx]
  0010a	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  0010f	89 48 2c	 mov	 DWORD PTR [rax+44], ecx

; 46   : 	  }
; 47   : 	} else {

  00112	eb 60		 jmp	 SHORT $LN5@lzma_lzma_@2
$LN6@lzma_lzma_@2:

; 48   : 		options->mode = LZMA_MODE_NORMAL;

  00114	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  00119	c7 40 20 02 00
	00 00		 mov	 DWORD PTR [rax+32], 2

; 49   : 		options->mf = LZMA_MF_BT4;

  00120	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  00125	c7 40 28 14 00
	00 00		 mov	 DWORD PTR [rax+40], 20

; 50   : 		options->nice_len = level == 4 ? 16 : level == 5 ? 32 : 64;

  0012c	83 3c 24 04	 cmp	 DWORD PTR level$[rsp], 4
  00130	75 0a		 jne	 SHORT $LN17@lzma_lzma_@2
  00132	c7 44 24 14 10
	00 00 00	 mov	 DWORD PTR tv129[rsp], 16
  0013a	eb 20		 jmp	 SHORT $LN18@lzma_lzma_@2
$LN17@lzma_lzma_@2:
  0013c	83 3c 24 05	 cmp	 DWORD PTR level$[rsp], 5
  00140	75 0a		 jne	 SHORT $LN15@lzma_lzma_@2
  00142	c7 44 24 18 20
	00 00 00	 mov	 DWORD PTR tv128[rsp], 32 ; 00000020H
  0014a	eb 08		 jmp	 SHORT $LN16@lzma_lzma_@2
$LN15@lzma_lzma_@2:
  0014c	c7 44 24 18 40
	00 00 00	 mov	 DWORD PTR tv128[rsp], 64 ; 00000040H
$LN16@lzma_lzma_@2:
  00154	8b 44 24 18	 mov	 eax, DWORD PTR tv128[rsp]
  00158	89 44 24 14	 mov	 DWORD PTR tv129[rsp], eax
$LN18@lzma_lzma_@2:
  0015c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR options$[rsp]
  00161	8b 44 24 14	 mov	 eax, DWORD PTR tv129[rsp]
  00165	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 51   : 		options->depth = 0;

  00168	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  0016d	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [rax+44], 0
$LN5@lzma_lzma_@2:

; 52   : 	}
; 53   : 
; 54   : 	if (flags & LZMA_PRESET_EXTREME) {

  00174	8b 44 24 04	 mov	 eax, DWORD PTR flags$[rsp]
  00178	25 00 00 00 80	 and	 eax, -2147483648	; 80000000H
  0017d	85 c0		 test	 eax, eax
  0017f	74 56		 je	 SHORT $LN4@lzma_lzma_@2

; 55   : 		options->mode = LZMA_MODE_NORMAL;

  00181	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  00186	c7 40 20 02 00
	00 00		 mov	 DWORD PTR [rax+32], 2

; 56   : 		options->mf = LZMA_MF_BT4;

  0018d	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  00192	c7 40 28 14 00
	00 00		 mov	 DWORD PTR [rax+40], 20

; 57   : 		if (level == 3 || level == 5) {

  00199	83 3c 24 03	 cmp	 DWORD PTR level$[rsp], 3
  0019d	74 06		 je	 SHORT $LN2@lzma_lzma_@2
  0019f	83 3c 24 05	 cmp	 DWORD PTR level$[rsp], 5
  001a3	75 1a		 jne	 SHORT $LN3@lzma_lzma_@2
$LN2@lzma_lzma_@2:

; 58   : 			options->nice_len = 192;

  001a5	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  001aa	c7 40 24 c0 00
	00 00		 mov	 DWORD PTR [rax+36], 192	; 000000c0H

; 59   : 			options->depth = 0;

  001b1	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  001b6	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [rax+44], 0

; 60   : 		} else {

  001bd	eb 18		 jmp	 SHORT $LN1@lzma_lzma_@2
$LN3@lzma_lzma_@2:

; 61   : 			options->nice_len = 273;

  001bf	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  001c4	c7 40 24 11 01
	00 00		 mov	 DWORD PTR [rax+36], 273	; 00000111H

; 62   : 			options->depth = 512;

  001cb	48 8b 44 24 30	 mov	 rax, QWORD PTR options$[rsp]
  001d0	c7 40 2c 00 02
	00 00		 mov	 DWORD PTR [rax+44], 512	; 00000200H
$LN1@lzma_lzma_@2:
$LN4@lzma_lzma_@2:

; 63   : 		}
; 64   : 	}
; 65   : 
; 66   : 	return false;

  001d7	32 c0		 xor	 al, al
$LN9@lzma_lzma_@2:

; 67   : }

  001d9	48 83 c4 28	 add	 rsp, 40			; 00000028H
  001dd	c3		 ret	 0
lzma_lzma_preset ENDP
END
