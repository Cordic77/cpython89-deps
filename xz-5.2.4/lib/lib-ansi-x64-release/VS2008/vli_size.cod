; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	lzma_vli_size
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\common\vli_size.c
pdata	SEGMENT
$pdata$lzma_vli_size DD imagerel $LN7
	DD	imagerel $LN7+76
	DD	imagerel $unwind$lzma_vli_size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_vli_size DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_vli_size
_TEXT	SEGMENT
i$32809 = 0
vli$ = 32
lzma_vli_size PROC					; COMDAT

; 18   : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 19   : 	if (vli > LZMA_VLI_MAX)

  00009	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00013	48 39 44 24 20	 cmp	 QWORD PTR vli$[rsp], rax
  00018	76 04		 jbe	 SHORT $LN4@lzma_vli_s

; 20   : 		return 0;

  0001a	33 c0		 xor	 eax, eax
  0001c	eb 29		 jmp	 SHORT $LN5@lzma_vli_s
$LN4@lzma_vli_s:

; 21   : 
; 22   :   { uint32_t i = 0;

  0001e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$32809[rsp], 0
$LN3@lzma_vli_s:

; 23   : 	do {
; 24   : 		vli >>= 7;

  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR vli$[rsp]
  0002a	48 c1 e8 07	 shr	 rax, 7
  0002e	48 89 44 24 20	 mov	 QWORD PTR vli$[rsp], rax

; 25   : 		++i;

  00033	8b 04 24	 mov	 eax, DWORD PTR i$32809[rsp]
  00036	83 c0 01	 add	 eax, 1
  00039	89 04 24	 mov	 DWORD PTR i$32809[rsp], eax

; 26   : 	} while (vli != 0);

  0003c	48 83 7c 24 20
	00		 cmp	 QWORD PTR vli$[rsp], 0
  00042	75 e1		 jne	 SHORT $LN3@lzma_vli_s

; 27   : 
; 28   : 	assert(i <= LZMA_VLI_BYTES_MAX);
; 29   : 	return i;

  00044	8b 04 24	 mov	 eax, DWORD PTR i$32809[rsp]
$LN5@lzma_vli_s:

; 30   :   }
; 31   : }

  00047	48 83 c4 18	 add	 rsp, 24
  0004b	c3		 ret	 0
lzma_vli_size ENDP
END
