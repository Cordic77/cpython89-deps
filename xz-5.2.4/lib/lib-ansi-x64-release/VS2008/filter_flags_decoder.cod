; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	lzma_filter_flags_decode
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\common\filter_flags_decoder.c
pdata	SEGMENT
$pdata$lzma_filter_flags_decode DD imagerel $LN13
	DD	imagerel $LN13+289
	DD	imagerel $unwind$lzma_filter_flags_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_filter_flags_decode DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_filter_flags_decode
_TEXT	SEGMENT
ret_$32828 = 48
props_size$32832 = 56
ret_$32836 = 64
ret$32840 = 68
filter$ = 96
allocator$ = 104
in$ = 112
in_pos$ = 120
in_size$ = 128
lzma_filter_flags_decode PROC				; COMDAT

; 20   : {

$LN13:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 21   : 	// Set the pointer to NULL so the caller can always safely free it.
; 22   : 	filter->options = NULL;

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR filter$[rsp]
  0001d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN10@lzma_filte:

; 23   : 
; 24   : 	// Filter ID
; 25   : 	return_if_error(lzma_vli_decode(&filter->id, NULL,
; 26   : 			in, in_pos, in_size));

  00025	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0002d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00032	4c 8b 4c 24 78	 mov	 r9, QWORD PTR in_pos$[rsp]
  00037	4c 8b 44 24 70	 mov	 r8, QWORD PTR in$[rsp]
  0003c	33 d2		 xor	 edx, edx
  0003e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filter$[rsp]
  00043	e8 00 00 00 00	 call	 lzma_vli_decode
  00048	89 44 24 30	 mov	 DWORD PTR ret_$32828[rsp], eax
  0004c	83 7c 24 30 00	 cmp	 DWORD PTR ret_$32828[rsp], 0
  00051	74 09		 je	 SHORT $LN7@lzma_filte
  00053	8b 44 24 30	 mov	 eax, DWORD PTR ret_$32828[rsp]
  00057	e9 c0 00 00 00	 jmp	 $LN11@lzma_filte
$LN7@lzma_filte:
  0005c	33 c0		 xor	 eax, eax
  0005e	85 c0		 test	 eax, eax
  00060	75 c3		 jne	 SHORT $LN10@lzma_filte

; 27   : 
; 28   : 	if (filter->id >= LZMA_FILTER_RESERVED_START)

  00062	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filter$[rsp]
  00067	48 b8 00 00 00
	00 00 00 00 40	 mov	 rax, 4611686018427387904 ; 4000000000000000H
  00071	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00074	72 0a		 jb	 SHORT $LN6@lzma_filte

; 29   : 		return LZMA_DATA_ERROR;

  00076	b8 09 00 00 00	 mov	 eax, 9
  0007b	e9 9c 00 00 00	 jmp	 $LN11@lzma_filte
$LN6@lzma_filte:
$LN5@lzma_filte:

; 30   : 
; 31   : 	// Size of Properties
; 32   :   {
; 33   : 	lzma_vli props_size;
; 34   : 	return_if_error(lzma_vli_decode(&props_size, NULL,
; 35   : 			in, in_pos, in_size));

  00080	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  00088	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008d	4c 8b 4c 24 78	 mov	 r9, QWORD PTR in_pos$[rsp]
  00092	4c 8b 44 24 70	 mov	 r8, QWORD PTR in$[rsp]
  00097	33 d2		 xor	 edx, edx
  00099	48 8d 4c 24 38	 lea	 rcx, QWORD PTR props_size$32832[rsp]
  0009e	e8 00 00 00 00	 call	 lzma_vli_decode
  000a3	89 44 24 40	 mov	 DWORD PTR ret_$32836[rsp], eax
  000a7	83 7c 24 40 00	 cmp	 DWORD PTR ret_$32836[rsp], 0
  000ac	74 06		 je	 SHORT $LN2@lzma_filte
  000ae	8b 44 24 40	 mov	 eax, DWORD PTR ret_$32836[rsp]
  000b2	eb 68		 jmp	 SHORT $LN11@lzma_filte
$LN2@lzma_filte:
  000b4	33 c0		 xor	 eax, eax
  000b6	85 c0		 test	 eax, eax
  000b8	75 c6		 jne	 SHORT $LN5@lzma_filte

; 36   : 
; 37   : 	// Filter Properties
; 38   : 	if (in_size - *in_pos < props_size)

  000ba	48 8b 4c 24 78	 mov	 rcx, QWORD PTR in_pos$[rsp]
  000bf	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000c2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  000ca	48 2b c1	 sub	 rax, rcx
  000cd	48 3b 44 24 38	 cmp	 rax, QWORD PTR props_size$32832[rsp]
  000d2	73 07		 jae	 SHORT $LN1@lzma_filte

; 39   : 		return LZMA_DATA_ERROR;

  000d4	b8 09 00 00 00	 mov	 eax, 9
  000d9	eb 41		 jmp	 SHORT $LN11@lzma_filte
$LN1@lzma_filte:

; 40   : 
; 41   :   {
; 42   : 	const lzma_ret ret = lzma_properties_decode(
; 43   : 			filter, allocator, in + *in_pos, (size_t)props_size);

  000db	48 8b 44 24 78	 mov	 rax, QWORD PTR in_pos$[rsp]
  000e0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e3	4c 8b 44 24 70	 mov	 r8, QWORD PTR in$[rsp]
  000e8	4c 03 c0	 add	 r8, rax
  000eb	4c 8b 4c 24 38	 mov	 r9, QWORD PTR props_size$32832[rsp]
  000f0	48 8b 54 24 68	 mov	 rdx, QWORD PTR allocator$[rsp]
  000f5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filter$[rsp]
  000fa	e8 00 00 00 00	 call	 lzma_properties_decode
  000ff	89 44 24 44	 mov	 DWORD PTR ret$32840[rsp], eax

; 44   : 
; 45   : //W	*in_pos += props_size;
; 46   :   *in_pos = (size_t)(*in_pos + props_size);

  00103	48 8b 4c 24 78	 mov	 rcx, QWORD PTR in_pos$[rsp]
  00108	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0010b	48 03 4c 24 38	 add	 rcx, QWORD PTR props_size$32832[rsp]
  00110	48 8b 44 24 78	 mov	 rax, QWORD PTR in_pos$[rsp]
  00115	48 89 08	 mov	 QWORD PTR [rax], rcx

; 47   : 
; 48   : 	return ret;

  00118	8b 44 24 44	 mov	 eax, DWORD PTR ret$32840[rsp]
$LN11@lzma_filte:

; 49   :   }}
; 50   : }

  0011c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00120	c3		 ret	 0
lzma_filter_flags_decode ENDP
END
