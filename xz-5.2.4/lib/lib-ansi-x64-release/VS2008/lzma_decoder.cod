; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	lzma_lzma_props_decode
PUBLIC	lzma_lzma_decoder_memusage
PUBLIC	lzma_lzma_decoder_init
EXTRN	memmove:PROC
?next_state@?JB@??lzma_decode@@9@9 DD 00H		; `lzma_decode'::`145'::next_state
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	04H
	DD	05H
PUBLIC	lzma_lzma_decoder_memusage_nocheck
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_decoder.c
pdata	SEGMENT
$pdata$lzma_lzma_decoder_memusage_nocheck DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$lzma_lzma_decoder_memusage_nocheck
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_lzma_decoder_memusage_nocheck DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_lzma_decoder_memusage_nocheck
_TEXT	SEGMENT
opt$ = 32
options$ = 64
lzma_lzma_decoder_memusage_nocheck PROC			; COMDAT

; 1041 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1042 : 	const lzma_options_lzma *const opt = options;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR options$[rsp]
  0000e	48 89 44 24 20	 mov	 QWORD PTR opt$[rsp], rax

; 1043 : 	return sizeof(lzma_lzma1_decoder)
; 1044 : 			+ lzma_lz_decoder_memusage(opt->dict_size);

  00013	48 8b 44 24 20	 mov	 rax, QWORD PTR opt$[rsp]
  00018	8b 08		 mov	 ecx, DWORD PTR [rax]
  0001a	e8 00 00 00 00	 call	 lzma_lz_decoder_memusage
  0001f	48 05 c0 6e 00
	00		 add	 rax, 28352		; 00006ec0H

; 1045 : }

  00025	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00029	c3		 ret	 0
lzma_lzma_decoder_memusage_nocheck ENDP
_TEXT	ENDS
PUBLIC	lzma_lzma_lclppb_decode
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_lzma_lclppb_decode DD imagerel $LN6
	DD	imagerel $LN6+174
	DD	imagerel $unwind$lzma_lzma_lclppb_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_lzma_lclppb_decode DD 010d01H
	DD	0220dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_lzma_lclppb_decode
_TEXT	SEGMENT
tv87 = 0
options$ = 32
byte$ = 40
lzma_lzma_lclppb_decode PROC				; COMDAT

; 1025 : {

$LN6:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 1026 : 	if (byte > (4 * 5 + 4) * 9 + 8)

  0000d	0f b6 44 24 28	 movzx	 eax, BYTE PTR byte$[rsp]
  00012	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  00017	7e 07		 jle	 SHORT $LN1@lzma_lzma_

; 1027 : 		return true;

  00019	b0 01		 mov	 al, 1
  0001b	e9 89 00 00 00	 jmp	 $LN2@lzma_lzma_
$LN1@lzma_lzma_:

; 1028 : 
; 1029 : 	// See the file format specification to understand this.
; 1030 : 	options->pb = byte / (9 * 5);

  00020	0f b6 44 24 28	 movzx	 eax, BYTE PTR byte$[rsp]
  00025	99		 cdq
  00026	b9 2d 00 00 00	 mov	 ecx, 45			; 0000002dH
  0002b	f7 f9		 idiv	 ecx
  0002d	8b c8		 mov	 ecx, eax
  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR options$[rsp]
  00034	89 48 1c	 mov	 DWORD PTR [rax+28], ecx

; 1031 : 	byte -= options->pb * 9 * 5;

  00037	48 8b 44 24 20	 mov	 rax, QWORD PTR options$[rsp]
  0003c	8b 48 1c	 mov	 ecx, DWORD PTR [rax+28]
  0003f	6b c9 09	 imul	 ecx, 9
  00042	6b c9 05	 imul	 ecx, 5
  00045	0f b6 44 24 28	 movzx	 eax, BYTE PTR byte$[rsp]
  0004a	2b c1		 sub	 eax, ecx
  0004c	88 44 24 28	 mov	 BYTE PTR byte$[rsp], al

; 1032 : 	options->lp = byte / 9;

  00050	0f b6 44 24 28	 movzx	 eax, BYTE PTR byte$[rsp]
  00055	99		 cdq
  00056	b9 09 00 00 00	 mov	 ecx, 9
  0005b	f7 f9		 idiv	 ecx
  0005d	8b c8		 mov	 ecx, eax
  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR options$[rsp]
  00064	89 48 18	 mov	 DWORD PTR [rax+24], ecx

; 1033 : 	options->lc = byte - options->lp * 9;

  00067	0f b6 4c 24 28	 movzx	 ecx, BYTE PTR byte$[rsp]
  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR options$[rsp]
  00071	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00074	6b c0 09	 imul	 eax, 9
  00077	2b c8		 sub	 ecx, eax
  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR options$[rsp]
  0007e	89 48 14	 mov	 DWORD PTR [rax+20], ecx

; 1034 : 
; 1035 : 	return options->lc + options->lp > LZMA_LCLP_MAX;

  00081	48 8b 44 24 20	 mov	 rax, QWORD PTR options$[rsp]
  00086	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00089	48 8b 4c 24 20	 mov	 rcx, QWORD PTR options$[rsp]
  0008e	03 41 18	 add	 eax, DWORD PTR [rcx+24]
  00091	83 f8 04	 cmp	 eax, 4
  00094	76 09		 jbe	 SHORT $LN4@lzma_lzma_
  00096	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv87[rsp], 1
  0009d	eb 07		 jmp	 SHORT $LN5@lzma_lzma_
$LN4@lzma_lzma_:
  0009f	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv87[rsp], 0
$LN5@lzma_lzma_:
  000a6	8a 04 24	 mov	 al, BYTE PTR tv87[rsp]
$LN2@lzma_lzma_:

; 1036 : }

  000a9	48 83 c4 18	 add	 rsp, 24
  000ad	c3		 ret	 0
lzma_lzma_lclppb_decode ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_decoder_uncompressed DD imagerel lzma_decoder_uncompressed
	DD	imagerel lzma_decoder_uncompressed+44
	DD	imagerel $unwind$lzma_decoder_uncompressed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_decoder_uncompressed DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_decoder_uncompressed
_TEXT	SEGMENT
coder$ = 0
coder_ptr$ = 32
uncompressed_size$ = 40
lzma_decoder_uncompressed PROC				; COMDAT

; 866  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 867  : 	lzma_lzma1_decoder *coder = coder_ptr;

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder_ptr$[rsp]
  00013	48 89 04 24	 mov	 QWORD PTR coder$[rsp], rax

; 868  : 	coder->uncompressed_size = uncompressed_size;

  00017	48 8b 0c 24	 mov	 rcx, QWORD PTR coder$[rsp]
  0001b	48 8b 44 24 28	 mov	 rax, QWORD PTR uncompressed_size$[rsp]
  00020	48 89 81 98 6e
	00 00		 mov	 QWORD PTR [rcx+28312], rax

; 869  : }

  00027	48 83 c4 18	 add	 rsp, 24
  0002b	c3		 ret	 0
lzma_decoder_uncompressed ENDP
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\rangecoder\range_decoder.h
_TEXT	ENDS
;	COMDAT rc_read_init
_TEXT	SEGMENT
rc$ = 8
in$ = 16
in_pos$ = 24
in_size$ = 32
rc_read_init PROC					; COMDAT

; 31   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN4@rc_read_in:

; 32   : 	while (rc->init_bytes_left > 0) {

  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR rc$[rsp]
  00019	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0001d	0f 86 91 00 00
	00		 jbe	 $LN3@rc_read_in

; 33   : 		if (*in_pos == in_size)

  00023	48 8b 4c 24 18	 mov	 rcx, QWORD PTR in_pos$[rsp]
  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR in_size$[rsp]
  0002d	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00030	75 07		 jne	 SHORT $LN2@rc_read_in

; 34   : 			return LZMA_OK;

  00032	33 c0		 xor	 eax, eax
  00034	e9 80 00 00 00	 jmp	 $LN5@rc_read_in
$LN2@rc_read_in:

; 35   : 
; 36   : 		// The first byte is always 0x00. It could have been omitted
; 37   : 		// in LZMA2 but it wasn't, so one byte is wasted in every
; 38   : 		// LZMA2 chunk.
; 39   : 		if (rc->init_bytes_left == 5 && in[*in_pos] != 0x00)

  00039	48 8b 44 24 08	 mov	 rax, QWORD PTR rc$[rsp]
  0003e	83 78 08 05	 cmp	 DWORD PTR [rax+8], 5
  00042	75 1c		 jne	 SHORT $LN1@rc_read_in
  00044	48 8b 4c 24 18	 mov	 rcx, QWORD PTR in_pos$[rsp]
  00049	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0004c	48 8b 44 24 10	 mov	 rax, QWORD PTR in$[rsp]
  00051	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00055	85 c0		 test	 eax, eax
  00057	74 07		 je	 SHORT $LN1@rc_read_in

; 40   : 			return LZMA_DATA_ERROR;

  00059	b8 09 00 00 00	 mov	 eax, 9
  0005e	eb 59		 jmp	 SHORT $LN5@rc_read_in
$LN1@rc_read_in:

; 41   : 
; 42   : 		rc->code = (rc->code << 8) | in[*in_pos];

  00060	48 8b 44 24 08	 mov	 rax, QWORD PTR rc$[rsp]
  00065	8b 50 04	 mov	 edx, DWORD PTR [rax+4]
  00068	c1 e2 08	 shl	 edx, 8
  0006b	48 8b 4c 24 18	 mov	 rcx, QWORD PTR in_pos$[rsp]
  00070	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00073	48 8b 44 24 10	 mov	 rax, QWORD PTR in$[rsp]
  00078	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0007c	8b ca		 mov	 ecx, edx
  0007e	0b c8		 or	 ecx, eax
  00080	48 8b 44 24 08	 mov	 rax, QWORD PTR rc$[rsp]
  00085	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 43   : 		++*in_pos;

  00088	48 8b 4c 24 18	 mov	 rcx, QWORD PTR in_pos$[rsp]
  0008d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00090	48 83 c1 01	 add	 rcx, 1
  00094	48 8b 44 24 18	 mov	 rax, QWORD PTR in_pos$[rsp]
  00099	48 89 08	 mov	 QWORD PTR [rax], rcx

; 44   : 		--rc->init_bytes_left;

  0009c	48 8b 44 24 08	 mov	 rax, QWORD PTR rc$[rsp]
  000a1	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000a4	83 e9 01	 sub	 ecx, 1
  000a7	48 8b 44 24 08	 mov	 rax, QWORD PTR rc$[rsp]
  000ac	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 45   : 	}

  000af	e9 60 ff ff ff	 jmp	 $LN4@rc_read_in
$LN3@rc_read_in:

; 46   : 
; 47   : 	return LZMA_STREAM_END;

  000b4	b8 01 00 00 00	 mov	 eax, 1
$LN5@rc_read_in:

; 48   : }

  000b9	f3 c3		 fatret	 0
rc_read_init ENDP
_TEXT	ENDS
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_common.h
pdata	SEGMENT
$pdata$literal_init DD imagerel literal_init
	DD	imagerel literal_init+137
	DD	imagerel $unwind$literal_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$literal_init DD 011201H
	DD	02212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT literal_init
_TEXT	SEGMENT
i$32973 = 0
coders$32972 = 4
j$32974 = 8
probs$ = 32
lc$ = 40
lp$ = 48
literal_init PROC					; COMDAT

; 131  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 132  : 	assert(lc + lp <= LZMA_LCLP_MAX);
; 133  : 
; 134  :   {
; 135  : 	const uint32_t coders = 1U << (lc + lp);

  00012	8b 44 24 30	 mov	 eax, DWORD PTR lp$[rsp]
  00016	8b 4c 24 28	 mov	 ecx, DWORD PTR lc$[rsp]
  0001a	03 c8		 add	 ecx, eax
  0001c	b8 01 00 00 00	 mov	 eax, 1
  00021	d3 e0		 shl	 eax, cl
  00023	89 44 24 04	 mov	 DWORD PTR coders$32972[rsp], eax

; 136  : 	uint32_t i, j;
; 137  : 
; 138  : 	for (i = 0; i < coders; ++i)

  00027	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$32973[rsp], 0
  0002e	eb 09		 jmp	 SHORT $LN6@literal_in
$LN5@literal_in:
  00030	8b 04 24	 mov	 eax, DWORD PTR i$32973[rsp]
  00033	83 c0 01	 add	 eax, 1
  00036	89 04 24	 mov	 DWORD PTR i$32973[rsp], eax
$LN6@literal_in:
  00039	8b 44 24 04	 mov	 eax, DWORD PTR coders$32972[rsp]
  0003d	39 04 24	 cmp	 DWORD PTR i$32973[rsp], eax
  00040	73 42		 jae	 SHORT $LN4@literal_in

; 139  : 		for (j = 0; j < LITERAL_CODER_SIZE; ++j)

  00042	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR j$32974[rsp], 0
  0004a	eb 0b		 jmp	 SHORT $LN3@literal_in
$LN2@literal_in:
  0004c	8b 44 24 08	 mov	 eax, DWORD PTR j$32974[rsp]
  00050	83 c0 01	 add	 eax, 1
  00053	89 44 24 08	 mov	 DWORD PTR j$32974[rsp], eax
$LN3@literal_in:
  00057	81 7c 24 08 00
	03 00 00	 cmp	 DWORD PTR j$32974[rsp], 768 ; 00000300H
  0005f	73 21		 jae	 SHORT $LN1@literal_in

; 140  : 			bit_reset(probs[i][j]);

  00061	8b 04 24	 mov	 eax, DWORD PTR i$32973[rsp]
  00064	48 69 c0 00 06
	00 00		 imul	 rax, 1536		; 00000600H
  0006b	48 8b 54 24 20	 mov	 rdx, QWORD PTR probs$[rsp]
  00070	48 03 d0	 add	 rdx, rax
  00073	8b 4c 24 08	 mov	 ecx, DWORD PTR j$32974[rsp]
  00077	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  0007c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  00080	eb ca		 jmp	 SHORT $LN2@literal_in
$LN1@literal_in:
  00082	eb ac		 jmp	 SHORT $LN5@literal_in
$LN4@literal_in:

; 141  :   }
; 142  : 
; 143  : 	return;
; 144  : }

  00084	48 83 c4 18	 add	 rsp, 24
  00088	c3		 ret	 0
literal_init ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_lclppb_valid DD imagerel is_lclppb_valid
	DD	imagerel is_lclppb_valid+87
	DD	imagerel $unwind$is_lclppb_valid
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_lclppb_valid DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT is_lclppb_valid
_TEXT	SEGMENT
tv74 = 0
options$ = 32
is_lclppb_valid PROC					; COMDAT

; 34   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 35   : 	return options->lc <= LZMA_LCLP_MAX && options->lp <= LZMA_LCLP_MAX
; 36   : 			&& options->lc + options->lp <= LZMA_LCLP_MAX
; 37   : 			&& options->pb <= LZMA_PB_MAX;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR options$[rsp]
  0000e	83 78 14 04	 cmp	 DWORD PTR [rax+20], 4
  00012	77 34		 ja	 SHORT $LN3@is_lclppb_
  00014	48 8b 44 24 20	 mov	 rax, QWORD PTR options$[rsp]
  00019	83 78 18 04	 cmp	 DWORD PTR [rax+24], 4
  0001d	77 29		 ja	 SHORT $LN3@is_lclppb_
  0001f	48 8b 44 24 20	 mov	 rax, QWORD PTR options$[rsp]
  00024	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00027	48 8b 4c 24 20	 mov	 rcx, QWORD PTR options$[rsp]
  0002c	03 41 18	 add	 eax, DWORD PTR [rcx+24]
  0002f	83 f8 04	 cmp	 eax, 4
  00032	77 14		 ja	 SHORT $LN3@is_lclppb_
  00034	48 8b 44 24 20	 mov	 rax, QWORD PTR options$[rsp]
  00039	83 78 1c 04	 cmp	 DWORD PTR [rax+28], 4
  0003d	77 09		 ja	 SHORT $LN3@is_lclppb_
  0003f	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv74[rsp], 1
  00046	eb 07		 jmp	 SHORT $LN4@is_lclppb_
$LN3@is_lclppb_:
  00048	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv74[rsp], 0
$LN4@is_lclppb_:
  0004f	8a 04 24	 mov	 al, BYTE PTR tv74[rsp]

; 38   : }

  00052	48 83 c4 18	 add	 rsp, 24
  00056	c3		 ret	 0
is_lclppb_valid ENDP
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lz\lz_decoder.h
_TEXT	ENDS
;	COMDAT dict_put
_TEXT	SEGMENT
dict$ = 8
byte$ = 16
dict_put PROC						; COMDAT

; 193  : {

  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 194  : 	if (unlikely(dict->pos == dict->limit))

  00009	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dict$[rsp]
  0000e	48 8b 44 24 08	 mov	 rax, QWORD PTR dict$[rsp]
  00013	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00017	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  0001b	75 04		 jne	 SHORT $LN2@dict_put

; 195  : 		return true;

  0001d	b0 01		 mov	 al, 1
  0001f	eb 57		 jmp	 SHORT $LN3@dict_put
$LN2@dict_put:

; 196  : 
; 197  : 	dict->buf[dict->pos++] = byte;

  00021	48 8b 54 24 08	 mov	 rdx, QWORD PTR dict$[rsp]
  00026	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00029	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dict$[rsp]
  0002e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00032	0f b6 44 24 10	 movzx	 eax, BYTE PTR byte$[rsp]
  00037	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al
  0003a	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dict$[rsp]
  0003f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00043	48 83 c1 01	 add	 rcx, 1
  00047	48 8b 44 24 08	 mov	 rax, QWORD PTR dict$[rsp]
  0004c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 198  : 
; 199  : 	if (dict->pos > dict->full)

  00050	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dict$[rsp]
  00055	48 8b 44 24 08	 mov	 rax, QWORD PTR dict$[rsp]
  0005a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0005e	48 39 41 08	 cmp	 QWORD PTR [rcx+8], rax
  00062	76 12		 jbe	 SHORT $LN1@dict_put

; 200  : 		dict->full = dict->pos;

  00064	48 8b 4c 24 08	 mov	 rcx, QWORD PTR dict$[rsp]
  00069	48 8b 44 24 08	 mov	 rax, QWORD PTR dict$[rsp]
  0006e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00072	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
$LN1@dict_put:

; 201  : 
; 202  : 	return false;

  00076	32 c0		 xor	 al, al
$LN3@dict_put:

; 203  : }

  00078	f3 c3		 fatret	 0
dict_put ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_is_distance_valid DD imagerel dict_is_distance_valid
	DD	imagerel dict_is_distance_valid+54
	DD	imagerel $unwind$dict_is_distance_valid
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_is_distance_valid DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_is_distance_valid
_TEXT	SEGMENT
tv66 = 0
dict$ = 32
distance$ = 40
dict_is_distance_valid PROC				; COMDAT

; 124  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 125  : 	return dict->full > distance;

  0000e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00013	48 8b 44 24 28	 mov	 rax, QWORD PTR distance$[rsp]
  00018	48 39 41 10	 cmp	 QWORD PTR [rcx+16], rax
  0001c	76 09		 jbe	 SHORT $LN3@dict_is_di
  0001e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv66[rsp], 1
  00025	eb 07		 jmp	 SHORT $LN4@dict_is_di
$LN3@dict_is_di:
  00027	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv66[rsp], 0
$LN4@dict_is_di:
  0002e	8a 04 24	 mov	 al, BYTE PTR tv66[rsp]

; 126  : }

  00031	48 83 c4 18	 add	 rsp, 24
  00035	c3		 ret	 0
dict_is_distance_valid ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dict_get DD imagerel dict_get
	DD	imagerel dict_get+92
	DD	imagerel $unwind$dict_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_get DD 010d01H
	DD	0220dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_get
_TEXT	SEGMENT
tv72 = 0
dict$ = 32
distance$ = 40
dict_get PROC						; COMDAT

; 107  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 108  : 	return dict->buf[dict->pos - distance - 1
; 109  : 			+ (distance < dict->pos ? 0 : dict->size)];

  0000d	8b 4c 24 28	 mov	 ecx, DWORD PTR distance$[rsp]
  00011	48 8b 44 24 20	 mov	 rax, QWORD PTR dict$[rsp]
  00016	48 3b 48 08	 cmp	 rcx, QWORD PTR [rax+8]
  0001a	73 0a		 jae	 SHORT $LN3@dict_get
  0001c	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR tv72[rsp], 0
  00024	eb 0d		 jmp	 SHORT $LN4@dict_get
$LN3@dict_get:
  00026	48 8b 44 24 20	 mov	 rax, QWORD PTR dict$[rsp]
  0002b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0002f	48 89 04 24	 mov	 QWORD PTR tv72[rsp], rax
$LN4@dict_get:
  00033	8b 44 24 28	 mov	 eax, DWORD PTR distance$[rsp]
  00037	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0003c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00040	48 2b c8	 sub	 rcx, rax
  00043	48 8b 04 24	 mov	 rax, QWORD PTR tv72[rsp]
  00047	48 8d 4c 01 ff	 lea	 rcx, QWORD PTR [rcx+rax-1]
  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR dict$[rsp]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	8a 04 01	 mov	 al, BYTE PTR [rcx+rax]

; 110  : }

  00057	48 83 c4 18	 add	 rsp, 24
  0005b	c3		 ret	 0
dict_get ENDP
_TEXT	ENDS
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\common\tuklib_integer.h
pdata	SEGMENT
$pdata$read32le DD imagerel read32le
	DD	imagerel read32le+27
	DD	imagerel $unwind$read32le
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read32le DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT read32le
_TEXT	SEGMENT
num$ = 0
buf$ = 32
read32le PROC						; COMDAT

; 220  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 221  : 	uint32_t num = *(const uint32_t *)buf;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR num$[rsp], eax

; 222  : 	return conv32le(num);

  00013	8b 04 24	 mov	 eax, DWORD PTR num$[rsp]

; 223  : }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
read32le ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_lzma_props_decode DD imagerel $LN8
	DD	imagerel $LN8+194
	DD	imagerel $unwind$lzma_lzma_props_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_lzma_props_decode DD 011801H
	DD	06218H
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_decoder.c
xdata	ENDS
;	COMDAT lzma_lzma_props_decode
_TEXT	SEGMENT
opt$34549 = 32
num$36059 = 40
options$ = 64
allocator$ = 72
props$ = 80
props_size$ = 88
lzma_lzma_props_decode PROC				; COMDAT

; 1061 : {

$LN8:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1062 : 	if (props_size != 5)

  00018	48 83 7c 24 58
	05		 cmp	 QWORD PTR props_size$[rsp], 5
  0001e	74 0a		 je	 SHORT $LN3@lzma_lzma_@2

; 1063 : 		return LZMA_OPTIONS_ERROR;

  00020	b8 08 00 00 00	 mov	 eax, 8
  00025	e9 93 00 00 00	 jmp	 $LN4@lzma_lzma_@2
$LN3@lzma_lzma_@2:

; 1064 : 
; 1065 :   { lzma_options_lzma *opt
; 1066 : 			= lzma_alloc(sizeof(lzma_options_lzma), allocator);

  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR allocator$[rsp]
  0002f	b9 70 00 00 00	 mov	 ecx, 112		; 00000070H
  00034	e8 00 00 00 00	 call	 lzma_alloc
  00039	48 89 44 24 20	 mov	 QWORD PTR opt$34549[rsp], rax

; 1067 : 	if (opt == NULL)

  0003e	48 83 7c 24 20
	00		 cmp	 QWORD PTR opt$34549[rsp], 0
  00044	75 07		 jne	 SHORT $LN2@lzma_lzma_@2

; 1068 : 		return LZMA_MEM_ERROR;

  00046	b8 05 00 00 00	 mov	 eax, 5
  0004b	eb 70		 jmp	 SHORT $LN4@lzma_lzma_@2
$LN2@lzma_lzma_@2:

; 1069 : 
; 1070 : 	if (lzma_lzma_lclppb_decode(opt, props[0]))

  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR props$[rsp]
  00052	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00055	48 8b 4c 24 20	 mov	 rcx, QWORD PTR opt$34549[rsp]
  0005a	e8 00 00 00 00	 call	 lzma_lzma_lclppb_decode
  0005f	0f b6 c0	 movzx	 eax, al
  00062	85 c0		 test	 eax, eax
  00064	74 02		 je	 SHORT $LN1@lzma_lzma_@2

; 1071 : 		goto error;

  00066	eb 41		 jmp	 SHORT $error$34554
$LN1@lzma_lzma_@2:

; 1072 : 
; 1073 : 	// All dictionary sizes are accepted, including zero. LZ decoder
; 1074 : 	// will automatically use a dictionary at least a few KiB even if
; 1075 : 	// a smaller dictionary is requested.
; 1076 : 	opt->dict_size = unaligned_read32le(props + 1);

  00068	48 8b 44 24 50	 mov	 rax, QWORD PTR props$[rsp]
  0006d	8b 40 01	 mov	 eax, DWORD PTR [rax+1]
  00070	89 44 24 28	 mov	 DWORD PTR num$36059[rsp], eax
  00074	48 8b 4c 24 20	 mov	 rcx, QWORD PTR opt$34549[rsp]
  00079	8b 44 24 28	 mov	 eax, DWORD PTR num$36059[rsp]
  0007d	89 01		 mov	 DWORD PTR [rcx], eax

; 1077 : 
; 1078 : 	opt->preset_dict = NULL;

  0007f	48 8b 44 24 20	 mov	 rax, QWORD PTR opt$34549[rsp]
  00084	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 1079 : 	opt->preset_dict_size = 0;

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR opt$34549[rsp]
  00091	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [rax+16], 0

; 1080 : 
; 1081 : 	*options = opt;

  00098	48 8b 4c 24 40	 mov	 rcx, QWORD PTR options$[rsp]
  0009d	48 8b 44 24 20	 mov	 rax, QWORD PTR opt$34549[rsp]
  000a2	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1082 : 
; 1083 : 	return LZMA_OK;

  000a5	33 c0		 xor	 eax, eax
  000a7	eb 14		 jmp	 SHORT $LN4@lzma_lzma_@2
$error$34554:

; 1084 : 
; 1085 : error:
; 1086 : 	lzma_free(opt, allocator);

  000a9	48 8b 54 24 48	 mov	 rdx, QWORD PTR allocator$[rsp]
  000ae	48 8b 4c 24 20	 mov	 rcx, QWORD PTR opt$34549[rsp]
  000b3	e8 00 00 00 00	 call	 lzma_free

; 1087 :   }
; 1088 : 	return LZMA_OPTIONS_ERROR;

  000b8	b8 08 00 00 00	 mov	 eax, 8
$LN4@lzma_lzma_@2:

; 1089 : }

  000bd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c1	c3		 ret	 0
lzma_lzma_props_decode ENDP
_TEXT	ENDS
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_common.h
pdata	SEGMENT
$pdata$lzma_lzma_decoder_memusage DD imagerel $LN8
	DD	imagerel $LN8+114
	DD	imagerel $unwind$lzma_lzma_decoder_memusage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_lzma_decoder_memusage DD 010901H
	DD	06209H
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_decoder.c
xdata	ENDS
;	COMDAT lzma_lzma_decoder_memusage
_TEXT	SEGMENT
tv80 = 32
options$ = 64
lzma_lzma_decoder_memusage PROC				; COMDAT

; 1050 : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1051 : 	if (!is_lclppb_valid(options))

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR options$[rsp]
  0000e	83 78 14 04	 cmp	 DWORD PTR [rax+20], 4
  00012	77 35		 ja	 SHORT $LN6@lzma_lzma_@3
  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR options$[rsp]
  00019	83 78 18 04	 cmp	 DWORD PTR [rax+24], 4
  0001d	77 2a		 ja	 SHORT $LN6@lzma_lzma_@3
  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR options$[rsp]
  00024	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR options$[rsp]
  0002c	03 41 18	 add	 eax, DWORD PTR [rcx+24]
  0002f	83 f8 04	 cmp	 eax, 4
  00032	77 15		 ja	 SHORT $LN6@lzma_lzma_@3
  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR options$[rsp]
  00039	83 78 1c 04	 cmp	 DWORD PTR [rax+28], 4
  0003d	77 0a		 ja	 SHORT $LN6@lzma_lzma_@3
  0003f	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  00047	eb 08		 jmp	 SHORT $LN7@lzma_lzma_@3
$LN6@lzma_lzma_@3:
  00049	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN7@lzma_lzma_@3:
  00051	0f b6 44 24 20	 movzx	 eax, BYTE PTR tv80[rsp]
  00056	85 c0		 test	 eax, eax
  00058	75 09		 jne	 SHORT $LN1@lzma_lzma_@3

; 1052 : 		return UINT64_MAX;

  0005a	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00061	eb 0a		 jmp	 SHORT $LN2@lzma_lzma_@3
$LN1@lzma_lzma_@3:

; 1053 : 
; 1054 : 	return lzma_lzma_decoder_memusage_nocheck(options);

  00063	48 8b 4c 24 40	 mov	 rcx, QWORD PTR options$[rsp]
  00068	e8 00 00 00 00	 call	 lzma_lzma_decoder_memusage_nocheck
$LN2@lzma_lzma_@3:

; 1055 : }

  0006d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00071	c3		 ret	 0
lzma_lzma_decoder_memusage ENDP
_TEXT	ENDS
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_common.h
pdata	SEGMENT
$pdata$lzma_decoder_reset DD imagerel lzma_decoder_reset
	DD	imagerel lzma_decoder_reset+1430
	DD	imagerel $unwind$lzma_decoder_reset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_decoder_reset DD 010e01H
	DD	0c20eH
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_decoder.c
xdata	ENDS
;	COMDAT lzma_decoder_reset
_TEXT	SEGMENT
options$ = 0
coder$ = 8
i$34433 = 16
j$34434 = 20
bt_i$34444 = 24
bt_i$34451 = 28
num_pos_states$34455 = 32
pos_state$34456 = 36
bt_i$34460 = 40
bt_i$34464 = 44
bt_i$34468 = 48
bt_i$34472 = 52
bt_i$34476 = 56
bt_i$34480 = 60
i$36083 = 64
coders$36082 = 68
j$36084 = 72
$T36092 = 76
$T36093 = 80
coder_ptr$ = 112
opt$ = 120
lzma_decoder_reset PROC					; COMDAT

; 874  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 875  : 	lzma_lzma1_decoder *coder = coder_ptr;

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR coder_ptr$[rsp]
  00013	48 89 44 24 08	 mov	 QWORD PTR coder$[rsp], rax

; 876  : 	const lzma_options_lzma *options = opt;

  00018	48 8b 44 24 78	 mov	 rax, QWORD PTR opt$[rsp]
  0001d	48 89 04 24	 mov	 QWORD PTR options$[rsp], rax

; 877  : 
; 878  : 	// NOTE: We assume that lc/lp/pb are valid since they were
; 879  : 	// successfully decoded with lzma_lzma_decode_properties().
; 880  : 
; 881  : 	// Calculate pos_mask. We don't need pos_bits as is for anything.
; 882  : 	coder->pos_mask = (1U << options->pb) - 1;

  00021	48 8b 04 24	 mov	 rax, QWORD PTR options$[rsp]
  00025	8b 48 1c	 mov	 ecx, DWORD PTR [rax+28]
  00028	b8 01 00 00 00	 mov	 eax, 1
  0002d	d3 e0		 shl	 eax, cl
  0002f	8b c8		 mov	 ecx, eax
  00031	83 e9 01	 sub	 ecx, 1
  00034	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00039	89 88 8c 6e 00
	00		 mov	 DWORD PTR [rax+28300], ecx

; 883  : 
; 884  : 	// Initialize the literal decoder.
; 885  : 	literal_init(coder->literal, options->lc, options->lp);

  0003f	48 8b 04 24	 mov	 rax, QWORD PTR options$[rsp]
  00043	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00046	89 44 24 50	 mov	 DWORD PTR $T36093[rsp], eax
  0004a	48 8b 04 24	 mov	 rax, QWORD PTR options$[rsp]
  0004e	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00051	89 44 24 4c	 mov	 DWORD PTR $T36092[rsp], eax
  00055	8b 44 24 50	 mov	 eax, DWORD PTR $T36093[rsp]
  00059	8b 4c 24 4c	 mov	 ecx, DWORD PTR $T36092[rsp]
  0005d	03 c8		 add	 ecx, eax
  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	d3 e0		 shl	 eax, cl
  00066	89 44 24 44	 mov	 DWORD PTR coders$36082[rsp], eax
  0006a	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$36083[rsp], 0
  00072	eb 0b		 jmp	 SHORT $LN50@lzma_decod
$LN49@lzma_decod:
  00074	8b 44 24 40	 mov	 eax, DWORD PTR i$36083[rsp]
  00078	83 c0 01	 add	 eax, 1
  0007b	89 44 24 40	 mov	 DWORD PTR i$36083[rsp], eax
$LN50@lzma_decod:
  0007f	8b 44 24 44	 mov	 eax, DWORD PTR coders$36082[rsp]
  00083	39 44 24 40	 cmp	 DWORD PTR i$36083[rsp], eax
  00087	73 43		 jae	 SHORT $LN48@lzma_decod
  00089	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR j$36084[rsp], 0
  00091	eb 0b		 jmp	 SHORT $LN47@lzma_decod
$LN46@lzma_decod:
  00093	8b 44 24 48	 mov	 eax, DWORD PTR j$36084[rsp]
  00097	83 c0 01	 add	 eax, 1
  0009a	89 44 24 48	 mov	 DWORD PTR j$36084[rsp], eax
$LN47@lzma_decod:
  0009e	81 7c 24 48 00
	03 00 00	 cmp	 DWORD PTR j$36084[rsp], 768 ; 00000300H
  000a6	73 22		 jae	 SHORT $LN45@lzma_decod
  000a8	8b 44 24 40	 mov	 eax, DWORD PTR i$36083[rsp]
  000ac	48 69 c0 00 06
	00 00		 imul	 rax, 1536		; 00000600H
  000b3	48 8b 54 24 08	 mov	 rdx, QWORD PTR coder$[rsp]
  000b8	48 03 d0	 add	 rdx, rax
  000bb	8b 4c 24 48	 mov	 ecx, DWORD PTR j$36084[rsp]
  000bf	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  000c4	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  000c8	eb c9		 jmp	 SHORT $LN46@lzma_decod
$LN45@lzma_decod:
  000ca	eb a8		 jmp	 SHORT $LN49@lzma_decod
$LN48@lzma_decod:

; 886  : 
; 887  : 	coder->literal_context_bits = options->lc;

  000cc	48 8b 4c 24 08	 mov	 rcx, QWORD PTR coder$[rsp]
  000d1	48 8b 04 24	 mov	 rax, QWORD PTR options$[rsp]
  000d5	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  000d8	89 81 90 6e 00
	00		 mov	 DWORD PTR [rcx+28304], eax

; 888  : 	coder->literal_pos_mask = (1U << options->lp) - 1;

  000de	48 8b 04 24	 mov	 rax, QWORD PTR options$[rsp]
  000e2	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  000e5	b8 01 00 00 00	 mov	 eax, 1
  000ea	d3 e0		 shl	 eax, cl
  000ec	8b c8		 mov	 ecx, eax
  000ee	83 e9 01	 sub	 ecx, 1
  000f1	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  000f6	89 88 94 6e 00
	00		 mov	 DWORD PTR [rax+28308], ecx

; 889  : 
; 890  : 	// State
; 891  : 	coder->state = STATE_LIT_LIT;

  000fc	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00101	c7 80 78 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28280], 0

; 892  : 	coder->rep0 = 0;

  0010b	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00110	c7 80 7c 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28284], 0

; 893  : 	coder->rep1 = 0;

  0011a	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0011f	c7 80 80 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28288], 0

; 894  : 	coder->rep2 = 0;

  00129	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0012e	c7 80 84 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28292], 0

; 895  : 	coder->rep3 = 0;

  00138	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0013d	c7 80 88 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28296], 0

; 896  : 	coder->pos_mask = (1U << options->pb) - 1;

  00147	48 8b 04 24	 mov	 rax, QWORD PTR options$[rsp]
  0014b	8b 48 1c	 mov	 ecx, DWORD PTR [rax+28]
  0014e	b8 01 00 00 00	 mov	 eax, 1
  00153	d3 e0		 shl	 eax, cl
  00155	8b c8		 mov	 ecx, eax
  00157	83 e9 01	 sub	 ecx, 1
  0015a	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0015f	89 88 8c 6e 00
	00		 mov	 DWORD PTR [rax+28300], ecx
$LN42@lzma_decod:

; 897  : 
; 898  : 	// Range decoder
; 899  : 	rc_reset(coder->rc);

  00165	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0016a	c7 80 6c 6e 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+28268], -1 ; ffffffffH
  00174	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00179	c7 80 70 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28272], 0
  00183	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00188	c7 80 74 6e 00
	00 05 00 00 00	 mov	 DWORD PTR [rax+28276], 5
  00192	33 c0		 xor	 eax, eax
  00194	85 c0		 test	 eax, eax
  00196	75 cd		 jne	 SHORT $LN42@lzma_decod

; 900  : 
; 901  : 	// Bit and bittree decoders
; 902  :   { uint32_t i;
; 903  :   { uint32_t j;
; 904  : 	for (i = 0; i < STATES; ++i) {

  00198	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR i$34433[rsp], 0
  001a0	eb 0b		 jmp	 SHORT $LN39@lzma_decod
$LN38@lzma_decod:
  001a2	8b 44 24 10	 mov	 eax, DWORD PTR i$34433[rsp]
  001a6	83 c0 01	 add	 eax, 1
  001a9	89 44 24 10	 mov	 DWORD PTR i$34433[rsp], eax
$LN39@lzma_decod:
  001ad	83 7c 24 10 0c	 cmp	 DWORD PTR i$34433[rsp], 12
  001b2	0f 83 c9 00 00
	00		 jae	 $LN37@lzma_decod

; 905  : 		for (j = 0; j <= coder->pos_mask; ++j) {

  001b8	c7 44 24 14 00
	00 00 00	 mov	 DWORD PTR j$34434[rsp], 0
  001c0	eb 0b		 jmp	 SHORT $LN36@lzma_decod
$LN35@lzma_decod:
  001c2	8b 44 24 14	 mov	 eax, DWORD PTR j$34434[rsp]
  001c6	83 c0 01	 add	 eax, 1
  001c9	89 44 24 14	 mov	 DWORD PTR j$34434[rsp], eax
$LN36@lzma_decod:
  001cd	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  001d2	8b 80 8c 6e 00
	00		 mov	 eax, DWORD PTR [rax+28300]
  001d8	39 44 24 14	 cmp	 DWORD PTR j$34434[rsp], eax
  001dc	77 46		 ja	 SHORT $LN34@lzma_decod

; 906  : 			bit_reset(coder->is_match[i][j]);

  001de	8b 4c 24 10	 mov	 ecx, DWORD PTR i$34433[rsp]
  001e2	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  001e6	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  001eb	48 8d 94 08 00
	60 00 00	 lea	 rdx, QWORD PTR [rax+rcx+24576]
  001f3	8b 4c 24 14	 mov	 ecx, DWORD PTR j$34434[rsp]
  001f7	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  001fc	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 907  : 			bit_reset(coder->is_rep0_long[i][j]);

  00200	8b 4c 24 10	 mov	 ecx, DWORD PTR i$34433[rsp]
  00204	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  00208	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0020d	48 8d 94 08 e0
	61 00 00	 lea	 rdx, QWORD PTR [rax+rcx+25056]
  00215	8b 4c 24 14	 mov	 ecx, DWORD PTR j$34434[rsp]
  00219	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  0021e	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax

; 908  : 		}

  00222	eb 9e		 jmp	 SHORT $LN35@lzma_decod
$LN34@lzma_decod:

; 909  : 
; 910  : 		bit_reset(coder->is_rep[i]);

  00224	8b 54 24 10	 mov	 edx, DWORD PTR i$34433[rsp]
  00228	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0022d	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00232	66 89 8c 50 80
	61 00 00	 mov	 WORD PTR [rax+rdx*2+24960], cx

; 911  : 		bit_reset(coder->is_rep0[i]);

  0023a	8b 54 24 10	 mov	 edx, DWORD PTR i$34433[rsp]
  0023e	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00243	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00248	66 89 8c 50 98
	61 00 00	 mov	 WORD PTR [rax+rdx*2+24984], cx

; 912  : 		bit_reset(coder->is_rep1[i]);

  00250	8b 54 24 10	 mov	 edx, DWORD PTR i$34433[rsp]
  00254	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00259	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0025e	66 89 8c 50 b0
	61 00 00	 mov	 WORD PTR [rax+rdx*2+25008], cx

; 913  : 		bit_reset(coder->is_rep2[i]);

  00266	8b 54 24 10	 mov	 edx, DWORD PTR i$34433[rsp]
  0026a	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0026f	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00274	66 89 8c 50 c8
	61 00 00	 mov	 WORD PTR [rax+rdx*2+25032], cx

; 914  : 	}

  0027c	e9 21 ff ff ff	 jmp	 $LN38@lzma_decod
$LN37@lzma_decod:

; 915  :   }
; 916  : 
; 917  : 	for (i = 0; i < DIST_STATES; ++i)

  00281	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR i$34433[rsp], 0
  00289	eb 0b		 jmp	 SHORT $LN33@lzma_decod
$LN32@lzma_decod:
  0028b	8b 44 24 10	 mov	 eax, DWORD PTR i$34433[rsp]
  0028f	83 c0 01	 add	 eax, 1
  00292	89 44 24 10	 mov	 DWORD PTR i$34433[rsp], eax
$LN33@lzma_decod:
  00296	83 7c 24 10 04	 cmp	 DWORD PTR i$34433[rsp], 4
  0029b	73 45		 jae	 SHORT $LN31@lzma_decod

; 918  : 		bittree_reset(coder->dist_slot[i], DIST_SLOT_BITS);

  0029d	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR bt_i$34444[rsp], 0
  002a5	eb 0b		 jmp	 SHORT $LN30@lzma_decod
$LN29@lzma_decod:
  002a7	8b 44 24 18	 mov	 eax, DWORD PTR bt_i$34444[rsp]
  002ab	83 c0 01	 add	 eax, 1
  002ae	89 44 24 18	 mov	 DWORD PTR bt_i$34444[rsp], eax
$LN30@lzma_decod:
  002b2	83 7c 24 18 40	 cmp	 DWORD PTR bt_i$34444[rsp], 64 ; 00000040H
  002b7	73 27		 jae	 SHORT $LN28@lzma_decod
  002b9	8b 4c 24 10	 mov	 ecx, DWORD PTR i$34433[rsp]
  002bd	48 69 c9 80 00
	00 00		 imul	 rcx, 128		; 00000080H
  002c4	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  002c9	48 8d 94 08 60
	63 00 00	 lea	 rdx, QWORD PTR [rax+rcx+25440]
  002d1	8b 4c 24 18	 mov	 ecx, DWORD PTR bt_i$34444[rsp]
  002d5	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  002da	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  002de	eb c7		 jmp	 SHORT $LN29@lzma_decod
$LN28@lzma_decod:
  002e0	eb a9		 jmp	 SHORT $LN32@lzma_decod
$LN31@lzma_decod:

; 919  : 
; 920  : 	for (i = 0; i < FULL_DISTANCES - DIST_MODEL_END; ++i)

  002e2	c7 44 24 10 00
	00 00 00	 mov	 DWORD PTR i$34433[rsp], 0
  002ea	eb 0b		 jmp	 SHORT $LN27@lzma_decod
$LN26@lzma_decod:
  002ec	8b 44 24 10	 mov	 eax, DWORD PTR i$34433[rsp]
  002f0	83 c0 01	 add	 eax, 1
  002f3	89 44 24 10	 mov	 DWORD PTR i$34433[rsp], eax
$LN27@lzma_decod:
  002f7	83 7c 24 10 72	 cmp	 DWORD PTR i$34433[rsp], 114 ; 00000072H
  002fc	73 18		 jae	 SHORT $LN25@lzma_decod

; 921  : 		bit_reset(coder->pos_special[i]);

  002fe	8b 54 24 10	 mov	 edx, DWORD PTR i$34433[rsp]
  00302	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00307	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0030c	66 89 8c 50 60
	65 00 00	 mov	 WORD PTR [rax+rdx*2+25952], cx
  00314	eb d6		 jmp	 SHORT $LN26@lzma_decod
$LN25@lzma_decod:

; 922  :   }
; 923  : 
; 924  : 	bittree_reset(coder->pos_align, ALIGN_BITS);

  00316	c7 44 24 1c 00
	00 00 00	 mov	 DWORD PTR bt_i$34451[rsp], 0
  0031e	eb 0b		 jmp	 SHORT $LN24@lzma_decod
$LN23@lzma_decod:
  00320	8b 44 24 1c	 mov	 eax, DWORD PTR bt_i$34451[rsp]
  00324	83 c0 01	 add	 eax, 1
  00327	89 44 24 1c	 mov	 DWORD PTR bt_i$34451[rsp], eax
$LN24@lzma_decod:
  0032b	83 7c 24 1c 10	 cmp	 DWORD PTR bt_i$34451[rsp], 16
  00330	73 18		 jae	 SHORT $LN22@lzma_decod
  00332	8b 54 24 1c	 mov	 edx, DWORD PTR bt_i$34451[rsp]
  00336	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0033b	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00340	66 89 8c 50 44
	66 00 00	 mov	 WORD PTR [rax+rdx*2+26180], cx
  00348	eb d6		 jmp	 SHORT $LN23@lzma_decod
$LN22@lzma_decod:

; 925  : 
; 926  : 	// Len decoders (also bit/bittree)
; 927  :   {
; 928  : 	const uint32_t num_pos_states = 1U << options->pb;

  0034a	48 8b 04 24	 mov	 rax, QWORD PTR options$[rsp]
  0034e	8b 48 1c	 mov	 ecx, DWORD PTR [rax+28]
  00351	b8 01 00 00 00	 mov	 eax, 1
  00356	d3 e0		 shl	 eax, cl
  00358	89 44 24 20	 mov	 DWORD PTR num_pos_states$34455[rsp], eax

; 929  : 	bit_reset(coder->match_len_decoder.choice);

  0035c	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00361	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00366	66 89 88 64 66
	00 00		 mov	 WORD PTR [rax+26212], cx

; 930  : 	bit_reset(coder->match_len_decoder.choice2);

  0036d	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00372	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00377	66 89 88 66 66
	00 00		 mov	 WORD PTR [rax+26214], cx

; 931  : 	bit_reset(coder->rep_len_decoder.choice);

  0037e	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00383	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00388	66 89 88 68 6a
	00 00		 mov	 WORD PTR [rax+27240], cx

; 932  : 	bit_reset(coder->rep_len_decoder.choice2);

  0038f	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00394	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00399	66 89 88 6a 6a
	00 00		 mov	 WORD PTR [rax+27242], cx

; 933  : 	
; 934  :   { uint32_t pos_state;
; 935  : 
; 936  : 	for (pos_state = 0; pos_state < num_pos_states; ++pos_state) {

  003a0	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR pos_state$34456[rsp], 0
  003a8	eb 0b		 jmp	 SHORT $LN21@lzma_decod
$LN20@lzma_decod:
  003aa	8b 44 24 24	 mov	 eax, DWORD PTR pos_state$34456[rsp]
  003ae	83 c0 01	 add	 eax, 1
  003b1	89 44 24 24	 mov	 DWORD PTR pos_state$34456[rsp], eax
$LN21@lzma_decod:
  003b5	8b 44 24 20	 mov	 eax, DWORD PTR num_pos_states$34455[rsp]
  003b9	39 44 24 24	 cmp	 DWORD PTR pos_state$34456[rsp], eax
  003bd	0f 83 05 01 00
	00		 jae	 $LN19@lzma_decod

; 937  : 		bittree_reset(coder->match_len_decoder.low[pos_state],
; 938  : 				LEN_LOW_BITS);

  003c3	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR bt_i$34460[rsp], 0
  003cb	eb 0b		 jmp	 SHORT $LN18@lzma_decod
$LN17@lzma_decod:
  003cd	8b 44 24 28	 mov	 eax, DWORD PTR bt_i$34460[rsp]
  003d1	83 c0 01	 add	 eax, 1
  003d4	89 44 24 28	 mov	 DWORD PTR bt_i$34460[rsp], eax
$LN18@lzma_decod:
  003d8	83 7c 24 28 08	 cmp	 DWORD PTR bt_i$34460[rsp], 8
  003dd	73 24		 jae	 SHORT $LN16@lzma_decod
  003df	8b 4c 24 24	 mov	 ecx, DWORD PTR pos_state$34456[rsp]
  003e3	48 6b c9 10	 imul	 rcx, 16
  003e7	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  003ec	48 8d 94 08 68
	66 00 00	 lea	 rdx, QWORD PTR [rax+rcx+26216]
  003f4	8b 4c 24 28	 mov	 ecx, DWORD PTR bt_i$34460[rsp]
  003f8	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  003fd	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  00401	eb ca		 jmp	 SHORT $LN17@lzma_decod
$LN16@lzma_decod:

; 939  : 		bittree_reset(coder->match_len_decoder.mid[pos_state],
; 940  : 				LEN_MID_BITS);

  00403	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR bt_i$34464[rsp], 0
  0040b	eb 0b		 jmp	 SHORT $LN15@lzma_decod
$LN14@lzma_decod:
  0040d	8b 44 24 2c	 mov	 eax, DWORD PTR bt_i$34464[rsp]
  00411	83 c0 01	 add	 eax, 1
  00414	89 44 24 2c	 mov	 DWORD PTR bt_i$34464[rsp], eax
$LN15@lzma_decod:
  00418	83 7c 24 2c 08	 cmp	 DWORD PTR bt_i$34464[rsp], 8
  0041d	73 24		 jae	 SHORT $LN13@lzma_decod
  0041f	8b 4c 24 24	 mov	 ecx, DWORD PTR pos_state$34456[rsp]
  00423	48 6b c9 10	 imul	 rcx, 16
  00427	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0042c	48 8d 94 08 68
	67 00 00	 lea	 rdx, QWORD PTR [rax+rcx+26472]
  00434	8b 4c 24 2c	 mov	 ecx, DWORD PTR bt_i$34464[rsp]
  00438	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  0043d	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  00441	eb ca		 jmp	 SHORT $LN14@lzma_decod
$LN13@lzma_decod:

; 941  : 
; 942  : 		bittree_reset(coder->rep_len_decoder.low[pos_state],
; 943  : 				LEN_LOW_BITS);

  00443	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR bt_i$34468[rsp], 0
  0044b	eb 0b		 jmp	 SHORT $LN12@lzma_decod
$LN11@lzma_decod:
  0044d	8b 44 24 30	 mov	 eax, DWORD PTR bt_i$34468[rsp]
  00451	83 c0 01	 add	 eax, 1
  00454	89 44 24 30	 mov	 DWORD PTR bt_i$34468[rsp], eax
$LN12@lzma_decod:
  00458	83 7c 24 30 08	 cmp	 DWORD PTR bt_i$34468[rsp], 8
  0045d	73 24		 jae	 SHORT $LN10@lzma_decod
  0045f	8b 4c 24 24	 mov	 ecx, DWORD PTR pos_state$34456[rsp]
  00463	48 6b c9 10	 imul	 rcx, 16
  00467	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0046c	48 8d 94 08 6c
	6a 00 00	 lea	 rdx, QWORD PTR [rax+rcx+27244]
  00474	8b 4c 24 30	 mov	 ecx, DWORD PTR bt_i$34468[rsp]
  00478	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  0047d	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  00481	eb ca		 jmp	 SHORT $LN11@lzma_decod
$LN10@lzma_decod:

; 944  : 		bittree_reset(coder->rep_len_decoder.mid[pos_state],
; 945  : 				LEN_MID_BITS);

  00483	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR bt_i$34472[rsp], 0
  0048b	eb 0b		 jmp	 SHORT $LN9@lzma_decod
$LN8@lzma_decod:
  0048d	8b 44 24 34	 mov	 eax, DWORD PTR bt_i$34472[rsp]
  00491	83 c0 01	 add	 eax, 1
  00494	89 44 24 34	 mov	 DWORD PTR bt_i$34472[rsp], eax
$LN9@lzma_decod:
  00498	83 7c 24 34 08	 cmp	 DWORD PTR bt_i$34472[rsp], 8
  0049d	73 24		 jae	 SHORT $LN7@lzma_decod
  0049f	8b 4c 24 24	 mov	 ecx, DWORD PTR pos_state$34456[rsp]
  004a3	48 6b c9 10	 imul	 rcx, 16
  004a7	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  004ac	48 8d 94 08 6c
	6b 00 00	 lea	 rdx, QWORD PTR [rax+rcx+27500]
  004b4	8b 4c 24 34	 mov	 ecx, DWORD PTR bt_i$34472[rsp]
  004b8	b8 00 04 00 00	 mov	 eax, 1024		; 00000400H
  004bd	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  004c1	eb ca		 jmp	 SHORT $LN8@lzma_decod
$LN7@lzma_decod:

; 946  : 	}

  004c3	e9 e2 fe ff ff	 jmp	 $LN20@lzma_decod
$LN19@lzma_decod:

; 947  :   }}
; 948  : 
; 949  : 	bittree_reset(coder->match_len_decoder.high, LEN_HIGH_BITS);

  004c8	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR bt_i$34476[rsp], 0
  004d0	eb 0b		 jmp	 SHORT $LN6@lzma_decod
$LN5@lzma_decod:
  004d2	8b 44 24 38	 mov	 eax, DWORD PTR bt_i$34476[rsp]
  004d6	83 c0 01	 add	 eax, 1
  004d9	89 44 24 38	 mov	 DWORD PTR bt_i$34476[rsp], eax
$LN6@lzma_decod:
  004dd	81 7c 24 38 00
	01 00 00	 cmp	 DWORD PTR bt_i$34476[rsp], 256 ; 00000100H
  004e5	73 18		 jae	 SHORT $LN4@lzma_decod
  004e7	8b 54 24 38	 mov	 edx, DWORD PTR bt_i$34476[rsp]
  004eb	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  004f0	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  004f5	66 89 8c 50 68
	68 00 00	 mov	 WORD PTR [rax+rdx*2+26728], cx
  004fd	eb d3		 jmp	 SHORT $LN5@lzma_decod
$LN4@lzma_decod:

; 950  : 	bittree_reset(coder->rep_len_decoder.high, LEN_HIGH_BITS);

  004ff	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR bt_i$34480[rsp], 0
  00507	eb 0b		 jmp	 SHORT $LN3@lzma_decod
$LN2@lzma_decod:
  00509	8b 44 24 3c	 mov	 eax, DWORD PTR bt_i$34480[rsp]
  0050d	83 c0 01	 add	 eax, 1
  00510	89 44 24 3c	 mov	 DWORD PTR bt_i$34480[rsp], eax
$LN3@lzma_decod:
  00514	81 7c 24 3c 00
	01 00 00	 cmp	 DWORD PTR bt_i$34480[rsp], 256 ; 00000100H
  0051c	73 18		 jae	 SHORT $LN1@lzma_decod
  0051e	8b 54 24 3c	 mov	 edx, DWORD PTR bt_i$34480[rsp]
  00522	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  00527	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0052c	66 89 8c 50 6c
	6c 00 00	 mov	 WORD PTR [rax+rdx*2+27756], cx
  00534	eb d3		 jmp	 SHORT $LN2@lzma_decod
$LN1@lzma_decod:

; 951  : 
; 952  : 	coder->sequence = SEQ_IS_MATCH;

  00536	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0053b	c7 80 a0 6e 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+28320], 1

; 953  : 	coder->probs = NULL;

  00545	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0054a	48 c7 80 a8 6e
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+28328], 0

; 954  : 	coder->symbol = 0;

  00555	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  0055a	c7 80 b0 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28336], 0

; 955  : 	coder->limit = 0;

  00564	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00569	c7 80 b4 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28340], 0

; 956  : 	coder->offset = 0;

  00573	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00578	c7 80 b8 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28344], 0

; 957  : 	coder->len = 0;

  00582	48 8b 44 24 08	 mov	 rax, QWORD PTR coder$[rsp]
  00587	c7 80 bc 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28348], 0

; 958  : 
; 959  : 	return;
; 960  : }

  00591	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00595	c3		 ret	 0
lzma_decoder_reset ENDP
_TEXT	ENDS
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lz\lz_decoder.h
pdata	SEGMENT
$pdata$dict_repeat DD imagerel dict_repeat
	DD	imagerel dict_repeat+730
	DD	imagerel $unwind$dict_repeat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dict_repeat DD 011201H
	DD	0c212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT dict_repeat
_TEXT	SEGMENT
left$ = 32
dict_avail$ = 40
copy_pos$32909 = 48
copy_size$32911 = 52
$T36110 = 56
tv70 = 64
tv197 = 72
tv187 = 80
dict$ = 112
distance$ = 120
len$ = 128
dict_repeat PROC					; COMDAT

; 132  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 133  : 	// Don't write past the end of the dictionary.
; 134  : 	const size_t dict_avail = dict->limit - dict->pos;

  00012	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00017	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  0001c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00020	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00024	48 2b c1	 sub	 rax, rcx
  00027	48 89 44 24 28	 mov	 QWORD PTR dict_avail$[rsp], rax

; 135  : 	uint32_t left = (uint32_t)my_min(dict_avail, *len);

  0002c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  00034	8b 00		 mov	 eax, DWORD PTR [rax]
  00036	48 39 44 24 28	 cmp	 QWORD PTR dict_avail$[rsp], rax
  0003b	73 0c		 jae	 SHORT $LN13@dict_repea
  0003d	48 8b 44 24 28	 mov	 rax, QWORD PTR dict_avail$[rsp]
  00042	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
  00047	eb 0f		 jmp	 SHORT $LN14@dict_repea
$LN13@dict_repea:
  00049	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  00051	8b 00		 mov	 eax, DWORD PTR [rax]
  00053	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
$LN14@dict_repea:
  00058	8b 44 24 40	 mov	 eax, DWORD PTR tv70[rsp]
  0005c	89 44 24 20	 mov	 DWORD PTR left$[rsp], eax

; 136  : 	*len -= left;

  00060	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR len$[rsp]
  00068	8b 44 24 20	 mov	 eax, DWORD PTR left$[rsp]
  0006c	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0006e	2b c8		 sub	 ecx, eax
  00070	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  00078	89 08		 mov	 DWORD PTR [rax], ecx

; 137  : 
; 138  : 	// Repeat a block of data from the history. Because memcpy() is faster
; 139  : 	// than copying byte by byte in a loop, the copying process gets split
; 140  : 	// into three cases.
; 141  : 	if (distance < left) {

  0007a	8b 44 24 20	 mov	 eax, DWORD PTR left$[rsp]
  0007e	39 44 24 78	 cmp	 DWORD PTR distance$[rsp], eax
  00082	0f 83 9c 00 00
	00		 jae	 $LN10@dict_repea
$LN9@dict_repea:

; 142  : 		// Source and target areas overlap, thus we can't use
; 143  : 		// memcpy() nor even memmove() safely.
; 144  : 		do {
; 145  : 			dict->buf[dict->pos] = dict_get(dict, distance);

  00088	8b 4c 24 78	 mov	 ecx, DWORD PTR distance$[rsp]
  0008c	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00091	48 3b 48 08	 cmp	 rcx, QWORD PTR [rax+8]
  00095	73 0b		 jae	 SHORT $LN19@dict_repea
  00097	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv197[rsp], 0
  000a0	eb 0e		 jmp	 SHORT $LN20@dict_repea
$LN19@dict_repea:
  000a2	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  000a7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ab	48 89 44 24 48	 mov	 QWORD PTR tv197[rsp], rax
$LN20@dict_repea:
  000b0	8b 44 24 78	 mov	 eax, DWORD PTR distance$[rsp]
  000b4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  000b9	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000bd	48 2b c8	 sub	 rcx, rax
  000c0	48 8b 44 24 48	 mov	 rax, QWORD PTR tv197[rsp]
  000c5	48 8d 4c 01 ff	 lea	 rcx, QWORD PTR [rcx+rax-1]
  000ca	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  000cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d2	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d6	88 44 24 38	 mov	 BYTE PTR $T36110[rsp], al
  000da	48 8b 54 24 70	 mov	 rdx, QWORD PTR dict$[rsp]
  000df	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  000e2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  000e7	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000eb	0f b6 44 24 38	 movzx	 eax, BYTE PTR $T36110[rsp]
  000f0	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 146  : 			++dict->pos;

  000f3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  000f8	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000fc	48 83 c1 01	 add	 rcx, 1
  00100	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00105	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 147  : 		} while (--left > 0);

  00109	8b 44 24 20	 mov	 eax, DWORD PTR left$[rsp]
  0010d	83 e8 01	 sub	 eax, 1
  00110	89 44 24 20	 mov	 DWORD PTR left$[rsp], eax
  00114	83 7c 24 20 00	 cmp	 DWORD PTR left$[rsp], 0
  00119	0f 87 69 ff ff
	ff		 ja	 $LN9@dict_repea

; 148  : 
; 149  : 	} else if (distance < dict->pos) {

  0011f	e9 68 01 00 00	 jmp	 $LN6@dict_repea
$LN10@dict_repea:
  00124	8b 4c 24 78	 mov	 ecx, DWORD PTR distance$[rsp]
  00128	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  0012d	48 3b 48 08	 cmp	 rcx, QWORD PTR [rax+8]
  00131	73 52		 jae	 SHORT $LN5@dict_repea

; 150  : 		// The easiest and fastest case
; 151  : 		memcpy(dict->buf + dict->pos,
; 152  : 				dict->buf + dict->pos - distance - 1,
; 153  : 				left);

  00133	44 8b 44 24 20	 mov	 r8d, DWORD PTR left$[rsp]
  00138	48 8b 54 24 70	 mov	 rdx, QWORD PTR dict$[rsp]
  0013d	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00140	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00145	48 03 50 08	 add	 rdx, QWORD PTR [rax+8]
  00149	8b 44 24 78	 mov	 eax, DWORD PTR distance$[rsp]
  0014d	48 2b d0	 sub	 rdx, rax
  00150	48 83 ea 01	 sub	 rdx, 1
  00154	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  00159	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0015c	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00161	48 03 48 08	 add	 rcx, QWORD PTR [rax+8]
  00165	e8 00 00 00 00	 call	 memcpy

; 154  : 		dict->pos += left;

  0016a	8b 4c 24 20	 mov	 ecx, DWORD PTR left$[rsp]
  0016e	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00173	48 03 48 08	 add	 rcx, QWORD PTR [rax+8]
  00177	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  0017c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 155  : 
; 156  : 	} else {

  00180	e9 07 01 00 00	 jmp	 $LN4@dict_repea
$LN5@dict_repea:

; 157  : 		// The bigger the dictionary, the more rare this
; 158  : 		// case occurs. We need to "wrap" the dict, thus
; 159  : 		// we might need two memcpy() to copy all the data.
; 160  : 		assert(dict->full == dict->size);
; 161  : 	  {
; 162  : 		const uint32_t copy_pos
; 163  : 				= (const uint32_t)(dict->pos - distance - 1 + dict->size);

  00185	8b 44 24 78	 mov	 eax, DWORD PTR distance$[rsp]
  00189	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  0018e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00192	48 2b c8	 sub	 rcx, rax
  00195	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  0019a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0019e	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  001a3	89 44 24 30	 mov	 DWORD PTR copy_pos$32909[rsp], eax

; 164  : 		uint32_t copy_size = (uint32_t)(dict->size - copy_pos);

  001a7	8b 4c 24 30	 mov	 ecx, DWORD PTR copy_pos$32909[rsp]
  001ab	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  001b0	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001b4	48 2b c1	 sub	 rax, rcx
  001b7	89 44 24 34	 mov	 DWORD PTR copy_size$32911[rsp], eax

; 165  : 
; 166  : 		if (copy_size < left) {

  001bb	8b 44 24 20	 mov	 eax, DWORD PTR left$[rsp]
  001bf	39 44 24 34	 cmp	 DWORD PTR copy_size$32911[rsp], eax
  001c3	0f 83 86 00 00
	00		 jae	 $LN3@dict_repea

; 167  : 			memmove(dict->buf + dict->pos, dict->buf + copy_pos,
; 168  : 					copy_size);

  001c9	44 8b 44 24 34	 mov	 r8d, DWORD PTR copy_size$32911[rsp]
  001ce	8b 54 24 30	 mov	 edx, DWORD PTR copy_pos$32909[rsp]
  001d2	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  001d7	48 03 10	 add	 rdx, QWORD PTR [rax]
  001da	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  001df	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  001e2	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  001e7	48 03 48 08	 add	 rcx, QWORD PTR [rax+8]
  001eb	e8 00 00 00 00	 call	 memmove

; 169  : 			dict->pos += copy_size;

  001f0	8b 4c 24 34	 mov	 ecx, DWORD PTR copy_size$32911[rsp]
  001f4	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  001f9	48 03 48 08	 add	 rcx, QWORD PTR [rax+8]
  001fd	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00202	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 170  : 			copy_size = left - copy_size;

  00206	8b 4c 24 34	 mov	 ecx, DWORD PTR copy_size$32911[rsp]
  0020a	8b 44 24 20	 mov	 eax, DWORD PTR left$[rsp]
  0020e	2b c1		 sub	 eax, ecx
  00210	89 44 24 34	 mov	 DWORD PTR copy_size$32911[rsp], eax

; 171  : 			memcpy(dict->buf + dict->pos, dict->buf, copy_size);

  00214	44 8b 44 24 34	 mov	 r8d, DWORD PTR copy_size$32911[rsp]
  00219	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  0021e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00221	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00226	48 03 48 08	 add	 rcx, QWORD PTR [rax+8]
  0022a	48 8b 54 24 70	 mov	 rdx, QWORD PTR dict$[rsp]
  0022f	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  00232	e8 00 00 00 00	 call	 memcpy

; 172  : 			dict->pos += copy_size;

  00237	8b 4c 24 34	 mov	 ecx, DWORD PTR copy_size$32911[rsp]
  0023b	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00240	48 03 48 08	 add	 rcx, QWORD PTR [rax+8]
  00244	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00249	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 173  : 		} else {

  0024d	eb 3d		 jmp	 SHORT $LN2@dict_repea
$LN3@dict_repea:

; 174  : 			memmove(dict->buf + dict->pos, dict->buf + copy_pos,
; 175  : 					left);

  0024f	44 8b 44 24 20	 mov	 r8d, DWORD PTR left$[rsp]
  00254	8b 54 24 30	 mov	 edx, DWORD PTR copy_pos$32909[rsp]
  00258	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  0025d	48 03 10	 add	 rdx, QWORD PTR [rax]
  00260	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  00265	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00268	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  0026d	48 03 48 08	 add	 rcx, QWORD PTR [rax+8]
  00271	e8 00 00 00 00	 call	 memmove

; 176  : 			dict->pos += left;

  00276	8b 4c 24 20	 mov	 ecx, DWORD PTR left$[rsp]
  0027a	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  0027f	48 03 48 08	 add	 rcx, QWORD PTR [rax+8]
  00283	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00288	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
$LN2@dict_repea:
$LN4@dict_repea:
$LN6@dict_repea:

; 177  : 		}
; 178  : 	  }
; 179  : 	}
; 180  : 
; 181  : 	// Update how full the dictionary is.
; 182  : 	if (dict->full < dict->pos)

  0028c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  00291	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00296	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0029a	48 39 41 10	 cmp	 QWORD PTR [rcx+16], rax
  0029e	73 12		 jae	 SHORT $LN1@dict_repea

; 183  : 		dict->full = dict->pos;

  002a0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  002a5	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  002aa	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002ae	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
$LN1@dict_repea:

; 184  : 
; 185  : 	return unlikely(*len != 0);

  002b2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  002ba	83 38 00	 cmp	 DWORD PTR [rax], 0
  002bd	74 0a		 je	 SHORT $LN15@dict_repea
  002bf	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv187[rsp], 1
  002c7	eb 08		 jmp	 SHORT $LN16@dict_repea
$LN15@dict_repea:
  002c9	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv187[rsp], 0
$LN16@dict_repea:
  002d1	8a 44 24 50	 mov	 al, BYTE PTR tv187[rsp]

; 186  : }

  002d5	48 83 c4 68	 add	 rsp, 104		; 00000068H
  002d9	c3		 ret	 0
dict_repeat ENDP
PUBLIC	$T37374
PUBLIC	$T37375
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_decode DD imagerel lzma_decode
	DD	imagerel lzma_decode+33596
	DD	imagerel $unwind$lzma_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_decode DD 041d01H
	DD	033011dH
	DD	060157016H
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_decoder.c
xdata	ENDS
;	COMDAT lzma_decode
_TEXT	SEGMENT
coder$ = 32
ret$33161 = 40
rep1$33170 = 44
rc$33165 = 48
rep0$33169 = 64
dict$33163 = 72
rc_in_pos$33166 = 120
rep3$33172 = 128
rc_bound$33167 = 132
dict_start$33164 = 136
rep2$33171 = 144
state$33168 = 148
symbol$33175 = 152
probs$33174 = 160
len$33178 = 168
offset$33177 = 172
pos_mask$33173 = 176
limit$33176 = 180
pos_state$33181 = 184
literal_context_bits$33180 = 188
ret$33182 = 192
literal_pos_mask$33179 = 196
no_eopm$33183 = 200
subcoder_index$33344 = 204
match_bit$33343 = 208
distance$34106 = 212
distance$34121 = 216
distance$34126 = 220
$T37319 = 224
$T37327 = 232
$T37335 = 233
$T37358 = 234
$T37374 = 264
$T37375 = 280
tv92 = 328
tv134 = 332
tv4649 = 336
tv4658 = 344
tv1237 = 352
tv2303 = 356
tv2647 = 360
tv4669 = 364
tv4667 = 368
tv3337 = 372
tv670 = 376
tv3511 = 384
tv4620 = 388
coder_ptr$ = 432
dictptr$ = 440
in$ = 448
in_pos$ = 456
in_size$ = 464
lzma_decode PROC					; COMDAT

; 293  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H

; 294  : 	lzma_lzma1_decoder *restrict coder = coder_ptr;

  0001d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR coder_ptr$[rsp]
  00025	48 89 44 24 20	 mov	 QWORD PTR coder$[rsp], rax

; 295  : 
; 296  : 	////////////////////
; 297  : 	// Initialization //
; 298  : 	////////////////////
; 299  : 
; 300  : 	{
; 301  : 		const lzma_ret ret = rc_read_init(
; 302  : 				&coder->rc, in, in_pos, in_size);

  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0002f	48 05 6c 6e 00
	00		 add	 rax, 28268		; 00006e6cH
  00035	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR $T37319[rsp], rax
$LN1224@lzma_decod@2:
  0003d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR $T37319[rsp]
  00045	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00049	0f 86 c1 00 00
	00		 jbe	 $LN1223@lzma_decod@2
  0004f	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR in_pos$[rsp]
  00057	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0005f	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00062	75 0d		 jne	 SHORT $LN1222@lzma_decod@2
  00064	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR ret$33161[rsp], 0
  0006c	e9 a7 00 00 00	 jmp	 $LN1225@lzma_decod@2
$LN1222@lzma_decod@2:
  00071	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR $T37319[rsp]
  00079	83 78 08 05	 cmp	 DWORD PTR [rax+8], 5
  0007d	75 25		 jne	 SHORT $LN1221@lzma_decod@2
  0007f	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR in_pos$[rsp]
  00087	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0008a	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  00092	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00096	85 c0		 test	 eax, eax
  00098	74 0a		 je	 SHORT $LN1221@lzma_decod@2
  0009a	c7 44 24 28 09
	00 00 00	 mov	 DWORD PTR ret$33161[rsp], 9
  000a2	eb 74		 jmp	 SHORT $LN1225@lzma_decod@2
$LN1221@lzma_decod@2:
  000a4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR $T37319[rsp]
  000ac	8b 50 04	 mov	 edx, DWORD PTR [rax+4]
  000af	c1 e2 08	 shl	 edx, 8
  000b2	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR in_pos$[rsp]
  000ba	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000bd	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  000c5	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  000c9	8b ca		 mov	 ecx, edx
  000cb	0b c8		 or	 ecx, eax
  000cd	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR $T37319[rsp]
  000d5	89 48 04	 mov	 DWORD PTR [rax+4], ecx
  000d8	48 8b 8c 24 c8
	01 00 00	 mov	 rcx, QWORD PTR in_pos$[rsp]
  000e0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000e3	48 83 c1 01	 add	 rcx, 1
  000e7	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR in_pos$[rsp]
  000ef	48 89 08	 mov	 QWORD PTR [rax], rcx
  000f2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR $T37319[rsp]
  000fa	8b 48 08	 mov	 ecx, DWORD PTR [rax+8]
  000fd	83 e9 01	 sub	 ecx, 1
  00100	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR $T37319[rsp]
  00108	89 48 08	 mov	 DWORD PTR [rax+8], ecx
  0010b	e9 2d ff ff ff	 jmp	 $LN1224@lzma_decod@2
$LN1223@lzma_decod@2:
  00110	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR ret$33161[rsp], 1
$LN1225@lzma_decod@2:

; 303  : 		if (ret != LZMA_STREAM_END)

  00118	83 7c 24 28 01	 cmp	 DWORD PTR ret$33161[rsp], 1
  0011d	74 09		 je	 SHORT $LN1206@lzma_decod@2

; 304  : 			return ret;

  0011f	8b 44 24 28	 mov	 eax, DWORD PTR ret$33161[rsp]
  00123	e9 ee 80 00 00	 jmp	 $LN1207@lzma_decod@2
$LN1206@lzma_decod@2:

; 305  : 	}
; 306  : 
; 307  : 	///////////////
; 308  : 	// Variables //
; 309  : 	///////////////
; 310  : 
; 311  : 	// Making local copies of often-used variables improves both
; 312  : 	// speed and readability.
; 313  :   {
; 314  : 	lzma_dict dict = *dictptr;

  00128	48 8d bc 24 18
	01 00 00	 lea	 rdi, QWORD PTR $T37375[rsp]
  00130	48 8b b4 24 b8
	01 00 00	 mov	 rsi, QWORD PTR dictptr$[rsp]
  00138	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  0013d	f3 a4		 rep movsb
  0013f	48 8d 7c 24 48	 lea	 rdi, QWORD PTR dict$33163[rsp]
  00144	48 8d b4 24 18
	01 00 00	 lea	 rsi, QWORD PTR $T37375[rsp]
  0014c	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00151	f3 a4		 rep movsb

; 315  : 
; 316  : 	const size_t dict_start = dict.pos;

  00153	48 8b 44 24 50	 mov	 rax, QWORD PTR dict$33163[rsp+8]
  00158	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR dict_start$33164[rsp], rax

; 317  : 
; 318  : 	// Range decoder
; 319  : 	rc_to_local(coder->rc, *in_pos);

  00160	48 8d bc 24 08
	01 00 00	 lea	 rdi, QWORD PTR $T37374[rsp]
  00168	48 8b 74 24 20	 mov	 rsi, QWORD PTR coder$[rsp]
  0016d	48 81 c6 6c 6e
	00 00		 add	 rsi, 28268		; 00006e6cH
  00174	b9 0c 00 00 00	 mov	 ecx, 12
  00179	f3 a4		 rep movsb
  0017b	48 8d 7c 24 30	 lea	 rdi, QWORD PTR rc$33165[rsp]
  00180	48 8d b4 24 08
	01 00 00	 lea	 rsi, QWORD PTR $T37374[rsp]
  00188	b9 0c 00 00 00	 mov	 ecx, 12
  0018d	f3 a4		 rep movsb
  0018f	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR in_pos$[rsp]
  00197	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0019a	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax

; 320  : 
; 321  : 	// State
; 322  : 	uint32_t state = coder->state;

  0019f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  001a4	8b 80 78 6e 00
	00		 mov	 eax, DWORD PTR [rax+28280]
  001aa	89 84 24 94 00
	00 00		 mov	 DWORD PTR state$33168[rsp], eax

; 323  : 	uint32_t rep0 = coder->rep0;

  001b1	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  001b6	8b 80 7c 6e 00
	00		 mov	 eax, DWORD PTR [rax+28284]
  001bc	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax

; 324  : 	uint32_t rep1 = coder->rep1;

  001c0	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  001c5	8b 80 80 6e 00
	00		 mov	 eax, DWORD PTR [rax+28288]
  001cb	89 44 24 2c	 mov	 DWORD PTR rep1$33170[rsp], eax

; 325  : 	uint32_t rep2 = coder->rep2;

  001cf	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  001d4	8b 80 84 6e 00
	00		 mov	 eax, DWORD PTR [rax+28292]
  001da	89 84 24 90 00
	00 00		 mov	 DWORD PTR rep2$33171[rsp], eax

; 326  : 	uint32_t rep3 = coder->rep3;

  001e1	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  001e6	8b 80 88 6e 00
	00		 mov	 eax, DWORD PTR [rax+28296]
  001ec	89 84 24 80 00
	00 00		 mov	 DWORD PTR rep3$33172[rsp], eax

; 327  : 
; 328  :   {
; 329  : 	const uint32_t pos_mask = coder->pos_mask;

  001f3	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  001f8	8b 80 8c 6e 00
	00		 mov	 eax, DWORD PTR [rax+28300]
  001fe	89 84 24 b0 00
	00 00		 mov	 DWORD PTR pos_mask$33173[rsp], eax

; 330  : 
; 331  : 	// These variables are actually needed only if we last time ran
; 332  : 	// out of input in the middle of the decoder loop.
; 333  : 	probability *probs = coder->probs;

  00205	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0020a	48 8b 80 a8 6e
	00 00		 mov	 rax, QWORD PTR [rax+28328]
  00211	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR probs$33174[rsp], rax

; 334  : 	uint32_t symbol = coder->symbol;

  00219	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0021e	8b 80 b0 6e 00
	00		 mov	 eax, DWORD PTR [rax+28336]
  00224	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax

; 335  : 	uint32_t limit = coder->limit;

  0022b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00230	8b 80 b4 6e 00
	00		 mov	 eax, DWORD PTR [rax+28340]
  00236	89 84 24 b4 00
	00 00		 mov	 DWORD PTR limit$33176[rsp], eax

; 336  : 	uint32_t offset = coder->offset;

  0023d	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00242	8b 80 b8 6e 00
	00		 mov	 eax, DWORD PTR [rax+28344]
  00248	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax

; 337  : 	uint32_t len = coder->len;

  0024f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00254	8b 80 bc 6e 00
	00		 mov	 eax, DWORD PTR [rax+28348]
  0025a	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax

; 338  : 
; 339  :   {
; 340  : 	const uint32_t literal_pos_mask = coder->literal_pos_mask;

  00261	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00266	8b 80 94 6e 00
	00		 mov	 eax, DWORD PTR [rax+28308]
  0026c	89 84 24 c4 00
	00 00		 mov	 DWORD PTR literal_pos_mask$33179[rsp], eax

; 341  : 	const uint32_t literal_context_bits = coder->literal_context_bits;

  00273	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00278	8b 80 90 6e 00
	00		 mov	 eax, DWORD PTR [rax+28304]
  0027e	89 84 24 bc 00
	00 00		 mov	 DWORD PTR literal_context_bits$33180[rsp], eax

; 342  : 
; 343  : 	// Temporary variables
; 344  : 	uint32_t pos_state = dict.pos & pos_mask;

  00285	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR pos_mask$33173[rsp]
  0028c	48 8b 44 24 50	 mov	 rax, QWORD PTR dict$33163[rsp+8]
  00291	48 23 c1	 and	 rax, rcx
  00294	89 84 24 b8 00
	00 00		 mov	 DWORD PTR pos_state$33181[rsp], eax

; 345  : 
; 346  : 	lzma_ret ret = LZMA_OK;

  0029b	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ret$33182[rsp], 0

; 347  : 
; 348  : 	// If uncompressed size is known, there must be no end of payload
; 349  : 	// marker.
; 350  :   {
; 351  : 	const bool no_eopm = coder->uncompressed_size
; 352  : 			!= LZMA_VLI_UNKNOWN;

  002a6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  002ab	48 83 b8 98 6e
	00 00 ff	 cmp	 QWORD PTR [rax+28312], -1
  002b3	74 0d		 je	 SHORT $LN1209@lzma_decod@2
  002b5	c7 84 24 48 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv92[rsp], 1
  002c0	eb 0b		 jmp	 SHORT $LN1210@lzma_decod@2
$LN1209@lzma_decod@2:
  002c2	c7 84 24 48 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv92[rsp], 0
$LN1210@lzma_decod@2:
  002cd	0f b6 84 24 48
	01 00 00	 movzx	 eax, BYTE PTR tv92[rsp]
  002d5	88 84 24 c8 00
	00 00		 mov	 BYTE PTR no_eopm$33183[rsp], al

; 353  : 	if (no_eopm && coder->uncompressed_size < dict.limit - dict.pos)

  002dc	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR no_eopm$33183[rsp]
  002e4	85 c0		 test	 eax, eax
  002e6	74 34		 je	 SHORT $LN1205@lzma_decod@2
  002e8	48 8b 44 24 50	 mov	 rax, QWORD PTR dict$33163[rsp+8]
  002ed	48 8b 4c 24 60	 mov	 rcx, QWORD PTR dict$33163[rsp+24]
  002f2	48 2b c8	 sub	 rcx, rax
  002f5	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  002fa	48 39 88 98 6e
	00 00		 cmp	 QWORD PTR [rax+28312], rcx
  00301	73 19		 jae	 SHORT $LN1205@lzma_decod@2

; 354  : 		dict.limit = dict.pos + (size_t)(coder->uncompressed_size);

  00303	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  00308	48 8b 89 98 6e
	00 00		 mov	 rcx, QWORD PTR [rcx+28312]
  0030f	48 8b 44 24 50	 mov	 rax, QWORD PTR dict$33163[rsp+8]
  00314	48 03 c1	 add	 rax, rcx
  00317	48 89 44 24 60	 mov	 QWORD PTR dict$33163[rsp+24], rax
$LN1205@lzma_decod@2:

; 355  : 
; 356  : 	// The main decoder loop. The "switch" is used to restart the decoder at
; 357  : 	// correct location. Once restarted, the "switch" is no longer used.
; 358  : 	switch (coder->sequence)

  0031c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00321	8b 80 a0 6e 00
	00		 mov	 eax, DWORD PTR [rax+28320]
  00327	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv134[rsp], eax
  0032e	83 bc 24 4c 01
	00 00 46	 cmp	 DWORD PTR tv134[rsp], 70 ; 00000046H
  00336	0f 87 6a 7c 00
	00		 ja	 $LN1203@lzma_decod@2
  0033c	48 63 84 24 4c
	01 00 00	 movsxd	 rax, DWORD PTR tv134[rsp]
  00344	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0034b	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN1275@lzma_decod@2[rcx+rax*4]
  00352	48 03 c1	 add	 rax, rcx
  00355	ff e0		 jmp	 rax
$LN1202@lzma_decod@2:

; 359  : 	while (true) {

  00357	33 c0		 xor	 eax, eax
  00359	83 f8 01	 cmp	 eax, 1
  0035c	0f 84 44 7c 00
	00		 je	 $LN1201@lzma_decod@2

; 360  : 		// Calculate new pos_state. This is skipped on the first loop
; 361  : 		// since we already calculated it when setting up the local
; 362  : 		// variables.
; 363  : 		pos_state = dict.pos & pos_mask;

  00362	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR pos_mask$33173[rsp]
  00369	48 8b 44 24 50	 mov	 rax, QWORD PTR dict$33163[rsp+8]
  0036e	48 23 c1	 and	 rax, rcx
  00371	89 84 24 b8 00
	00 00		 mov	 DWORD PTR pos_state$33181[rsp], eax
$LN1200@lzma_decod@2:

; 364  : 
; 365  : 	case SEQ_NORMALIZE:
; 366  : 	case SEQ_IS_MATCH:
; 367  : 		if (unlikely(no_eopm && dict.pos == dict.limit))

  00378	0f b6 84 24 c8
	00 00 00	 movzx	 eax, BYTE PTR no_eopm$33183[rsp]
  00380	85 c0		 test	 eax, eax
  00382	74 11		 je	 SHORT $LN1199@lzma_decod@2
  00384	48 8b 44 24 60	 mov	 rax, QWORD PTR dict$33163[rsp+24]
  00389	48 39 44 24 50	 cmp	 QWORD PTR dict$33163[rsp+8], rax
  0038e	75 05		 jne	 SHORT $LN1199@lzma_decod@2

; 368  : 			break;

  00390	e9 11 7c 00 00	 jmp	 $LN1201@lzma_decod@2
$LN1199@lzma_decod@2:
$LN1198@lzma_decod@2:

; 369  : 
; 370  : 		rc_if_0(coder->is_match[state][pos_state], SEQ_IS_MATCH) {

  00395	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0039d	73 5e		 jae	 SHORT $LN1195@lzma_decod@2
  0039f	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  003a7	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  003ac	75 14		 jne	 SHORT $LN1194@lzma_decod@2
  003ae	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  003b3	c7 80 a0 6e 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+28320], 1
  003bd	e9 5e 7c 00 00	 jmp	 $out$33200
$LN1194@lzma_decod@2:
  003c2	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  003c6	c1 e0 08	 shl	 eax, 8
  003c9	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  003cd	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  003d1	c1 e2 08	 shl	 edx, 8
  003d4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  003d9	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  003e1	48 03 c1	 add	 rax, rcx
  003e4	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  003e7	8b c2		 mov	 eax, edx
  003e9	0b c1		 or	 eax, ecx
  003eb	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  003ef	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  003f4	48 83 c0 01	 add	 rax, 1
  003f8	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1195@lzma_decod@2:
  003fd	33 c0		 xor	 eax, eax
  003ff	85 c0		 test	 eax, eax
  00401	75 92		 jne	 SHORT $LN1198@lzma_decod@2
  00403	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  00407	c1 ea 0b	 shr	 edx, 11
  0040a	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  00411	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  00415	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0041a	48 8d 8c 08 00
	60 00 00	 lea	 rcx, QWORD PTR [rax+rcx+24576]
  00422	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR pos_state$33181[rsp]
  00429	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  0042d	8b c2		 mov	 eax, edx
  0042f	0f af c1	 imul	 eax, ecx
  00432	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  00439	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00440	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  00444	0f 83 7e 1e 00
	00		 jae	 $LN1193@lzma_decod@2
$LN1192@lzma_decod@2:

; 371  : 			rc_update_0(coder->is_match[state][pos_state]);

  0044a	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00451	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00455	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  0045c	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  00460	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00465	48 8d bc 08 00
	60 00 00	 lea	 rdi, QWORD PTR [rax+rcx+24576]
  0046d	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR pos_state$33181[rsp]
  00474	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  0047b	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  0047f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00484	48 8d 8c 08 00
	60 00 00	 lea	 rcx, QWORD PTR [rax+rcx+24576]
  0048c	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR pos_state$33181[rsp]
  00493	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  00497	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0049c	2b c1		 sub	 eax, ecx
  0049e	c1 e8 05	 shr	 eax, 5
  004a1	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  004a5	03 f8		 add	 edi, eax
  004a7	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR pos_state$33181[rsp]
  004ae	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  004b5	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  004b9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  004be	48 8d 84 08 00
	60 00 00	 lea	 rax, QWORD PTR [rax+rcx+24576]
  004c6	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  004ca	33 c0		 xor	 eax, eax
  004cc	85 c0		 test	 eax, eax
  004ce	0f 85 76 ff ff
	ff		 jne	 $LN1192@lzma_decod@2

; 372  : 
; 373  : 			// It's a literal i.e. a single 8-bit byte.
; 374  : 
; 375  : 			probs = literal_subcoder(coder->literal,
; 376  : 					literal_context_bits, literal_pos_mask,
; 377  : 					dict.pos, dict_get(&dict, 0));

  004d4	33 c0		 xor	 eax, eax
  004d6	48 3b 44 24 50	 cmp	 rax, QWORD PTR dict$33163[rsp+8]
  004db	73 0e		 jae	 SHORT $LN1229@lzma_decod@2
  004dd	48 c7 84 24 50
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv4649[rsp], 0
  004e9	eb 0d		 jmp	 SHORT $LN1230@lzma_decod@2
$LN1229@lzma_decod@2:
  004eb	48 8b 44 24 68	 mov	 rax, QWORD PTR dict$33163[rsp+32]
  004f0	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv4649[rsp], rax
$LN1230@lzma_decod@2:
  004f8	33 c0		 xor	 eax, eax
  004fa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dict$33163[rsp+8]
  004ff	48 2b c8	 sub	 rcx, rax
  00502	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR tv4649[rsp]
  0050a	48 8d 4c 01 ff	 lea	 rcx, QWORD PTR [rcx+rax-1]
  0050f	48 8b 44 24 48	 mov	 rax, QWORD PTR dict$33163[rsp]
  00514	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  00518	88 84 24 e8 00
	00 00		 mov	 BYTE PTR $T37327[rsp], al
  0051f	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR literal_pos_mask$33179[rsp]
  00526	48 8b 7c 24 50	 mov	 rdi, QWORD PTR dict$33163[rsp+8]
  0052b	48 23 f8	 and	 rdi, rax
  0052e	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR literal_context_bits$33180[rsp]
  00535	0f b6 c8	 movzx	 ecx, al
  00538	48 d3 e7	 shl	 rdi, cl
  0053b	0f b6 94 24 e8
	00 00 00	 movzx	 edx, BYTE PTR $T37327[rsp]
  00543	b8 08 00 00 00	 mov	 eax, 8
  00548	2b 84 24 bc 00
	00 00		 sub	 eax, DWORD PTR literal_context_bits$33180[rsp]
  0054f	0f b6 c8	 movzx	 ecx, al
  00552	8b c2		 mov	 eax, edx
  00554	d3 f8		 sar	 eax, cl
  00556	48 98		 cdqe
  00558	48 8b cf	 mov	 rcx, rdi
  0055b	48 03 c8	 add	 rcx, rax
  0055e	48 69 c9 00 06
	00 00		 imul	 rcx, 1536		; 00000600H
  00565	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0056a	48 03 c1	 add	 rax, rcx
  0056d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR probs$33174[rsp], rax

; 378  : 			symbol = 1;

  00575	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR symbol$33175[rsp], 1

; 379  : 
; 380  : 			if (is_literal_state(state)) {

  00580	83 bc 24 94 00
	00 00 07	 cmp	 DWORD PTR state$33168[rsp], 7
  00588	0f 83 5d 0c 00
	00		 jae	 $LN1189@lzma_decod@2
$LN1188@lzma_decod@2:
$LN1187@lzma_decod@2:
$LN1184@lzma_decod@2:

; 381  : 				// Decode literal without match byte.
; 382  : #ifdef HAVE_SMALL
; 383  : 	case SEQ_LITERAL:
; 384  : 				do {
; 385  : 					rc_bit(probs[symbol], , , SEQ_LITERAL);
; 386  : 				} while (symbol < (1 << 8));
; 387  : #else
; 388  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL0);

  0058e	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  00596	73 5e		 jae	 SHORT $LN1181@lzma_decod@2
  00598	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  005a0	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  005a5	75 14		 jne	 SHORT $LN1180@lzma_decod@2
  005a7	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  005ac	c7 80 a0 6e 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+28320], 2
  005b6	e9 65 7a 00 00	 jmp	 $out$33200
$LN1180@lzma_decod@2:
  005bb	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  005bf	c1 e0 08	 shl	 eax, 8
  005c2	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  005c6	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  005ca	c1 e2 08	 shl	 edx, 8
  005cd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  005d2	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  005da	48 03 c1	 add	 rax, rcx
  005dd	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  005e0	8b c2		 mov	 eax, edx
  005e2	0b c1		 or	 eax, ecx
  005e4	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  005e8	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  005ed	48 83 c0 01	 add	 rax, 1
  005f1	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1181@lzma_decod@2:
  005f6	33 c0		 xor	 eax, eax
  005f8	85 c0		 test	 eax, eax
  005fa	75 92		 jne	 SHORT $LN1184@lzma_decod@2
  005fc	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  00600	c1 ea 0b	 shr	 edx, 11
  00603	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0060a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00612	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  00616	8b c2		 mov	 eax, edx
  00618	0f af c1	 imul	 eax, ecx
  0061b	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  00622	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00629	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  0062d	73 68		 jae	 SHORT $LN1179@lzma_decod@2
$LN1178@lzma_decod@2:
  0062f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00636	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0063a	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  00641	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00648	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00650	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00654	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00659	2b c8		 sub	 ecx, eax
  0065b	c1 e9 05	 shr	 ecx, 5
  0065e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00666	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  0066a	03 d1		 add	 edx, ecx
  0066c	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00673	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0067b	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  0067f	33 c0		 xor	 eax, eax
  00681	85 c0		 test	 eax, eax
  00683	75 aa		 jne	 SHORT $LN1178@lzma_decod@2
  00685	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0068c	03 c0		 add	 eax, eax
  0068e	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  00695	eb 78		 jmp	 SHORT $LN1175@lzma_decod@2
$LN1179@lzma_decod@2:
$LN1174@lzma_decod@2:
  00697	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0069e	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  006a2	2b c1		 sub	 eax, ecx
  006a4	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  006a8	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  006af	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  006b3	2b c1		 sub	 eax, ecx
  006b5	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  006b9	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  006c0	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  006c7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  006cf	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  006d3	c1 f9 05	 sar	 ecx, 5
  006d6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  006de	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  006e2	2b d1		 sub	 edx, ecx
  006e4	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  006eb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  006f3	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  006f7	33 c0		 xor	 eax, eax
  006f9	85 c0		 test	 eax, eax
  006fb	75 9a		 jne	 SHORT $LN1174@lzma_decod@2
  006fd	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  00704	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  00708	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN1175@lzma_decod@2:
  0070f	33 c0		 xor	 eax, eax
  00711	85 c0		 test	 eax, eax
  00713	0f 85 75 fe ff
	ff		 jne	 $LN1187@lzma_decod@2
$LN1171@lzma_decod@2:
$LN1170@lzma_decod@2:
$LN1167@lzma_decod@2:

; 389  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL1);

  00719	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  00721	73 5e		 jae	 SHORT $LN1164@lzma_decod@2
  00723	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0072b	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  00730	75 14		 jne	 SHORT $LN1163@lzma_decod@2
  00732	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00737	c7 80 a0 6e 00
	00 03 00 00 00	 mov	 DWORD PTR [rax+28320], 3
  00741	e9 da 78 00 00	 jmp	 $out$33200
$LN1163@lzma_decod@2:
  00746	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0074a	c1 e0 08	 shl	 eax, 8
  0074d	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00751	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  00755	c1 e2 08	 shl	 edx, 8
  00758	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0075d	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  00765	48 03 c1	 add	 rax, rcx
  00768	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0076b	8b c2		 mov	 eax, edx
  0076d	0b c1		 or	 eax, ecx
  0076f	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  00773	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  00778	48 83 c0 01	 add	 rax, 1
  0077c	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1164@lzma_decod@2:
  00781	33 c0		 xor	 eax, eax
  00783	85 c0		 test	 eax, eax
  00785	75 92		 jne	 SHORT $LN1167@lzma_decod@2
  00787	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  0078b	c1 ea 0b	 shr	 edx, 11
  0078e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00795	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0079d	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  007a1	8b c2		 mov	 eax, edx
  007a3	0f af c1	 imul	 eax, ecx
  007a6	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  007ad	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  007b4	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  007b8	73 68		 jae	 SHORT $LN1162@lzma_decod@2
$LN1161@lzma_decod@2:
  007ba	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  007c1	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  007c5	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  007cc	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  007d3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  007db	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  007df	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  007e4	2b c8		 sub	 ecx, eax
  007e6	c1 e9 05	 shr	 ecx, 5
  007e9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  007f1	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  007f5	03 d1		 add	 edx, ecx
  007f7	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  007fe	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00806	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  0080a	33 c0		 xor	 eax, eax
  0080c	85 c0		 test	 eax, eax
  0080e	75 aa		 jne	 SHORT $LN1161@lzma_decod@2
  00810	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  00817	03 c0		 add	 eax, eax
  00819	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  00820	eb 78		 jmp	 SHORT $LN1158@lzma_decod@2
$LN1162@lzma_decod@2:
$LN1157@lzma_decod@2:
  00822	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  00829	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0082d	2b c1		 sub	 eax, ecx
  0082f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00833	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0083a	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  0083e	2b c1		 sub	 eax, ecx
  00840	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  00844	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0084b	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00852	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0085a	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  0085e	c1 f9 05	 sar	 ecx, 5
  00861	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00869	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  0086d	2b d1		 sub	 edx, ecx
  0086f	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00876	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0087e	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  00882	33 c0		 xor	 eax, eax
  00884	85 c0		 test	 eax, eax
  00886	75 9a		 jne	 SHORT $LN1157@lzma_decod@2
  00888	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0088f	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  00893	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN1158@lzma_decod@2:
  0089a	33 c0		 xor	 eax, eax
  0089c	85 c0		 test	 eax, eax
  0089e	0f 85 75 fe ff
	ff		 jne	 $LN1170@lzma_decod@2
$LN1154@lzma_decod@2:
$LN1153@lzma_decod@2:
$LN1150@lzma_decod@2:

; 390  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL2);

  008a4	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  008ac	73 5e		 jae	 SHORT $LN1147@lzma_decod@2
  008ae	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  008b6	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  008bb	75 14		 jne	 SHORT $LN1146@lzma_decod@2
  008bd	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  008c2	c7 80 a0 6e 00
	00 04 00 00 00	 mov	 DWORD PTR [rax+28320], 4
  008cc	e9 4f 77 00 00	 jmp	 $out$33200
$LN1146@lzma_decod@2:
  008d1	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  008d5	c1 e0 08	 shl	 eax, 8
  008d8	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  008dc	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  008e0	c1 e2 08	 shl	 edx, 8
  008e3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  008e8	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  008f0	48 03 c1	 add	 rax, rcx
  008f3	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  008f6	8b c2		 mov	 eax, edx
  008f8	0b c1		 or	 eax, ecx
  008fa	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  008fe	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  00903	48 83 c0 01	 add	 rax, 1
  00907	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1147@lzma_decod@2:
  0090c	33 c0		 xor	 eax, eax
  0090e	85 c0		 test	 eax, eax
  00910	75 92		 jne	 SHORT $LN1150@lzma_decod@2
  00912	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  00916	c1 ea 0b	 shr	 edx, 11
  00919	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00920	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00928	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  0092c	8b c2		 mov	 eax, edx
  0092e	0f af c1	 imul	 eax, ecx
  00931	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  00938	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0093f	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  00943	73 68		 jae	 SHORT $LN1145@lzma_decod@2
$LN1144@lzma_decod@2:
  00945	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0094c	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00950	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  00957	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0095e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00966	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0096a	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0096f	2b c8		 sub	 ecx, eax
  00971	c1 e9 05	 shr	 ecx, 5
  00974	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0097c	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  00980	03 d1		 add	 edx, ecx
  00982	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00989	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00991	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  00995	33 c0		 xor	 eax, eax
  00997	85 c0		 test	 eax, eax
  00999	75 aa		 jne	 SHORT $LN1144@lzma_decod@2
  0099b	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  009a2	03 c0		 add	 eax, eax
  009a4	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  009ab	eb 78		 jmp	 SHORT $LN1141@lzma_decod@2
$LN1145@lzma_decod@2:
$LN1140@lzma_decod@2:
  009ad	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  009b4	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  009b8	2b c1		 sub	 eax, ecx
  009ba	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  009be	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  009c5	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  009c9	2b c1		 sub	 eax, ecx
  009cb	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  009cf	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  009d6	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  009dd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  009e5	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  009e9	c1 f9 05	 sar	 ecx, 5
  009ec	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  009f4	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  009f8	2b d1		 sub	 edx, ecx
  009fa	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00a01	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00a09	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  00a0d	33 c0		 xor	 eax, eax
  00a0f	85 c0		 test	 eax, eax
  00a11	75 9a		 jne	 SHORT $LN1140@lzma_decod@2
  00a13	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  00a1a	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  00a1e	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN1141@lzma_decod@2:
  00a25	33 c0		 xor	 eax, eax
  00a27	85 c0		 test	 eax, eax
  00a29	0f 85 75 fe ff
	ff		 jne	 $LN1153@lzma_decod@2
$LN1137@lzma_decod@2:
$LN1136@lzma_decod@2:
$LN1133@lzma_decod@2:

; 391  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL3);

  00a2f	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  00a37	73 5e		 jae	 SHORT $LN1130@lzma_decod@2
  00a39	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  00a41	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  00a46	75 14		 jne	 SHORT $LN1129@lzma_decod@2
  00a48	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00a4d	c7 80 a0 6e 00
	00 05 00 00 00	 mov	 DWORD PTR [rax+28320], 5
  00a57	e9 c4 75 00 00	 jmp	 $out$33200
$LN1129@lzma_decod@2:
  00a5c	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  00a60	c1 e0 08	 shl	 eax, 8
  00a63	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00a67	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  00a6b	c1 e2 08	 shl	 edx, 8
  00a6e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  00a73	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  00a7b	48 03 c1	 add	 rax, rcx
  00a7e	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00a81	8b c2		 mov	 eax, edx
  00a83	0b c1		 or	 eax, ecx
  00a85	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  00a89	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  00a8e	48 83 c0 01	 add	 rax, 1
  00a92	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1130@lzma_decod@2:
  00a97	33 c0		 xor	 eax, eax
  00a99	85 c0		 test	 eax, eax
  00a9b	75 92		 jne	 SHORT $LN1133@lzma_decod@2
  00a9d	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  00aa1	c1 ea 0b	 shr	 edx, 11
  00aa4	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00aab	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00ab3	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  00ab7	8b c2		 mov	 eax, edx
  00ab9	0f af c1	 imul	 eax, ecx
  00abc	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  00ac3	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00aca	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  00ace	73 68		 jae	 SHORT $LN1128@lzma_decod@2
$LN1127@lzma_decod@2:
  00ad0	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00ad7	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00adb	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  00ae2	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00ae9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00af1	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00af5	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00afa	2b c8		 sub	 ecx, eax
  00afc	c1 e9 05	 shr	 ecx, 5
  00aff	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00b07	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  00b0b	03 d1		 add	 edx, ecx
  00b0d	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00b14	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00b1c	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  00b20	33 c0		 xor	 eax, eax
  00b22	85 c0		 test	 eax, eax
  00b24	75 aa		 jne	 SHORT $LN1127@lzma_decod@2
  00b26	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  00b2d	03 c0		 add	 eax, eax
  00b2f	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  00b36	eb 78		 jmp	 SHORT $LN1124@lzma_decod@2
$LN1128@lzma_decod@2:
$LN1123@lzma_decod@2:
  00b38	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  00b3f	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  00b43	2b c1		 sub	 eax, ecx
  00b45	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00b49	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  00b50	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  00b54	2b c1		 sub	 eax, ecx
  00b56	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  00b5a	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  00b61	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00b68	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00b70	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  00b74	c1 f9 05	 sar	 ecx, 5
  00b77	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00b7f	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  00b83	2b d1		 sub	 edx, ecx
  00b85	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00b8c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00b94	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  00b98	33 c0		 xor	 eax, eax
  00b9a	85 c0		 test	 eax, eax
  00b9c	75 9a		 jne	 SHORT $LN1123@lzma_decod@2
  00b9e	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  00ba5	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  00ba9	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN1124@lzma_decod@2:
  00bb0	33 c0		 xor	 eax, eax
  00bb2	85 c0		 test	 eax, eax
  00bb4	0f 85 75 fe ff
	ff		 jne	 $LN1136@lzma_decod@2
$LN1120@lzma_decod@2:
$LN1119@lzma_decod@2:
$LN1116@lzma_decod@2:

; 392  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL4);

  00bba	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  00bc2	73 5e		 jae	 SHORT $LN1113@lzma_decod@2
  00bc4	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  00bcc	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  00bd1	75 14		 jne	 SHORT $LN1112@lzma_decod@2
  00bd3	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00bd8	c7 80 a0 6e 00
	00 06 00 00 00	 mov	 DWORD PTR [rax+28320], 6
  00be2	e9 39 74 00 00	 jmp	 $out$33200
$LN1112@lzma_decod@2:
  00be7	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  00beb	c1 e0 08	 shl	 eax, 8
  00bee	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00bf2	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  00bf6	c1 e2 08	 shl	 edx, 8
  00bf9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  00bfe	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  00c06	48 03 c1	 add	 rax, rcx
  00c09	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00c0c	8b c2		 mov	 eax, edx
  00c0e	0b c1		 or	 eax, ecx
  00c10	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  00c14	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  00c19	48 83 c0 01	 add	 rax, 1
  00c1d	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1113@lzma_decod@2:
  00c22	33 c0		 xor	 eax, eax
  00c24	85 c0		 test	 eax, eax
  00c26	75 92		 jne	 SHORT $LN1116@lzma_decod@2
  00c28	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  00c2c	c1 ea 0b	 shr	 edx, 11
  00c2f	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00c36	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00c3e	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  00c42	8b c2		 mov	 eax, edx
  00c44	0f af c1	 imul	 eax, ecx
  00c47	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  00c4e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00c55	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  00c59	73 68		 jae	 SHORT $LN1111@lzma_decod@2
$LN1110@lzma_decod@2:
  00c5b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00c62	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00c66	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  00c6d	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00c74	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00c7c	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00c80	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00c85	2b c8		 sub	 ecx, eax
  00c87	c1 e9 05	 shr	 ecx, 5
  00c8a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00c92	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  00c96	03 d1		 add	 edx, ecx
  00c98	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00c9f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00ca7	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  00cab	33 c0		 xor	 eax, eax
  00cad	85 c0		 test	 eax, eax
  00caf	75 aa		 jne	 SHORT $LN1110@lzma_decod@2
  00cb1	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  00cb8	03 c0		 add	 eax, eax
  00cba	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  00cc1	eb 78		 jmp	 SHORT $LN1107@lzma_decod@2
$LN1111@lzma_decod@2:
$LN1106@lzma_decod@2:
  00cc3	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  00cca	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  00cce	2b c1		 sub	 eax, ecx
  00cd0	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00cd4	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  00cdb	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  00cdf	2b c1		 sub	 eax, ecx
  00ce1	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  00ce5	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  00cec	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00cf3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00cfb	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  00cff	c1 f9 05	 sar	 ecx, 5
  00d02	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00d0a	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  00d0e	2b d1		 sub	 edx, ecx
  00d10	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00d17	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00d1f	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  00d23	33 c0		 xor	 eax, eax
  00d25	85 c0		 test	 eax, eax
  00d27	75 9a		 jne	 SHORT $LN1106@lzma_decod@2
  00d29	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  00d30	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  00d34	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN1107@lzma_decod@2:
  00d3b	33 c0		 xor	 eax, eax
  00d3d	85 c0		 test	 eax, eax
  00d3f	0f 85 75 fe ff
	ff		 jne	 $LN1119@lzma_decod@2
$LN1103@lzma_decod@2:
$LN1102@lzma_decod@2:
$LN1099@lzma_decod@2:

; 393  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL5);

  00d45	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  00d4d	73 5e		 jae	 SHORT $LN1096@lzma_decod@2
  00d4f	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  00d57	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  00d5c	75 14		 jne	 SHORT $LN1095@lzma_decod@2
  00d5e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00d63	c7 80 a0 6e 00
	00 07 00 00 00	 mov	 DWORD PTR [rax+28320], 7
  00d6d	e9 ae 72 00 00	 jmp	 $out$33200
$LN1095@lzma_decod@2:
  00d72	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  00d76	c1 e0 08	 shl	 eax, 8
  00d79	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00d7d	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  00d81	c1 e2 08	 shl	 edx, 8
  00d84	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  00d89	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  00d91	48 03 c1	 add	 rax, rcx
  00d94	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00d97	8b c2		 mov	 eax, edx
  00d99	0b c1		 or	 eax, ecx
  00d9b	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  00d9f	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  00da4	48 83 c0 01	 add	 rax, 1
  00da8	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1096@lzma_decod@2:
  00dad	33 c0		 xor	 eax, eax
  00daf	85 c0		 test	 eax, eax
  00db1	75 92		 jne	 SHORT $LN1099@lzma_decod@2
  00db3	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  00db7	c1 ea 0b	 shr	 edx, 11
  00dba	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00dc1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00dc9	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  00dcd	8b c2		 mov	 eax, edx
  00dcf	0f af c1	 imul	 eax, ecx
  00dd2	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  00dd9	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00de0	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  00de4	73 68		 jae	 SHORT $LN1094@lzma_decod@2
$LN1093@lzma_decod@2:
  00de6	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00ded	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00df1	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  00df8	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00dff	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00e07	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00e0b	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00e10	2b c8		 sub	 ecx, eax
  00e12	c1 e9 05	 shr	 ecx, 5
  00e15	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00e1d	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  00e21	03 d1		 add	 edx, ecx
  00e23	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00e2a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00e32	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  00e36	33 c0		 xor	 eax, eax
  00e38	85 c0		 test	 eax, eax
  00e3a	75 aa		 jne	 SHORT $LN1093@lzma_decod@2
  00e3c	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  00e43	03 c0		 add	 eax, eax
  00e45	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  00e4c	eb 78		 jmp	 SHORT $LN1090@lzma_decod@2
$LN1094@lzma_decod@2:
$LN1089@lzma_decod@2:
  00e4e	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  00e55	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  00e59	2b c1		 sub	 eax, ecx
  00e5b	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00e5f	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  00e66	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  00e6a	2b c1		 sub	 eax, ecx
  00e6c	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  00e70	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  00e77	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00e7e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00e86	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  00e8a	c1 f9 05	 sar	 ecx, 5
  00e8d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00e95	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  00e99	2b d1		 sub	 edx, ecx
  00e9b	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00ea2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00eaa	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  00eae	33 c0		 xor	 eax, eax
  00eb0	85 c0		 test	 eax, eax
  00eb2	75 9a		 jne	 SHORT $LN1089@lzma_decod@2
  00eb4	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  00ebb	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  00ebf	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN1090@lzma_decod@2:
  00ec6	33 c0		 xor	 eax, eax
  00ec8	85 c0		 test	 eax, eax
  00eca	0f 85 75 fe ff
	ff		 jne	 $LN1102@lzma_decod@2
$LN1086@lzma_decod@2:
$LN1085@lzma_decod@2:
$LN1082@lzma_decod@2:

; 394  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL6);

  00ed0	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  00ed8	73 5e		 jae	 SHORT $LN1079@lzma_decod@2
  00eda	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  00ee2	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  00ee7	75 14		 jne	 SHORT $LN1078@lzma_decod@2
  00ee9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00eee	c7 80 a0 6e 00
	00 08 00 00 00	 mov	 DWORD PTR [rax+28320], 8
  00ef8	e9 23 71 00 00	 jmp	 $out$33200
$LN1078@lzma_decod@2:
  00efd	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  00f01	c1 e0 08	 shl	 eax, 8
  00f04	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00f08	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  00f0c	c1 e2 08	 shl	 edx, 8
  00f0f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  00f14	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  00f1c	48 03 c1	 add	 rax, rcx
  00f1f	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  00f22	8b c2		 mov	 eax, edx
  00f24	0b c1		 or	 eax, ecx
  00f26	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  00f2a	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  00f2f	48 83 c0 01	 add	 rax, 1
  00f33	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1079@lzma_decod@2:
  00f38	33 c0		 xor	 eax, eax
  00f3a	85 c0		 test	 eax, eax
  00f3c	75 92		 jne	 SHORT $LN1082@lzma_decod@2
  00f3e	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  00f42	c1 ea 0b	 shr	 edx, 11
  00f45	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00f4c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00f54	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  00f58	8b c2		 mov	 eax, edx
  00f5a	0f af c1	 imul	 eax, ecx
  00f5d	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  00f64	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00f6b	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  00f6f	73 68		 jae	 SHORT $LN1077@lzma_decod@2
$LN1076@lzma_decod@2:
  00f71	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  00f78	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00f7c	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  00f83	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00f8a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00f92	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00f96	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  00f9b	2b c8		 sub	 ecx, eax
  00f9d	c1 e9 05	 shr	 ecx, 5
  00fa0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00fa8	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  00fac	03 d1		 add	 edx, ecx
  00fae	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  00fb5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  00fbd	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  00fc1	33 c0		 xor	 eax, eax
  00fc3	85 c0		 test	 eax, eax
  00fc5	75 aa		 jne	 SHORT $LN1076@lzma_decod@2
  00fc7	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  00fce	03 c0		 add	 eax, eax
  00fd0	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  00fd7	eb 78		 jmp	 SHORT $LN1073@lzma_decod@2
$LN1077@lzma_decod@2:
$LN1072@lzma_decod@2:
  00fd9	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  00fe0	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  00fe4	2b c1		 sub	 eax, ecx
  00fe6	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  00fea	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  00ff1	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  00ff5	2b c1		 sub	 eax, ecx
  00ff7	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  00ffb	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  01002	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  01009	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01011	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  01015	c1 f9 05	 sar	 ecx, 5
  01018	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01020	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01024	2b d1		 sub	 edx, ecx
  01026	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0102d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01035	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01039	33 c0		 xor	 eax, eax
  0103b	85 c0		 test	 eax, eax
  0103d	75 9a		 jne	 SHORT $LN1072@lzma_decod@2
  0103f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  01046	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0104a	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN1073@lzma_decod@2:
  01051	33 c0		 xor	 eax, eax
  01053	85 c0		 test	 eax, eax
  01055	0f 85 75 fe ff
	ff		 jne	 $LN1085@lzma_decod@2
$LN1069@lzma_decod@2:
$LN1068@lzma_decod@2:
$LN1065@lzma_decod@2:

; 395  : 				rc_bit_case(probs[symbol], , , SEQ_LITERAL7);

  0105b	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  01063	73 5e		 jae	 SHORT $LN1062@lzma_decod@2
  01065	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0106d	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  01072	75 14		 jne	 SHORT $LN1061@lzma_decod@2
  01074	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  01079	c7 80 a0 6e 00
	00 09 00 00 00	 mov	 DWORD PTR [rax+28320], 9
  01083	e9 98 6f 00 00	 jmp	 $out$33200
$LN1061@lzma_decod@2:
  01088	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0108c	c1 e0 08	 shl	 eax, 8
  0108f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01093	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  01097	c1 e2 08	 shl	 edx, 8
  0109a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0109f	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  010a7	48 03 c1	 add	 rax, rcx
  010aa	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  010ad	8b c2		 mov	 eax, edx
  010af	0b c1		 or	 eax, ecx
  010b1	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  010b5	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  010ba	48 83 c0 01	 add	 rax, 1
  010be	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1062@lzma_decod@2:
  010c3	33 c0		 xor	 eax, eax
  010c5	85 c0		 test	 eax, eax
  010c7	75 92		 jne	 SHORT $LN1065@lzma_decod@2
  010c9	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  010cd	c1 ea 0b	 shr	 edx, 11
  010d0	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  010d7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  010df	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  010e3	8b c2		 mov	 eax, edx
  010e5	0f af c1	 imul	 eax, ecx
  010e8	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  010ef	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  010f6	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  010fa	73 68		 jae	 SHORT $LN1060@lzma_decod@2
$LN1059@lzma_decod@2:
  010fc	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  01103	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01107	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0110e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  01115	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0111d	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01121	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  01126	2b c8		 sub	 ecx, eax
  01128	c1 e9 05	 shr	 ecx, 5
  0112b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01133	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01137	03 d1		 add	 edx, ecx
  01139	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  01140	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01148	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  0114c	33 c0		 xor	 eax, eax
  0114e	85 c0		 test	 eax, eax
  01150	75 aa		 jne	 SHORT $LN1059@lzma_decod@2
  01152	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  01159	03 c0		 add	 eax, eax
  0115b	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  01162	eb 78		 jmp	 SHORT $LN1056@lzma_decod@2
$LN1060@lzma_decod@2:
$LN1055@lzma_decod@2:
  01164	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0116b	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0116f	2b c1		 sub	 eax, ecx
  01171	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01175	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0117c	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  01180	2b c1		 sub	 eax, ecx
  01182	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  01186	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0118d	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  01194	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0119c	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  011a0	c1 f9 05	 sar	 ecx, 5
  011a3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  011ab	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  011af	2b d1		 sub	 edx, ecx
  011b1	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  011b8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  011c0	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  011c4	33 c0		 xor	 eax, eax
  011c6	85 c0		 test	 eax, eax
  011c8	75 9a		 jne	 SHORT $LN1055@lzma_decod@2
  011ca	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  011d1	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  011d5	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN1056@lzma_decod@2:
  011dc	33 c0		 xor	 eax, eax
  011de	85 c0		 test	 eax, eax
  011e0	0f 85 75 fe ff
	ff		 jne	 $LN1068@lzma_decod@2

; 396  : #endif
; 397  : 			} else {

  011e6	e9 93 10 00 00	 jmp	 $LN1052@lzma_decod@2
$LN1189@lzma_decod@2:

; 398  : 				// Decode literal with match byte.
; 399  : 				//
; 400  : 				// We store the byte we compare against
; 401  : 				// ("match byte") to "len" to minimize the
; 402  : 				// number of variables we need to store
; 403  : 				// between decoder calls.
; 404  : 				len = dict_get(&dict, rep0) << 1;

  011eb	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  011ef	48 3b 44 24 50	 cmp	 rax, QWORD PTR dict$33163[rsp+8]
  011f4	73 0e		 jae	 SHORT $LN1233@lzma_decod@2
  011f6	48 c7 84 24 58
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv4658[rsp], 0
  01202	eb 0d		 jmp	 SHORT $LN1234@lzma_decod@2
$LN1233@lzma_decod@2:
  01204	48 8b 44 24 68	 mov	 rax, QWORD PTR dict$33163[rsp+32]
  01209	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv4658[rsp], rax
$LN1234@lzma_decod@2:
  01211	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  01215	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dict$33163[rsp+8]
  0121a	48 2b c8	 sub	 rcx, rax
  0121d	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tv4658[rsp]
  01225	48 8d 4c 01 ff	 lea	 rcx, QWORD PTR [rcx+rax-1]
  0122a	48 8b 44 24 48	 mov	 rax, QWORD PTR dict$33163[rsp]
  0122f	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  01233	88 84 24 e9 00
	00 00		 mov	 BYTE PTR $T37335[rsp], al
  0123a	0f b6 84 24 e9
	00 00 00	 movzx	 eax, BYTE PTR $T37335[rsp]
  01242	d1 e0		 shl	 eax, 1
  01244	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax

; 405  : 
; 406  : 				// The usage of "offset" allows omitting some
; 407  : 				// branches, which should give tiny speed
; 408  : 				// improvement on some CPUs. "offset" gets
; 409  : 				// set to zero if match_bit didn't match.
; 410  : 				offset = 0x100;

  0124b	c7 84 24 ac 00
	00 00 00 01 00
	00		 mov	 DWORD PTR offset$33177[rsp], 256 ; 00000100H
$LN1051@lzma_decod@2:

; 411  : 
; 412  : #ifdef HAVE_SMALL
; 413  : 	case SEQ_LITERAL_MATCHED:
; 414  : 				do {
; 415  : 					const uint32_t match_bit
; 416  : 							= len & offset;
; 417  : 					const uint32_t subcoder_index
; 418  : 							= offset + match_bit
; 419  : 							+ symbol;
; 420  : 
; 421  : 					rc_bit(probs[subcoder_index],
; 422  : 							offset &= ~match_bit,
; 423  : 							offset &= match_bit,
; 424  : 							SEQ_LITERAL_MATCHED);
; 425  : 
; 426  : 					// It seems to be faster to do this
; 427  : 					// here instead of putting it to the
; 428  : 					// beginning of the loop and then
; 429  : 					// putting the "case" in the middle
; 430  : 					// of the loop.
; 431  : 					len <<= 1;
; 432  : 
; 433  : 				} while (symbol < (1 << 8));
; 434  : #else
; 435  :               { // Unroll the loop.
; 436  : 				uint32_t match_bit;
; 437  : 				uint32_t subcoder_index;
; 438  : 
; 439  : #	define d(seq) \
; 440  : 		case seq: \
; 441  : 			match_bit = len & offset; \
; 442  : 			subcoder_index = offset + match_bit + symbol; \
; 443  : 			rc_bit(probs[subcoder_index], \
; 444  : 					offset &= ~match_bit, \
; 445  : 					offset &= match_bit, \
; 446  : 					seq)
; 447  : 
; 448  : 				d(SEQ_LITERAL_MATCHED0);

  01256	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  0125d	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  01264	23 c1		 and	 eax, ecx
  01266	89 84 24 d0 00
	00 00		 mov	 DWORD PTR match_bit$33343[rsp], eax
  0126d	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01274	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  0127b	03 c1		 add	 eax, ecx
  0127d	03 84 24 98 00
	00 00		 add	 eax, DWORD PTR symbol$33175[rsp]
  01284	89 84 24 cc 00
	00 00		 mov	 DWORD PTR subcoder_index$33344[rsp], eax
$LN1050@lzma_decod@2:
$LN1047@lzma_decod@2:
  0128b	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  01293	73 5e		 jae	 SHORT $LN1044@lzma_decod@2
  01295	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0129d	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  012a2	75 14		 jne	 SHORT $LN1043@lzma_decod@2
  012a4	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  012a9	c7 80 a0 6e 00
	00 0a 00 00 00	 mov	 DWORD PTR [rax+28320], 10
  012b3	e9 68 6d 00 00	 jmp	 $out$33200
$LN1043@lzma_decod@2:
  012b8	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  012bc	c1 e0 08	 shl	 eax, 8
  012bf	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  012c3	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  012c7	c1 e2 08	 shl	 edx, 8
  012ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  012cf	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  012d7	48 03 c1	 add	 rax, rcx
  012da	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  012dd	8b c2		 mov	 eax, edx
  012df	0b c1		 or	 eax, ecx
  012e1	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  012e5	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  012ea	48 83 c0 01	 add	 rax, 1
  012ee	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1044@lzma_decod@2:
  012f3	33 c0		 xor	 eax, eax
  012f5	85 c0		 test	 eax, eax
  012f7	75 92		 jne	 SHORT $LN1047@lzma_decod@2
  012f9	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  012fd	c1 ea 0b	 shr	 edx, 11
  01300	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01307	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0130f	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  01313	8b c2		 mov	 eax, edx
  01315	0f af c1	 imul	 eax, ecx
  01318	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0131f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  01326	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  0132a	0f 83 84 00 00
	00		 jae	 $LN1042@lzma_decod@2
$LN1041@lzma_decod@2:
  01330	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  01337	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0133b	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  01342	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01349	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01351	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01355	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0135a	2b c8		 sub	 ecx, eax
  0135c	c1 e9 05	 shr	 ecx, 5
  0135f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01367	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  0136b	03 d1		 add	 edx, ecx
  0136d	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01374	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0137c	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01380	33 c0		 xor	 eax, eax
  01382	85 c0		 test	 eax, eax
  01384	75 aa		 jne	 SHORT $LN1041@lzma_decod@2
  01386	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0138d	03 c0		 add	 eax, eax
  0138f	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  01396	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  0139d	f7 d1		 not	 ecx
  0139f	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  013a6	23 c1		 and	 eax, ecx
  013a8	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
  013af	e9 8f 00 00 00	 jmp	 $LN1038@lzma_decod@2
$LN1042@lzma_decod@2:
$LN1037@lzma_decod@2:
  013b4	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  013bb	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  013bf	2b c1		 sub	 eax, ecx
  013c1	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  013c5	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  013cc	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  013d0	2b c1		 sub	 eax, ecx
  013d2	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  013d6	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  013dd	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  013e4	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  013ec	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  013f0	c1 f9 05	 sar	 ecx, 5
  013f3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  013fb	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  013ff	2b d1		 sub	 edx, ecx
  01401	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01408	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01410	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01414	33 c0		 xor	 eax, eax
  01416	85 c0		 test	 eax, eax
  01418	75 9a		 jne	 SHORT $LN1037@lzma_decod@2
  0141a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  01421	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  01425	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  0142c	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01433	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  0143a	23 c1		 and	 eax, ecx
  0143c	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
$LN1038@lzma_decod@2:
  01443	33 c0		 xor	 eax, eax
  01445	85 c0		 test	 eax, eax
  01447	0f 85 3e fe ff
	ff		 jne	 $LN1050@lzma_decod@2

; 449  : 				len <<= 1;

  0144d	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  01454	03 c0		 add	 eax, eax
  01456	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
$LN1034@lzma_decod@2:

; 450  : 				d(SEQ_LITERAL_MATCHED1);

  0145d	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  01464	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  0146b	23 c1		 and	 eax, ecx
  0146d	89 84 24 d0 00
	00 00		 mov	 DWORD PTR match_bit$33343[rsp], eax
  01474	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  0147b	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01482	03 c1		 add	 eax, ecx
  01484	03 84 24 98 00
	00 00		 add	 eax, DWORD PTR symbol$33175[rsp]
  0148b	89 84 24 cc 00
	00 00		 mov	 DWORD PTR subcoder_index$33344[rsp], eax
$LN1033@lzma_decod@2:
$LN1030@lzma_decod@2:
  01492	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0149a	73 5e		 jae	 SHORT $LN1027@lzma_decod@2
  0149c	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  014a4	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  014a9	75 14		 jne	 SHORT $LN1026@lzma_decod@2
  014ab	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  014b0	c7 80 a0 6e 00
	00 0b 00 00 00	 mov	 DWORD PTR [rax+28320], 11
  014ba	e9 61 6b 00 00	 jmp	 $out$33200
$LN1026@lzma_decod@2:
  014bf	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  014c3	c1 e0 08	 shl	 eax, 8
  014c6	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  014ca	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  014ce	c1 e2 08	 shl	 edx, 8
  014d1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  014d6	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  014de	48 03 c1	 add	 rax, rcx
  014e1	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  014e4	8b c2		 mov	 eax, edx
  014e6	0b c1		 or	 eax, ecx
  014e8	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  014ec	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  014f1	48 83 c0 01	 add	 rax, 1
  014f5	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1027@lzma_decod@2:
  014fa	33 c0		 xor	 eax, eax
  014fc	85 c0		 test	 eax, eax
  014fe	75 92		 jne	 SHORT $LN1030@lzma_decod@2
  01500	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  01504	c1 ea 0b	 shr	 edx, 11
  01507	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  0150e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01516	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  0151a	8b c2		 mov	 eax, edx
  0151c	0f af c1	 imul	 eax, ecx
  0151f	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  01526	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0152d	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  01531	0f 83 84 00 00
	00		 jae	 $LN1025@lzma_decod@2
$LN1024@lzma_decod@2:
  01537	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0153e	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01542	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  01549	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01550	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01558	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0155c	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  01561	2b c8		 sub	 ecx, eax
  01563	c1 e9 05	 shr	 ecx, 5
  01566	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0156e	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01572	03 d1		 add	 edx, ecx
  01574	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  0157b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01583	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01587	33 c0		 xor	 eax, eax
  01589	85 c0		 test	 eax, eax
  0158b	75 aa		 jne	 SHORT $LN1024@lzma_decod@2
  0158d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  01594	03 c0		 add	 eax, eax
  01596	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  0159d	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  015a4	f7 d1		 not	 ecx
  015a6	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  015ad	23 c1		 and	 eax, ecx
  015af	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
  015b6	e9 8f 00 00 00	 jmp	 $LN1021@lzma_decod@2
$LN1025@lzma_decod@2:
$LN1020@lzma_decod@2:
  015bb	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  015c2	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  015c6	2b c1		 sub	 eax, ecx
  015c8	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  015cc	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  015d3	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  015d7	2b c1		 sub	 eax, ecx
  015d9	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  015dd	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  015e4	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  015eb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  015f3	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  015f7	c1 f9 05	 sar	 ecx, 5
  015fa	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01602	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01606	2b d1		 sub	 edx, ecx
  01608	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  0160f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01617	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  0161b	33 c0		 xor	 eax, eax
  0161d	85 c0		 test	 eax, eax
  0161f	75 9a		 jne	 SHORT $LN1020@lzma_decod@2
  01621	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  01628	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0162c	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  01633	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  0163a	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01641	23 c1		 and	 eax, ecx
  01643	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
$LN1021@lzma_decod@2:
  0164a	33 c0		 xor	 eax, eax
  0164c	85 c0		 test	 eax, eax
  0164e	0f 85 3e fe ff
	ff		 jne	 $LN1033@lzma_decod@2

; 451  : 				len <<= 1;

  01654	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  0165b	03 c0		 add	 eax, eax
  0165d	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
$LN1017@lzma_decod@2:

; 452  : 				d(SEQ_LITERAL_MATCHED2);

  01664	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  0166b	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  01672	23 c1		 and	 eax, ecx
  01674	89 84 24 d0 00
	00 00		 mov	 DWORD PTR match_bit$33343[rsp], eax
  0167b	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01682	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01689	03 c1		 add	 eax, ecx
  0168b	03 84 24 98 00
	00 00		 add	 eax, DWORD PTR symbol$33175[rsp]
  01692	89 84 24 cc 00
	00 00		 mov	 DWORD PTR subcoder_index$33344[rsp], eax
$LN1016@lzma_decod@2:
$LN1013@lzma_decod@2:
  01699	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  016a1	73 5e		 jae	 SHORT $LN1010@lzma_decod@2
  016a3	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  016ab	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  016b0	75 14		 jne	 SHORT $LN1009@lzma_decod@2
  016b2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  016b7	c7 80 a0 6e 00
	00 0c 00 00 00	 mov	 DWORD PTR [rax+28320], 12
  016c1	e9 5a 69 00 00	 jmp	 $out$33200
$LN1009@lzma_decod@2:
  016c6	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  016ca	c1 e0 08	 shl	 eax, 8
  016cd	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  016d1	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  016d5	c1 e2 08	 shl	 edx, 8
  016d8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  016dd	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  016e5	48 03 c1	 add	 rax, rcx
  016e8	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  016eb	8b c2		 mov	 eax, edx
  016ed	0b c1		 or	 eax, ecx
  016ef	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  016f3	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  016f8	48 83 c0 01	 add	 rax, 1
  016fc	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN1010@lzma_decod@2:
  01701	33 c0		 xor	 eax, eax
  01703	85 c0		 test	 eax, eax
  01705	75 92		 jne	 SHORT $LN1013@lzma_decod@2
  01707	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  0170b	c1 ea 0b	 shr	 edx, 11
  0170e	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01715	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0171d	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  01721	8b c2		 mov	 eax, edx
  01723	0f af c1	 imul	 eax, ecx
  01726	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0172d	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  01734	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  01738	0f 83 84 00 00
	00		 jae	 $LN1008@lzma_decod@2
$LN1007@lzma_decod@2:
  0173e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  01745	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01749	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  01750	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01757	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0175f	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01763	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  01768	2b c8		 sub	 ecx, eax
  0176a	c1 e9 05	 shr	 ecx, 5
  0176d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01775	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01779	03 d1		 add	 edx, ecx
  0177b	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01782	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0178a	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  0178e	33 c0		 xor	 eax, eax
  01790	85 c0		 test	 eax, eax
  01792	75 aa		 jne	 SHORT $LN1007@lzma_decod@2
  01794	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0179b	03 c0		 add	 eax, eax
  0179d	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  017a4	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  017ab	f7 d1		 not	 ecx
  017ad	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  017b4	23 c1		 and	 eax, ecx
  017b6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
  017bd	e9 8f 00 00 00	 jmp	 $LN1004@lzma_decod@2
$LN1008@lzma_decod@2:
$LN1003@lzma_decod@2:
  017c2	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  017c9	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  017cd	2b c1		 sub	 eax, ecx
  017cf	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  017d3	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  017da	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  017de	2b c1		 sub	 eax, ecx
  017e0	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  017e4	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  017eb	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  017f2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  017fa	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  017fe	c1 f9 05	 sar	 ecx, 5
  01801	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01809	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  0180d	2b d1		 sub	 edx, ecx
  0180f	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01816	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0181e	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01822	33 c0		 xor	 eax, eax
  01824	85 c0		 test	 eax, eax
  01826	75 9a		 jne	 SHORT $LN1003@lzma_decod@2
  01828	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0182f	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  01833	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  0183a	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01841	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01848	23 c1		 and	 eax, ecx
  0184a	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
$LN1004@lzma_decod@2:
  01851	33 c0		 xor	 eax, eax
  01853	85 c0		 test	 eax, eax
  01855	0f 85 3e fe ff
	ff		 jne	 $LN1016@lzma_decod@2

; 453  : 				len <<= 1;

  0185b	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  01862	03 c0		 add	 eax, eax
  01864	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
$LN1000@lzma_decod@2:

; 454  : 				d(SEQ_LITERAL_MATCHED3);

  0186b	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  01872	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  01879	23 c1		 and	 eax, ecx
  0187b	89 84 24 d0 00
	00 00		 mov	 DWORD PTR match_bit$33343[rsp], eax
  01882	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01889	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01890	03 c1		 add	 eax, ecx
  01892	03 84 24 98 00
	00 00		 add	 eax, DWORD PTR symbol$33175[rsp]
  01899	89 84 24 cc 00
	00 00		 mov	 DWORD PTR subcoder_index$33344[rsp], eax
$LN999@lzma_decod@2:
$LN996@lzma_decod@2:
  018a0	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  018a8	73 5e		 jae	 SHORT $LN993@lzma_decod@2
  018aa	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  018b2	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  018b7	75 14		 jne	 SHORT $LN992@lzma_decod@2
  018b9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  018be	c7 80 a0 6e 00
	00 0d 00 00 00	 mov	 DWORD PTR [rax+28320], 13
  018c8	e9 53 67 00 00	 jmp	 $out$33200
$LN992@lzma_decod@2:
  018cd	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  018d1	c1 e0 08	 shl	 eax, 8
  018d4	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  018d8	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  018dc	c1 e2 08	 shl	 edx, 8
  018df	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  018e4	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  018ec	48 03 c1	 add	 rax, rcx
  018ef	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  018f2	8b c2		 mov	 eax, edx
  018f4	0b c1		 or	 eax, ecx
  018f6	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  018fa	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  018ff	48 83 c0 01	 add	 rax, 1
  01903	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN993@lzma_decod@2:
  01908	33 c0		 xor	 eax, eax
  0190a	85 c0		 test	 eax, eax
  0190c	75 92		 jne	 SHORT $LN996@lzma_decod@2
  0190e	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  01912	c1 ea 0b	 shr	 edx, 11
  01915	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  0191c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01924	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  01928	8b c2		 mov	 eax, edx
  0192a	0f af c1	 imul	 eax, ecx
  0192d	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  01934	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0193b	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  0193f	0f 83 84 00 00
	00		 jae	 $LN991@lzma_decod@2
$LN990@lzma_decod@2:
  01945	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0194c	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01950	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  01957	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  0195e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01966	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0196a	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0196f	2b c8		 sub	 ecx, eax
  01971	c1 e9 05	 shr	 ecx, 5
  01974	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0197c	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01980	03 d1		 add	 edx, ecx
  01982	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01989	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01991	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01995	33 c0		 xor	 eax, eax
  01997	85 c0		 test	 eax, eax
  01999	75 aa		 jne	 SHORT $LN990@lzma_decod@2
  0199b	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  019a2	03 c0		 add	 eax, eax
  019a4	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  019ab	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  019b2	f7 d1		 not	 ecx
  019b4	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  019bb	23 c1		 and	 eax, ecx
  019bd	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
  019c4	e9 8f 00 00 00	 jmp	 $LN987@lzma_decod@2
$LN991@lzma_decod@2:
$LN986@lzma_decod@2:
  019c9	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  019d0	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  019d4	2b c1		 sub	 eax, ecx
  019d6	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  019da	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  019e1	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  019e5	2b c1		 sub	 eax, ecx
  019e7	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  019eb	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  019f2	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  019f9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01a01	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  01a05	c1 f9 05	 sar	 ecx, 5
  01a08	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01a10	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01a14	2b d1		 sub	 edx, ecx
  01a16	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01a1d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01a25	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01a29	33 c0		 xor	 eax, eax
  01a2b	85 c0		 test	 eax, eax
  01a2d	75 9a		 jne	 SHORT $LN986@lzma_decod@2
  01a2f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  01a36	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  01a3a	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  01a41	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01a48	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01a4f	23 c1		 and	 eax, ecx
  01a51	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
$LN987@lzma_decod@2:
  01a58	33 c0		 xor	 eax, eax
  01a5a	85 c0		 test	 eax, eax
  01a5c	0f 85 3e fe ff
	ff		 jne	 $LN999@lzma_decod@2

; 455  : 				len <<= 1;

  01a62	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  01a69	03 c0		 add	 eax, eax
  01a6b	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
$LN983@lzma_decod@2:

; 456  : 				d(SEQ_LITERAL_MATCHED4);

  01a72	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  01a79	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  01a80	23 c1		 and	 eax, ecx
  01a82	89 84 24 d0 00
	00 00		 mov	 DWORD PTR match_bit$33343[rsp], eax
  01a89	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01a90	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01a97	03 c1		 add	 eax, ecx
  01a99	03 84 24 98 00
	00 00		 add	 eax, DWORD PTR symbol$33175[rsp]
  01aa0	89 84 24 cc 00
	00 00		 mov	 DWORD PTR subcoder_index$33344[rsp], eax
$LN982@lzma_decod@2:
$LN979@lzma_decod@2:
  01aa7	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  01aaf	73 5e		 jae	 SHORT $LN976@lzma_decod@2
  01ab1	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  01ab9	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  01abe	75 14		 jne	 SHORT $LN975@lzma_decod@2
  01ac0	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  01ac5	c7 80 a0 6e 00
	00 0e 00 00 00	 mov	 DWORD PTR [rax+28320], 14
  01acf	e9 4c 65 00 00	 jmp	 $out$33200
$LN975@lzma_decod@2:
  01ad4	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  01ad8	c1 e0 08	 shl	 eax, 8
  01adb	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01adf	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  01ae3	c1 e2 08	 shl	 edx, 8
  01ae6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  01aeb	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  01af3	48 03 c1	 add	 rax, rcx
  01af6	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  01af9	8b c2		 mov	 eax, edx
  01afb	0b c1		 or	 eax, ecx
  01afd	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  01b01	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  01b06	48 83 c0 01	 add	 rax, 1
  01b0a	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN976@lzma_decod@2:
  01b0f	33 c0		 xor	 eax, eax
  01b11	85 c0		 test	 eax, eax
  01b13	75 92		 jne	 SHORT $LN979@lzma_decod@2
  01b15	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  01b19	c1 ea 0b	 shr	 edx, 11
  01b1c	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01b23	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01b2b	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  01b2f	8b c2		 mov	 eax, edx
  01b31	0f af c1	 imul	 eax, ecx
  01b34	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  01b3b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  01b42	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  01b46	0f 83 84 00 00
	00		 jae	 $LN974@lzma_decod@2
$LN973@lzma_decod@2:
  01b4c	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  01b53	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01b57	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  01b5e	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01b65	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01b6d	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01b71	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  01b76	2b c8		 sub	 ecx, eax
  01b78	c1 e9 05	 shr	 ecx, 5
  01b7b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01b83	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01b87	03 d1		 add	 edx, ecx
  01b89	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01b90	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01b98	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01b9c	33 c0		 xor	 eax, eax
  01b9e	85 c0		 test	 eax, eax
  01ba0	75 aa		 jne	 SHORT $LN973@lzma_decod@2
  01ba2	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  01ba9	03 c0		 add	 eax, eax
  01bab	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  01bb2	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01bb9	f7 d1		 not	 ecx
  01bbb	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01bc2	23 c1		 and	 eax, ecx
  01bc4	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
  01bcb	e9 8f 00 00 00	 jmp	 $LN970@lzma_decod@2
$LN974@lzma_decod@2:
$LN969@lzma_decod@2:
  01bd0	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  01bd7	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  01bdb	2b c1		 sub	 eax, ecx
  01bdd	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01be1	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  01be8	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  01bec	2b c1		 sub	 eax, ecx
  01bee	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  01bf2	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  01bf9	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01c00	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01c08	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  01c0c	c1 f9 05	 sar	 ecx, 5
  01c0f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01c17	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01c1b	2b d1		 sub	 edx, ecx
  01c1d	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01c24	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01c2c	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01c30	33 c0		 xor	 eax, eax
  01c32	85 c0		 test	 eax, eax
  01c34	75 9a		 jne	 SHORT $LN969@lzma_decod@2
  01c36	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  01c3d	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  01c41	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  01c48	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01c4f	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01c56	23 c1		 and	 eax, ecx
  01c58	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
$LN970@lzma_decod@2:
  01c5f	33 c0		 xor	 eax, eax
  01c61	85 c0		 test	 eax, eax
  01c63	0f 85 3e fe ff
	ff		 jne	 $LN982@lzma_decod@2

; 457  : 				len <<= 1;

  01c69	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  01c70	03 c0		 add	 eax, eax
  01c72	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
$LN966@lzma_decod@2:

; 458  : 				d(SEQ_LITERAL_MATCHED5);

  01c79	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  01c80	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  01c87	23 c1		 and	 eax, ecx
  01c89	89 84 24 d0 00
	00 00		 mov	 DWORD PTR match_bit$33343[rsp], eax
  01c90	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01c97	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01c9e	03 c1		 add	 eax, ecx
  01ca0	03 84 24 98 00
	00 00		 add	 eax, DWORD PTR symbol$33175[rsp]
  01ca7	89 84 24 cc 00
	00 00		 mov	 DWORD PTR subcoder_index$33344[rsp], eax
$LN965@lzma_decod@2:
$LN962@lzma_decod@2:
  01cae	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  01cb6	73 5e		 jae	 SHORT $LN959@lzma_decod@2
  01cb8	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  01cc0	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  01cc5	75 14		 jne	 SHORT $LN958@lzma_decod@2
  01cc7	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  01ccc	c7 80 a0 6e 00
	00 0f 00 00 00	 mov	 DWORD PTR [rax+28320], 15
  01cd6	e9 45 63 00 00	 jmp	 $out$33200
$LN958@lzma_decod@2:
  01cdb	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  01cdf	c1 e0 08	 shl	 eax, 8
  01ce2	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01ce6	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  01cea	c1 e2 08	 shl	 edx, 8
  01ced	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  01cf2	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  01cfa	48 03 c1	 add	 rax, rcx
  01cfd	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  01d00	8b c2		 mov	 eax, edx
  01d02	0b c1		 or	 eax, ecx
  01d04	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  01d08	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  01d0d	48 83 c0 01	 add	 rax, 1
  01d11	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN959@lzma_decod@2:
  01d16	33 c0		 xor	 eax, eax
  01d18	85 c0		 test	 eax, eax
  01d1a	75 92		 jne	 SHORT $LN962@lzma_decod@2
  01d1c	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  01d20	c1 ea 0b	 shr	 edx, 11
  01d23	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01d2a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01d32	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  01d36	8b c2		 mov	 eax, edx
  01d38	0f af c1	 imul	 eax, ecx
  01d3b	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  01d42	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  01d49	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  01d4d	0f 83 84 00 00
	00		 jae	 $LN957@lzma_decod@2
$LN956@lzma_decod@2:
  01d53	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  01d5a	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01d5e	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  01d65	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01d6c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01d74	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01d78	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  01d7d	2b c8		 sub	 ecx, eax
  01d7f	c1 e9 05	 shr	 ecx, 5
  01d82	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01d8a	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01d8e	03 d1		 add	 edx, ecx
  01d90	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01d97	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01d9f	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01da3	33 c0		 xor	 eax, eax
  01da5	85 c0		 test	 eax, eax
  01da7	75 aa		 jne	 SHORT $LN956@lzma_decod@2
  01da9	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  01db0	03 c0		 add	 eax, eax
  01db2	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  01db9	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01dc0	f7 d1		 not	 ecx
  01dc2	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01dc9	23 c1		 and	 eax, ecx
  01dcb	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
  01dd2	e9 8f 00 00 00	 jmp	 $LN953@lzma_decod@2
$LN957@lzma_decod@2:
$LN952@lzma_decod@2:
  01dd7	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  01dde	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  01de2	2b c1		 sub	 eax, ecx
  01de4	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01de8	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  01def	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  01df3	2b c1		 sub	 eax, ecx
  01df5	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  01df9	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  01e00	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01e07	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01e0f	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  01e13	c1 f9 05	 sar	 ecx, 5
  01e16	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01e1e	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01e22	2b d1		 sub	 edx, ecx
  01e24	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01e2b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01e33	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01e37	33 c0		 xor	 eax, eax
  01e39	85 c0		 test	 eax, eax
  01e3b	75 9a		 jne	 SHORT $LN952@lzma_decod@2
  01e3d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  01e44	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  01e48	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  01e4f	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01e56	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01e5d	23 c1		 and	 eax, ecx
  01e5f	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
$LN953@lzma_decod@2:
  01e66	33 c0		 xor	 eax, eax
  01e68	85 c0		 test	 eax, eax
  01e6a	0f 85 3e fe ff
	ff		 jne	 $LN965@lzma_decod@2

; 459  : 				len <<= 1;

  01e70	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  01e77	03 c0		 add	 eax, eax
  01e79	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
$LN949@lzma_decod@2:

; 460  : 				d(SEQ_LITERAL_MATCHED6);

  01e80	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  01e87	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  01e8e	23 c1		 and	 eax, ecx
  01e90	89 84 24 d0 00
	00 00		 mov	 DWORD PTR match_bit$33343[rsp], eax
  01e97	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01e9e	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01ea5	03 c1		 add	 eax, ecx
  01ea7	03 84 24 98 00
	00 00		 add	 eax, DWORD PTR symbol$33175[rsp]
  01eae	89 84 24 cc 00
	00 00		 mov	 DWORD PTR subcoder_index$33344[rsp], eax
$LN948@lzma_decod@2:
$LN945@lzma_decod@2:
  01eb5	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  01ebd	73 5e		 jae	 SHORT $LN942@lzma_decod@2
  01ebf	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  01ec7	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  01ecc	75 14		 jne	 SHORT $LN941@lzma_decod@2
  01ece	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  01ed3	c7 80 a0 6e 00
	00 10 00 00 00	 mov	 DWORD PTR [rax+28320], 16
  01edd	e9 3e 61 00 00	 jmp	 $out$33200
$LN941@lzma_decod@2:
  01ee2	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  01ee6	c1 e0 08	 shl	 eax, 8
  01ee9	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01eed	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  01ef1	c1 e2 08	 shl	 edx, 8
  01ef4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  01ef9	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  01f01	48 03 c1	 add	 rax, rcx
  01f04	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  01f07	8b c2		 mov	 eax, edx
  01f09	0b c1		 or	 eax, ecx
  01f0b	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  01f0f	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  01f14	48 83 c0 01	 add	 rax, 1
  01f18	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN942@lzma_decod@2:
  01f1d	33 c0		 xor	 eax, eax
  01f1f	85 c0		 test	 eax, eax
  01f21	75 92		 jne	 SHORT $LN945@lzma_decod@2
  01f23	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  01f27	c1 ea 0b	 shr	 edx, 11
  01f2a	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01f31	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01f39	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  01f3d	8b c2		 mov	 eax, edx
  01f3f	0f af c1	 imul	 eax, ecx
  01f42	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  01f49	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  01f50	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  01f54	0f 83 84 00 00
	00		 jae	 $LN940@lzma_decod@2
$LN939@lzma_decod@2:
  01f5a	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  01f61	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01f65	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  01f6c	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01f73	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01f7b	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01f7f	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  01f84	2b c8		 sub	 ecx, eax
  01f86	c1 e9 05	 shr	 ecx, 5
  01f89	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01f91	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  01f95	03 d1		 add	 edx, ecx
  01f97	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  01f9e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  01fa6	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  01faa	33 c0		 xor	 eax, eax
  01fac	85 c0		 test	 eax, eax
  01fae	75 aa		 jne	 SHORT $LN939@lzma_decod@2
  01fb0	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  01fb7	03 c0		 add	 eax, eax
  01fb9	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  01fc0	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  01fc7	f7 d1		 not	 ecx
  01fc9	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  01fd0	23 c1		 and	 eax, ecx
  01fd2	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
  01fd9	e9 8f 00 00 00	 jmp	 $LN936@lzma_decod@2
$LN940@lzma_decod@2:
$LN935@lzma_decod@2:
  01fde	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  01fe5	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  01fe9	2b c1		 sub	 eax, ecx
  01feb	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  01fef	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  01ff6	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  01ffa	2b c1		 sub	 eax, ecx
  01ffc	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02000	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  02007	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  0200e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  02016	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  0201a	c1 f9 05	 sar	 ecx, 5
  0201d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  02025	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  02029	2b d1		 sub	 edx, ecx
  0202b	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  02032	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0203a	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  0203e	33 c0		 xor	 eax, eax
  02040	85 c0		 test	 eax, eax
  02042	75 9a		 jne	 SHORT $LN935@lzma_decod@2
  02044	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0204b	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0204f	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  02056	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  0205d	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  02064	23 c1		 and	 eax, ecx
  02066	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
$LN936@lzma_decod@2:
  0206d	33 c0		 xor	 eax, eax
  0206f	85 c0		 test	 eax, eax
  02071	0f 85 3e fe ff
	ff		 jne	 $LN948@lzma_decod@2

; 461  : 				len <<= 1;

  02077	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  0207e	03 c0		 add	 eax, eax
  02080	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
$LN932@lzma_decod@2:

; 462  : 				d(SEQ_LITERAL_MATCHED7);

  02087	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  0208e	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  02095	23 c1		 and	 eax, ecx
  02097	89 84 24 d0 00
	00 00		 mov	 DWORD PTR match_bit$33343[rsp], eax
  0209e	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  020a5	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  020ac	03 c1		 add	 eax, ecx
  020ae	03 84 24 98 00
	00 00		 add	 eax, DWORD PTR symbol$33175[rsp]
  020b5	89 84 24 cc 00
	00 00		 mov	 DWORD PTR subcoder_index$33344[rsp], eax
$LN931@lzma_decod@2:
$LN928@lzma_decod@2:
  020bc	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  020c4	73 5e		 jae	 SHORT $LN925@lzma_decod@2
  020c6	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  020ce	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  020d3	75 14		 jne	 SHORT $LN924@lzma_decod@2
  020d5	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  020da	c7 80 a0 6e 00
	00 11 00 00 00	 mov	 DWORD PTR [rax+28320], 17
  020e4	e9 37 5f 00 00	 jmp	 $out$33200
$LN924@lzma_decod@2:
  020e9	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  020ed	c1 e0 08	 shl	 eax, 8
  020f0	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  020f4	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  020f8	c1 e2 08	 shl	 edx, 8
  020fb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  02100	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  02108	48 03 c1	 add	 rax, rcx
  0210b	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0210e	8b c2		 mov	 eax, edx
  02110	0b c1		 or	 eax, ecx
  02112	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02116	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  0211b	48 83 c0 01	 add	 rax, 1
  0211f	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN925@lzma_decod@2:
  02124	33 c0		 xor	 eax, eax
  02126	85 c0		 test	 eax, eax
  02128	75 92		 jne	 SHORT $LN928@lzma_decod@2
  0212a	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  0212e	c1 ea 0b	 shr	 edx, 11
  02131	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  02138	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  02140	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  02144	8b c2		 mov	 eax, edx
  02146	0f af c1	 imul	 eax, ecx
  02149	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  02150	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02157	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  0215b	0f 83 84 00 00
	00		 jae	 $LN923@lzma_decod@2
$LN922@lzma_decod@2:
  02161	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02168	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0216c	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  02173	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  0217a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  02182	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  02186	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0218b	2b c8		 sub	 ecx, eax
  0218d	c1 e9 05	 shr	 ecx, 5
  02190	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  02198	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  0219c	03 d1		 add	 edx, ecx
  0219e	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  021a5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  021ad	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  021b1	33 c0		 xor	 eax, eax
  021b3	85 c0		 test	 eax, eax
  021b5	75 aa		 jne	 SHORT $LN922@lzma_decod@2
  021b7	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  021be	03 c0		 add	 eax, eax
  021c0	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  021c7	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  021ce	f7 d1		 not	 ecx
  021d0	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  021d7	23 c1		 and	 eax, ecx
  021d9	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
  021e0	e9 8f 00 00 00	 jmp	 $LN919@lzma_decod@2
$LN923@lzma_decod@2:
$LN918@lzma_decod@2:
  021e5	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  021ec	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  021f0	2b c1		 sub	 eax, ecx
  021f2	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  021f6	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  021fd	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  02201	2b c1		 sub	 eax, ecx
  02203	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02207	8b 94 24 cc 00
	00 00		 mov	 edx, DWORD PTR subcoder_index$33344[rsp]
  0220e	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  02215	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0221d	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  02221	c1 f9 05	 sar	 ecx, 5
  02224	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0222c	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  02230	2b d1		 sub	 edx, ecx
  02232	8b 8c 24 cc 00
	00 00		 mov	 ecx, DWORD PTR subcoder_index$33344[rsp]
  02239	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  02241	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  02245	33 c0		 xor	 eax, eax
  02247	85 c0		 test	 eax, eax
  02249	75 9a		 jne	 SHORT $LN918@lzma_decod@2
  0224b	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02252	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  02256	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  0225d	8b 8c 24 d0 00
	00 00		 mov	 ecx, DWORD PTR match_bit$33343[rsp]
  02264	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  0226b	23 c1		 and	 eax, ecx
  0226d	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax
$LN919@lzma_decod@2:
  02274	33 c0		 xor	 eax, eax
  02276	85 c0		 test	 eax, eax
  02278	0f 85 3e fe ff
	ff		 jne	 $LN931@lzma_decod@2
$LN1052@lzma_decod@2:

; 463  : #	undef d
; 464  :               }
; 465  : #endif
; 466  : 			}
; 467  : 
; 468  : 			//update_literal(state);
; 469  : 			// Use a lookup table to update to literal state,
; 470  : 			// since compared to other state updates, this would
; 471  : 			// need two branches.
; 472  : 		  {
; 473  : 			static const lzma_lzma_state next_state[] = {
; 474  : 				STATE_LIT_LIT,
; 475  : 				STATE_LIT_LIT,
; 476  : 				STATE_LIT_LIT,
; 477  : 				STATE_LIT_LIT,
; 478  : 				STATE_MATCH_LIT_LIT,
; 479  : 				STATE_REP_LIT_LIT,
; 480  : 				STATE_SHORTREP_LIT_LIT,
; 481  : 				STATE_MATCH_LIT,
; 482  : 				STATE_REP_LIT,
; 483  : 				STATE_SHORTREP_LIT,
; 484  : 				STATE_MATCH_LIT,
; 485  : 				STATE_REP_LIT
; 486  : 			};
; 487  : 			state = next_state[state];

  0227e	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  02285	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?next_state@?JB@??lzma_decode@@9@9
  0228c	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0228f	89 84 24 94 00
	00 00		 mov	 DWORD PTR state$33168[rsp], eax
$LN915@lzma_decod@2:

; 488  : 		  }
; 489  : 
; 490  : 	case SEQ_LITERAL_WRITE:
; 491  : 			if (unlikely(dict_put(&dict, symbol))) {

  02296	0f b6 94 24 98
	00 00 00	 movzx	 edx, BYTE PTR symbol$33175[rsp]
  0229e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR dict$33163[rsp]
  022a3	e8 00 00 00 00	 call	 dict_put
  022a8	0f b6 c0	 movzx	 eax, al
  022ab	85 c0		 test	 eax, eax
  022ad	74 14		 je	 SHORT $LN914@lzma_decod@2

; 492  : 				coder->sequence = SEQ_LITERAL_WRITE;

  022af	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  022b4	c7 80 a0 6e 00
	00 12 00 00 00	 mov	 DWORD PTR [rax+28320], 18

; 493  : 				goto out;

  022be	e9 5d 5d 00 00	 jmp	 $out$33200
$LN914@lzma_decod@2:

; 494  : 			}
; 495  : 
; 496  : 			continue;

  022c3	e9 8f e0 ff ff	 jmp	 $LN1202@lzma_decod@2
$LN1193@lzma_decod@2:
$LN913@lzma_decod@2:

; 497  : 		}
; 498  : 
; 499  : 		// Instead of a new byte we are going to get a byte range
; 500  : 		// (distance and length) which will be repeated from our
; 501  : 		// output history.
; 502  : 
; 503  : 		rc_update_1(coder->is_match[state][pos_state]);

  022c8	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  022cf	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  022d3	2b c1		 sub	 eax, ecx
  022d5	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  022d9	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  022e0	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  022e4	2b c1		 sub	 eax, ecx
  022e6	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  022ea	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  022f1	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  022f5	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  022fa	48 8d bc 08 00
	60 00 00	 lea	 rdi, QWORD PTR [rax+rcx+24576]
  02302	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR pos_state$33181[rsp]
  02309	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  02310	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  02314	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02319	48 8d 8c 08 00
	60 00 00	 lea	 rcx, QWORD PTR [rax+rcx+24576]
  02321	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR pos_state$33181[rsp]
  02328	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0232c	c1 f8 05	 sar	 eax, 5
  0232f	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  02333	2b f8		 sub	 edi, eax
  02335	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR pos_state$33181[rsp]
  0233c	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  02343	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  02347	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0234c	48 8d 84 08 00
	60 00 00	 lea	 rax, QWORD PTR [rax+rcx+24576]
  02354	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  02358	33 c0		 xor	 eax, eax
  0235a	85 c0		 test	 eax, eax
  0235c	0f 85 66 ff ff
	ff		 jne	 $LN913@lzma_decod@2
$LN910@lzma_decod@2:
$LN909@lzma_decod@2:

; 504  : 
; 505  : 	case SEQ_IS_REP:
; 506  : 		rc_if_0(coder->is_rep[state], SEQ_IS_REP) {

  02362	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0236a	73 5e		 jae	 SHORT $LN906@lzma_decod@2
  0236c	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  02374	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  02379	75 14		 jne	 SHORT $LN905@lzma_decod@2
  0237b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02380	c7 80 a0 6e 00
	00 13 00 00 00	 mov	 DWORD PTR [rax+28320], 19
  0238a	e9 91 5c 00 00	 jmp	 $out$33200
$LN905@lzma_decod@2:
  0238f	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  02393	c1 e0 08	 shl	 eax, 8
  02396	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0239a	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  0239e	c1 e2 08	 shl	 edx, 8
  023a1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  023a6	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  023ae	48 03 c1	 add	 rax, rcx
  023b1	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  023b4	8b c2		 mov	 eax, edx
  023b6	0b c1		 or	 eax, ecx
  023b8	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  023bc	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  023c1	48 83 c0 01	 add	 rax, 1
  023c5	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN906@lzma_decod@2:
  023ca	33 c0		 xor	 eax, eax
  023cc	85 c0		 test	 eax, eax
  023ce	75 92		 jne	 SHORT $LN909@lzma_decod@2
  023d0	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  023d4	c1 ea 0b	 shr	 edx, 11
  023d7	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  023de	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  023e3	0f b7 8c 48 80
	61 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+24960]
  023eb	8b c2		 mov	 eax, edx
  023ed	0f af c1	 imul	 eax, ecx
  023f0	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  023f7	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  023fe	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  02402	0f 83 c5 37 00
	00		 jae	 $LN904@lzma_decod@2
$LN903@lzma_decod@2:

; 507  : 			// Not a repeated match
; 508  : 			rc_update_0(coder->is_rep[state]);

  02408	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0240f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02413	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR state$33168[rsp]
  0241a	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  02421	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02426	0f b7 84 48 80
	61 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+24960]
  0242e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  02433	2b c8		 sub	 ecx, eax
  02435	c1 e9 05	 shr	 ecx, 5
  02438	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0243d	0f b7 94 50 80
	61 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+24960]
  02445	03 d1		 add	 edx, ecx
  02447	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  0244e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02453	66 89 94 48 80
	61 00 00	 mov	 WORD PTR [rax+rcx*2+24960], dx
  0245b	33 c0		 xor	 eax, eax
  0245d	85 c0		 test	 eax, eax
  0245f	75 a7		 jne	 SHORT $LN903@lzma_decod@2

; 509  : 			update_match(state);

  02461	83 bc 24 94 00
	00 00 07	 cmp	 DWORD PTR state$33168[rsp], 7
  02469	73 0d		 jae	 SHORT $LN1211@lzma_decod@2
  0246b	c7 84 24 60 01
	00 00 07 00 00
	00		 mov	 DWORD PTR tv1237[rsp], 7
  02476	eb 0b		 jmp	 SHORT $LN1212@lzma_decod@2
$LN1211@lzma_decod@2:
  02478	c7 84 24 60 01
	00 00 0a 00 00
	00		 mov	 DWORD PTR tv1237[rsp], 10
$LN1212@lzma_decod@2:
  02483	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR tv1237[rsp]
  0248a	89 84 24 94 00
	00 00		 mov	 DWORD PTR state$33168[rsp], eax

; 510  : 
; 511  : 			// The latest three match distances are kept in
; 512  : 			// memory in case there are repeated matches.
; 513  : 			rep3 = rep2;

  02491	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR rep2$33171[rsp]
  02498	89 84 24 80 00
	00 00		 mov	 DWORD PTR rep3$33172[rsp], eax

; 514  : 			rep2 = rep1;

  0249f	8b 44 24 2c	 mov	 eax, DWORD PTR rep1$33170[rsp]
  024a3	89 84 24 90 00
	00 00		 mov	 DWORD PTR rep2$33171[rsp], eax

; 515  : 			rep1 = rep0;

  024aa	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  024ae	89 44 24 2c	 mov	 DWORD PTR rep1$33170[rsp], eax
$LN900@lzma_decod@2:

; 516  : 
; 517  : 			// Decode the length of the match.
; 518  : 			len_decode(len, coder->match_len_decoder,
; 519  : 					pos_state, SEQ_MATCH_LEN);

  024b2	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR symbol$33175[rsp], 1
$LN897@lzma_decod@2:
$LN896@lzma_decod@2:
  024bd	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  024c5	73 5e		 jae	 SHORT $LN893@lzma_decod@2
  024c7	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  024cf	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  024d4	75 14		 jne	 SHORT $LN892@lzma_decod@2
  024d6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  024db	c7 80 a0 6e 00
	00 14 00 00 00	 mov	 DWORD PTR [rax+28320], 20
  024e5	e9 36 5b 00 00	 jmp	 $out$33200
$LN892@lzma_decod@2:
  024ea	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  024ee	c1 e0 08	 shl	 eax, 8
  024f1	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  024f5	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  024f9	c1 e2 08	 shl	 edx, 8
  024fc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  02501	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  02509	48 03 c1	 add	 rax, rcx
  0250c	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0250f	8b c2		 mov	 eax, edx
  02511	0b c1		 or	 eax, ecx
  02513	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02517	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  0251c	48 83 c0 01	 add	 rax, 1
  02520	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN893@lzma_decod@2:
  02525	33 c0		 xor	 eax, eax
  02527	85 c0		 test	 eax, eax
  02529	75 92		 jne	 SHORT $LN896@lzma_decod@2
  0252b	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  0252f	c1 ea 0b	 shr	 edx, 11
  02532	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02537	0f b7 88 64 66
	00 00		 movzx	 ecx, WORD PTR [rax+26212]
  0253e	8b c2		 mov	 eax, edx
  02540	0f af c1	 imul	 eax, ecx
  02543	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0254a	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02551	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  02555	0f 83 75 06 00
	00		 jae	 $LN891@lzma_decod@2
$LN890@lzma_decod@2:
  0255b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02562	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02566	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0256b	0f b7 80 64 66
	00 00		 movzx	 eax, WORD PTR [rax+26212]
  02572	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  02577	2b d0		 sub	 edx, eax
  02579	c1 ea 05	 shr	 edx, 5
  0257c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02581	0f b7 88 64 66
	00 00		 movzx	 ecx, WORD PTR [rax+26212]
  02588	03 ca		 add	 ecx, edx
  0258a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0258f	66 89 88 64 66
	00 00		 mov	 WORD PTR [rax+26212], cx
  02596	33 c0		 xor	 eax, eax
  02598	85 c0		 test	 eax, eax
  0259a	75 bf		 jne	 SHORT $LN890@lzma_decod@2
$LN887@lzma_decod@2:
$LN886@lzma_decod@2:
$LN883@lzma_decod@2:
  0259c	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  025a4	73 5e		 jae	 SHORT $LN880@lzma_decod@2
  025a6	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  025ae	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  025b3	75 14		 jne	 SHORT $LN879@lzma_decod@2
  025b5	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  025ba	c7 80 a0 6e 00
	00 15 00 00 00	 mov	 DWORD PTR [rax+28320], 21
  025c4	e9 57 5a 00 00	 jmp	 $out$33200
$LN879@lzma_decod@2:
  025c9	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  025cd	c1 e0 08	 shl	 eax, 8
  025d0	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  025d4	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  025d8	c1 e2 08	 shl	 edx, 8
  025db	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  025e0	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  025e8	48 03 c1	 add	 rax, rcx
  025eb	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  025ee	8b c2		 mov	 eax, edx
  025f0	0b c1		 or	 eax, ecx
  025f2	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  025f6	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  025fb	48 83 c0 01	 add	 rax, 1
  025ff	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN880@lzma_decod@2:
  02604	33 c0		 xor	 eax, eax
  02606	85 c0		 test	 eax, eax
  02608	75 92		 jne	 SHORT $LN883@lzma_decod@2
  0260a	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  0260e	c1 ea 0b	 shr	 edx, 11
  02611	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02618	48 6b c9 10	 imul	 rcx, 16
  0261c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02621	48 8d 8c 08 68
	66 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26216]
  02629	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02630	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  02634	8b c2		 mov	 eax, edx
  02636	0f af c1	 imul	 eax, ecx
  02639	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  02640	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02647	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  0264b	0f 83 9f 00 00
	00		 jae	 $LN878@lzma_decod@2
$LN877@lzma_decod@2:
  02651	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02658	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0265c	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02663	48 6b c9 10	 imul	 rcx, 16
  02667	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0266c	48 8d bc 08 68
	66 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26216]
  02674	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0267b	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02682	48 6b c9 10	 imul	 rcx, 16
  02686	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0268b	48 8d 8c 08 68
	66 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26216]
  02693	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0269a	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  0269e	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  026a3	2b c1		 sub	 eax, ecx
  026a5	c1 e8 05	 shr	 eax, 5
  026a8	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  026ac	03 f8		 add	 edi, eax
  026ae	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  026b5	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  026bc	48 6b c9 10	 imul	 rcx, 16
  026c0	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  026c5	48 8d 84 08 68
	66 00 00	 lea	 rax, QWORD PTR [rax+rcx+26216]
  026cd	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  026d1	33 c0		 xor	 eax, eax
  026d3	85 c0		 test	 eax, eax
  026d5	0f 85 76 ff ff
	ff		 jne	 $LN877@lzma_decod@2
  026db	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  026e2	03 c0		 add	 eax, eax
  026e4	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  026eb	e9 ac 00 00 00	 jmp	 $LN874@lzma_decod@2
$LN878@lzma_decod@2:
$LN873@lzma_decod@2:
  026f0	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  026f7	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  026fb	2b c1		 sub	 eax, ecx
  026fd	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02701	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  02708	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  0270c	2b c1		 sub	 eax, ecx
  0270e	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02712	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02719	48 6b c9 10	 imul	 rcx, 16
  0271d	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02722	48 8d bc 08 68
	66 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26216]
  0272a	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02731	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02738	48 6b c9 10	 imul	 rcx, 16
  0273c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02741	48 8d 8c 08 68
	66 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26216]
  02749	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02750	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  02754	c1 f8 05	 sar	 eax, 5
  02757	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  0275b	2b f8		 sub	 edi, eax
  0275d	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02764	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  0276b	48 6b c9 10	 imul	 rcx, 16
  0276f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02774	48 8d 84 08 68
	66 00 00	 lea	 rax, QWORD PTR [rax+rcx+26216]
  0277c	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  02780	33 c0		 xor	 eax, eax
  02782	85 c0		 test	 eax, eax
  02784	0f 85 66 ff ff
	ff		 jne	 $LN873@lzma_decod@2
  0278a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02791	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  02795	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN874@lzma_decod@2:
  0279c	33 c0		 xor	 eax, eax
  0279e	85 c0		 test	 eax, eax
  027a0	0f 85 f6 fd ff
	ff		 jne	 $LN886@lzma_decod@2
$LN870@lzma_decod@2:
$LN869@lzma_decod@2:
$LN866@lzma_decod@2:
  027a6	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  027ae	73 5e		 jae	 SHORT $LN863@lzma_decod@2
  027b0	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  027b8	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  027bd	75 14		 jne	 SHORT $LN862@lzma_decod@2
  027bf	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  027c4	c7 80 a0 6e 00
	00 16 00 00 00	 mov	 DWORD PTR [rax+28320], 22
  027ce	e9 4d 58 00 00	 jmp	 $out$33200
$LN862@lzma_decod@2:
  027d3	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  027d7	c1 e0 08	 shl	 eax, 8
  027da	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  027de	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  027e2	c1 e2 08	 shl	 edx, 8
  027e5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  027ea	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  027f2	48 03 c1	 add	 rax, rcx
  027f5	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  027f8	8b c2		 mov	 eax, edx
  027fa	0b c1		 or	 eax, ecx
  027fc	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02800	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  02805	48 83 c0 01	 add	 rax, 1
  02809	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN863@lzma_decod@2:
  0280e	33 c0		 xor	 eax, eax
  02810	85 c0		 test	 eax, eax
  02812	75 92		 jne	 SHORT $LN866@lzma_decod@2
  02814	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  02818	c1 ea 0b	 shr	 edx, 11
  0281b	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02822	48 6b c9 10	 imul	 rcx, 16
  02826	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0282b	48 8d 8c 08 68
	66 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26216]
  02833	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0283a	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  0283e	8b c2		 mov	 eax, edx
  02840	0f af c1	 imul	 eax, ecx
  02843	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0284a	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02851	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  02855	0f 83 9f 00 00
	00		 jae	 $LN861@lzma_decod@2
$LN860@lzma_decod@2:
  0285b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02862	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02866	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  0286d	48 6b c9 10	 imul	 rcx, 16
  02871	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02876	48 8d bc 08 68
	66 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26216]
  0287e	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02885	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  0288c	48 6b c9 10	 imul	 rcx, 16
  02890	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02895	48 8d 8c 08 68
	66 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26216]
  0289d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  028a4	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  028a8	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  028ad	2b c1		 sub	 eax, ecx
  028af	c1 e8 05	 shr	 eax, 5
  028b2	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  028b6	03 f8		 add	 edi, eax
  028b8	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  028bf	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  028c6	48 6b c9 10	 imul	 rcx, 16
  028ca	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  028cf	48 8d 84 08 68
	66 00 00	 lea	 rax, QWORD PTR [rax+rcx+26216]
  028d7	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  028db	33 c0		 xor	 eax, eax
  028dd	85 c0		 test	 eax, eax
  028df	0f 85 76 ff ff
	ff		 jne	 $LN860@lzma_decod@2
  028e5	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  028ec	03 c0		 add	 eax, eax
  028ee	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  028f5	e9 ac 00 00 00	 jmp	 $LN857@lzma_decod@2
$LN861@lzma_decod@2:
$LN856@lzma_decod@2:
  028fa	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  02901	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  02905	2b c1		 sub	 eax, ecx
  02907	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0290b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  02912	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  02916	2b c1		 sub	 eax, ecx
  02918	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0291c	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02923	48 6b c9 10	 imul	 rcx, 16
  02927	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0292c	48 8d bc 08 68
	66 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26216]
  02934	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0293b	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02942	48 6b c9 10	 imul	 rcx, 16
  02946	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0294b	48 8d 8c 08 68
	66 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26216]
  02953	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0295a	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0295e	c1 f8 05	 sar	 eax, 5
  02961	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  02965	2b f8		 sub	 edi, eax
  02967	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0296e	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02975	48 6b c9 10	 imul	 rcx, 16
  02979	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0297e	48 8d 84 08 68
	66 00 00	 lea	 rax, QWORD PTR [rax+rcx+26216]
  02986	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  0298a	33 c0		 xor	 eax, eax
  0298c	85 c0		 test	 eax, eax
  0298e	0f 85 66 ff ff
	ff		 jne	 $LN856@lzma_decod@2
  02994	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0299b	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0299f	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN857@lzma_decod@2:
  029a6	33 c0		 xor	 eax, eax
  029a8	85 c0		 test	 eax, eax
  029aa	0f 85 f6 fd ff
	ff		 jne	 $LN869@lzma_decod@2
$LN853@lzma_decod@2:
$LN852@lzma_decod@2:
$LN849@lzma_decod@2:
  029b0	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  029b8	73 5e		 jae	 SHORT $LN846@lzma_decod@2
  029ba	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  029c2	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  029c7	75 14		 jne	 SHORT $LN845@lzma_decod@2
  029c9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  029ce	c7 80 a0 6e 00
	00 17 00 00 00	 mov	 DWORD PTR [rax+28320], 23
  029d8	e9 43 56 00 00	 jmp	 $out$33200
$LN845@lzma_decod@2:
  029dd	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  029e1	c1 e0 08	 shl	 eax, 8
  029e4	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  029e8	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  029ec	c1 e2 08	 shl	 edx, 8
  029ef	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  029f4	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  029fc	48 03 c1	 add	 rax, rcx
  029ff	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  02a02	8b c2		 mov	 eax, edx
  02a04	0b c1		 or	 eax, ecx
  02a06	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02a0a	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  02a0f	48 83 c0 01	 add	 rax, 1
  02a13	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN846@lzma_decod@2:
  02a18	33 c0		 xor	 eax, eax
  02a1a	85 c0		 test	 eax, eax
  02a1c	75 92		 jne	 SHORT $LN849@lzma_decod@2
  02a1e	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  02a22	c1 ea 0b	 shr	 edx, 11
  02a25	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02a2c	48 6b c9 10	 imul	 rcx, 16
  02a30	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02a35	48 8d 8c 08 68
	66 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26216]
  02a3d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02a44	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  02a48	8b c2		 mov	 eax, edx
  02a4a	0f af c1	 imul	 eax, ecx
  02a4d	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  02a54	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02a5b	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  02a5f	0f 83 9f 00 00
	00		 jae	 $LN844@lzma_decod@2
$LN843@lzma_decod@2:
  02a65	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02a6c	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02a70	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02a77	48 6b c9 10	 imul	 rcx, 16
  02a7b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02a80	48 8d bc 08 68
	66 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26216]
  02a88	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02a8f	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02a96	48 6b c9 10	 imul	 rcx, 16
  02a9a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02a9f	48 8d 8c 08 68
	66 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26216]
  02aa7	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02aae	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  02ab2	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  02ab7	2b c1		 sub	 eax, ecx
  02ab9	c1 e8 05	 shr	 eax, 5
  02abc	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  02ac0	03 f8		 add	 edi, eax
  02ac2	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02ac9	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02ad0	48 6b c9 10	 imul	 rcx, 16
  02ad4	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02ad9	48 8d 84 08 68
	66 00 00	 lea	 rax, QWORD PTR [rax+rcx+26216]
  02ae1	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  02ae5	33 c0		 xor	 eax, eax
  02ae7	85 c0		 test	 eax, eax
  02ae9	0f 85 76 ff ff
	ff		 jne	 $LN843@lzma_decod@2
  02aef	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02af6	03 c0		 add	 eax, eax
  02af8	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  02aff	e9 ac 00 00 00	 jmp	 $LN840@lzma_decod@2
$LN844@lzma_decod@2:
$LN839@lzma_decod@2:
  02b04	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  02b0b	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  02b0f	2b c1		 sub	 eax, ecx
  02b11	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02b15	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  02b1c	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  02b20	2b c1		 sub	 eax, ecx
  02b22	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02b26	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02b2d	48 6b c9 10	 imul	 rcx, 16
  02b31	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02b36	48 8d bc 08 68
	66 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26216]
  02b3e	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02b45	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02b4c	48 6b c9 10	 imul	 rcx, 16
  02b50	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02b55	48 8d 8c 08 68
	66 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26216]
  02b5d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02b64	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  02b68	c1 f8 05	 sar	 eax, 5
  02b6b	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  02b6f	2b f8		 sub	 edi, eax
  02b71	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02b78	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02b7f	48 6b c9 10	 imul	 rcx, 16
  02b83	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02b88	48 8d 84 08 68
	66 00 00	 lea	 rax, QWORD PTR [rax+rcx+26216]
  02b90	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  02b94	33 c0		 xor	 eax, eax
  02b96	85 c0		 test	 eax, eax
  02b98	0f 85 66 ff ff
	ff		 jne	 $LN839@lzma_decod@2
  02b9e	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02ba5	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  02ba9	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN840@lzma_decod@2:
  02bb0	33 c0		 xor	 eax, eax
  02bb2	85 c0		 test	 eax, eax
  02bb4	0f 85 f6 fd ff
	ff		 jne	 $LN852@lzma_decod@2
  02bba	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02bc1	83 e8 06	 sub	 eax, 6
  02bc4	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
  02bcb	e9 58 14 00 00	 jmp	 $LN836@lzma_decod@2
$LN891@lzma_decod@2:
$LN835@lzma_decod@2:
  02bd0	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  02bd7	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  02bdb	2b c1		 sub	 eax, ecx
  02bdd	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02be1	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  02be8	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  02bec	2b c1		 sub	 eax, ecx
  02bee	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02bf2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02bf7	0f b7 90 64 66
	00 00		 movzx	 edx, WORD PTR [rax+26212]
  02bfe	c1 fa 05	 sar	 edx, 5
  02c01	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02c06	0f b7 88 64 66
	00 00		 movzx	 ecx, WORD PTR [rax+26212]
  02c0d	2b ca		 sub	 ecx, edx
  02c0f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02c14	66 89 88 64 66
	00 00		 mov	 WORD PTR [rax+26212], cx
  02c1b	33 c0		 xor	 eax, eax
  02c1d	85 c0		 test	 eax, eax
  02c1f	75 af		 jne	 SHORT $LN835@lzma_decod@2
$LN832@lzma_decod@2:
$LN831@lzma_decod@2:
  02c21	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  02c29	73 5e		 jae	 SHORT $LN828@lzma_decod@2
  02c2b	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  02c33	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  02c38	75 14		 jne	 SHORT $LN827@lzma_decod@2
  02c3a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02c3f	c7 80 a0 6e 00
	00 18 00 00 00	 mov	 DWORD PTR [rax+28320], 24
  02c49	e9 d2 53 00 00	 jmp	 $out$33200
$LN827@lzma_decod@2:
  02c4e	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  02c52	c1 e0 08	 shl	 eax, 8
  02c55	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02c59	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  02c5d	c1 e2 08	 shl	 edx, 8
  02c60	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  02c65	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  02c6d	48 03 c1	 add	 rax, rcx
  02c70	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  02c73	8b c2		 mov	 eax, edx
  02c75	0b c1		 or	 eax, ecx
  02c77	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02c7b	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  02c80	48 83 c0 01	 add	 rax, 1
  02c84	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN828@lzma_decod@2:
  02c89	33 c0		 xor	 eax, eax
  02c8b	85 c0		 test	 eax, eax
  02c8d	75 92		 jne	 SHORT $LN831@lzma_decod@2
  02c8f	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  02c93	c1 ea 0b	 shr	 edx, 11
  02c96	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02c9b	0f b7 88 66 66
	00 00		 movzx	 ecx, WORD PTR [rax+26214]
  02ca2	8b c2		 mov	 eax, edx
  02ca4	0f af c1	 imul	 eax, ecx
  02ca7	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  02cae	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02cb5	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  02cb9	0f 83 75 06 00
	00		 jae	 $LN826@lzma_decod@2
$LN825@lzma_decod@2:
  02cbf	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02cc6	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02cca	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02ccf	0f b7 80 66 66
	00 00		 movzx	 eax, WORD PTR [rax+26214]
  02cd6	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  02cdb	2b d0		 sub	 edx, eax
  02cdd	c1 ea 05	 shr	 edx, 5
  02ce0	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02ce5	0f b7 88 66 66
	00 00		 movzx	 ecx, WORD PTR [rax+26214]
  02cec	03 ca		 add	 ecx, edx
  02cee	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02cf3	66 89 88 66 66
	00 00		 mov	 WORD PTR [rax+26214], cx
  02cfa	33 c0		 xor	 eax, eax
  02cfc	85 c0		 test	 eax, eax
  02cfe	75 bf		 jne	 SHORT $LN825@lzma_decod@2
$LN822@lzma_decod@2:
$LN821@lzma_decod@2:
$LN818@lzma_decod@2:
  02d00	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  02d08	73 5e		 jae	 SHORT $LN815@lzma_decod@2
  02d0a	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  02d12	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  02d17	75 14		 jne	 SHORT $LN814@lzma_decod@2
  02d19	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02d1e	c7 80 a0 6e 00
	00 19 00 00 00	 mov	 DWORD PTR [rax+28320], 25
  02d28	e9 f3 52 00 00	 jmp	 $out$33200
$LN814@lzma_decod@2:
  02d2d	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  02d31	c1 e0 08	 shl	 eax, 8
  02d34	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02d38	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  02d3c	c1 e2 08	 shl	 edx, 8
  02d3f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  02d44	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  02d4c	48 03 c1	 add	 rax, rcx
  02d4f	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  02d52	8b c2		 mov	 eax, edx
  02d54	0b c1		 or	 eax, ecx
  02d56	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02d5a	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  02d5f	48 83 c0 01	 add	 rax, 1
  02d63	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN815@lzma_decod@2:
  02d68	33 c0		 xor	 eax, eax
  02d6a	85 c0		 test	 eax, eax
  02d6c	75 92		 jne	 SHORT $LN818@lzma_decod@2
  02d6e	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  02d72	c1 ea 0b	 shr	 edx, 11
  02d75	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02d7c	48 6b c9 10	 imul	 rcx, 16
  02d80	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02d85	48 8d 8c 08 68
	67 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26472]
  02d8d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02d94	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  02d98	8b c2		 mov	 eax, edx
  02d9a	0f af c1	 imul	 eax, ecx
  02d9d	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  02da4	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02dab	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  02daf	0f 83 9f 00 00
	00		 jae	 $LN813@lzma_decod@2
$LN812@lzma_decod@2:
  02db5	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02dbc	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02dc0	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02dc7	48 6b c9 10	 imul	 rcx, 16
  02dcb	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02dd0	48 8d bc 08 68
	67 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26472]
  02dd8	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02ddf	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02de6	48 6b c9 10	 imul	 rcx, 16
  02dea	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02def	48 8d 8c 08 68
	67 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26472]
  02df7	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02dfe	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  02e02	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  02e07	2b c1		 sub	 eax, ecx
  02e09	c1 e8 05	 shr	 eax, 5
  02e0c	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  02e10	03 f8		 add	 edi, eax
  02e12	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02e19	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02e20	48 6b c9 10	 imul	 rcx, 16
  02e24	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02e29	48 8d 84 08 68
	67 00 00	 lea	 rax, QWORD PTR [rax+rcx+26472]
  02e31	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  02e35	33 c0		 xor	 eax, eax
  02e37	85 c0		 test	 eax, eax
  02e39	0f 85 76 ff ff
	ff		 jne	 $LN812@lzma_decod@2
  02e3f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02e46	03 c0		 add	 eax, eax
  02e48	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  02e4f	e9 ac 00 00 00	 jmp	 $LN809@lzma_decod@2
$LN813@lzma_decod@2:
$LN808@lzma_decod@2:
  02e54	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  02e5b	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  02e5f	2b c1		 sub	 eax, ecx
  02e61	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02e65	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  02e6c	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  02e70	2b c1		 sub	 eax, ecx
  02e72	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02e76	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02e7d	48 6b c9 10	 imul	 rcx, 16
  02e81	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02e86	48 8d bc 08 68
	67 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26472]
  02e8e	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02e95	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02e9c	48 6b c9 10	 imul	 rcx, 16
  02ea0	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02ea5	48 8d 8c 08 68
	67 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26472]
  02ead	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02eb4	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  02eb8	c1 f8 05	 sar	 eax, 5
  02ebb	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  02ebf	2b f8		 sub	 edi, eax
  02ec1	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02ec8	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02ecf	48 6b c9 10	 imul	 rcx, 16
  02ed3	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02ed8	48 8d 84 08 68
	67 00 00	 lea	 rax, QWORD PTR [rax+rcx+26472]
  02ee0	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  02ee4	33 c0		 xor	 eax, eax
  02ee6	85 c0		 test	 eax, eax
  02ee8	0f 85 66 ff ff
	ff		 jne	 $LN808@lzma_decod@2
  02eee	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02ef5	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  02ef9	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN809@lzma_decod@2:
  02f00	33 c0		 xor	 eax, eax
  02f02	85 c0		 test	 eax, eax
  02f04	0f 85 f6 fd ff
	ff		 jne	 $LN821@lzma_decod@2
$LN805@lzma_decod@2:
$LN804@lzma_decod@2:
$LN801@lzma_decod@2:
  02f0a	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  02f12	73 5e		 jae	 SHORT $LN798@lzma_decod@2
  02f14	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  02f1c	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  02f21	75 14		 jne	 SHORT $LN797@lzma_decod@2
  02f23	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02f28	c7 80 a0 6e 00
	00 1a 00 00 00	 mov	 DWORD PTR [rax+28320], 26
  02f32	e9 e9 50 00 00	 jmp	 $out$33200
$LN797@lzma_decod@2:
  02f37	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  02f3b	c1 e0 08	 shl	 eax, 8
  02f3e	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02f42	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  02f46	c1 e2 08	 shl	 edx, 8
  02f49	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  02f4e	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  02f56	48 03 c1	 add	 rax, rcx
  02f59	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  02f5c	8b c2		 mov	 eax, edx
  02f5e	0b c1		 or	 eax, ecx
  02f60	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  02f64	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  02f69	48 83 c0 01	 add	 rax, 1
  02f6d	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN798@lzma_decod@2:
  02f72	33 c0		 xor	 eax, eax
  02f74	85 c0		 test	 eax, eax
  02f76	75 92		 jne	 SHORT $LN801@lzma_decod@2
  02f78	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  02f7c	c1 ea 0b	 shr	 edx, 11
  02f7f	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02f86	48 6b c9 10	 imul	 rcx, 16
  02f8a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02f8f	48 8d 8c 08 68
	67 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26472]
  02f97	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  02f9e	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  02fa2	8b c2		 mov	 eax, edx
  02fa4	0f af c1	 imul	 eax, ecx
  02fa7	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  02fae	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02fb5	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  02fb9	0f 83 9f 00 00
	00		 jae	 $LN796@lzma_decod@2
$LN795@lzma_decod@2:
  02fbf	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  02fc6	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  02fca	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02fd1	48 6b c9 10	 imul	 rcx, 16
  02fd5	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02fda	48 8d bc 08 68
	67 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26472]
  02fe2	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  02fe9	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  02ff0	48 6b c9 10	 imul	 rcx, 16
  02ff4	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  02ff9	48 8d 8c 08 68
	67 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26472]
  03001	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03008	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  0300c	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  03011	2b c1		 sub	 eax, ecx
  03013	c1 e8 05	 shr	 eax, 5
  03016	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  0301a	03 f8		 add	 edi, eax
  0301c	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  03023	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  0302a	48 6b c9 10	 imul	 rcx, 16
  0302e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03033	48 8d 84 08 68
	67 00 00	 lea	 rax, QWORD PTR [rax+rcx+26472]
  0303b	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  0303f	33 c0		 xor	 eax, eax
  03041	85 c0		 test	 eax, eax
  03043	0f 85 76 ff ff
	ff		 jne	 $LN795@lzma_decod@2
  03049	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03050	03 c0		 add	 eax, eax
  03052	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  03059	e9 ac 00 00 00	 jmp	 $LN792@lzma_decod@2
$LN796@lzma_decod@2:
$LN791@lzma_decod@2:
  0305e	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03065	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03069	2b c1		 sub	 eax, ecx
  0306b	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0306f	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03076	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  0307a	2b c1		 sub	 eax, ecx
  0307c	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03080	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  03087	48 6b c9 10	 imul	 rcx, 16
  0308b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03090	48 8d bc 08 68
	67 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26472]
  03098	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0309f	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  030a6	48 6b c9 10	 imul	 rcx, 16
  030aa	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  030af	48 8d 8c 08 68
	67 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26472]
  030b7	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  030be	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  030c2	c1 f8 05	 sar	 eax, 5
  030c5	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  030c9	2b f8		 sub	 edi, eax
  030cb	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  030d2	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  030d9	48 6b c9 10	 imul	 rcx, 16
  030dd	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  030e2	48 8d 84 08 68
	67 00 00	 lea	 rax, QWORD PTR [rax+rcx+26472]
  030ea	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  030ee	33 c0		 xor	 eax, eax
  030f0	85 c0		 test	 eax, eax
  030f2	0f 85 66 ff ff
	ff		 jne	 $LN791@lzma_decod@2
  030f8	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  030ff	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  03103	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN792@lzma_decod@2:
  0310a	33 c0		 xor	 eax, eax
  0310c	85 c0		 test	 eax, eax
  0310e	0f 85 f6 fd ff
	ff		 jne	 $LN804@lzma_decod@2
$LN788@lzma_decod@2:
$LN787@lzma_decod@2:
$LN784@lzma_decod@2:
  03114	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0311c	73 5e		 jae	 SHORT $LN781@lzma_decod@2
  0311e	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  03126	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  0312b	75 14		 jne	 SHORT $LN780@lzma_decod@2
  0312d	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03132	c7 80 a0 6e 00
	00 1b 00 00 00	 mov	 DWORD PTR [rax+28320], 27
  0313c	e9 df 4e 00 00	 jmp	 $out$33200
$LN780@lzma_decod@2:
  03141	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03145	c1 e0 08	 shl	 eax, 8
  03148	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0314c	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  03150	c1 e2 08	 shl	 edx, 8
  03153	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  03158	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  03160	48 03 c1	 add	 rax, rcx
  03163	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  03166	8b c2		 mov	 eax, edx
  03168	0b c1		 or	 eax, ecx
  0316a	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0316e	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  03173	48 83 c0 01	 add	 rax, 1
  03177	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN781@lzma_decod@2:
  0317c	33 c0		 xor	 eax, eax
  0317e	85 c0		 test	 eax, eax
  03180	75 92		 jne	 SHORT $LN784@lzma_decod@2
  03182	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  03186	c1 ea 0b	 shr	 edx, 11
  03189	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  03190	48 6b c9 10	 imul	 rcx, 16
  03194	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03199	48 8d 8c 08 68
	67 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26472]
  031a1	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  031a8	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  031ac	8b c2		 mov	 eax, edx
  031ae	0f af c1	 imul	 eax, ecx
  031b1	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  031b8	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  031bf	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  031c3	0f 83 9f 00 00
	00		 jae	 $LN779@lzma_decod@2
$LN778@lzma_decod@2:
  031c9	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  031d0	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  031d4	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  031db	48 6b c9 10	 imul	 rcx, 16
  031df	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  031e4	48 8d bc 08 68
	67 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26472]
  031ec	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  031f3	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  031fa	48 6b c9 10	 imul	 rcx, 16
  031fe	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03203	48 8d 8c 08 68
	67 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26472]
  0320b	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03212	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  03216	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0321b	2b c1		 sub	 eax, ecx
  0321d	c1 e8 05	 shr	 eax, 5
  03220	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  03224	03 f8		 add	 edi, eax
  03226	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0322d	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  03234	48 6b c9 10	 imul	 rcx, 16
  03238	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0323d	48 8d 84 08 68
	67 00 00	 lea	 rax, QWORD PTR [rax+rcx+26472]
  03245	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  03249	33 c0		 xor	 eax, eax
  0324b	85 c0		 test	 eax, eax
  0324d	0f 85 76 ff ff
	ff		 jne	 $LN778@lzma_decod@2
  03253	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0325a	03 c0		 add	 eax, eax
  0325c	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  03263	e9 ac 00 00 00	 jmp	 $LN775@lzma_decod@2
$LN779@lzma_decod@2:
$LN774@lzma_decod@2:
  03268	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0326f	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03273	2b c1		 sub	 eax, ecx
  03275	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03279	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03280	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  03284	2b c1		 sub	 eax, ecx
  03286	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0328a	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  03291	48 6b c9 10	 imul	 rcx, 16
  03295	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0329a	48 8d bc 08 68
	67 00 00	 lea	 rdi, QWORD PTR [rax+rcx+26472]
  032a2	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  032a9	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  032b0	48 6b c9 10	 imul	 rcx, 16
  032b4	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  032b9	48 8d 8c 08 68
	67 00 00	 lea	 rcx, QWORD PTR [rax+rcx+26472]
  032c1	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  032c8	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  032cc	c1 f8 05	 sar	 eax, 5
  032cf	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  032d3	2b f8		 sub	 edi, eax
  032d5	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  032dc	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  032e3	48 6b c9 10	 imul	 rcx, 16
  032e7	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  032ec	48 8d 84 08 68
	67 00 00	 lea	 rax, QWORD PTR [rax+rcx+26472]
  032f4	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  032f8	33 c0		 xor	 eax, eax
  032fa	85 c0		 test	 eax, eax
  032fc	0f 85 66 ff ff
	ff		 jne	 $LN774@lzma_decod@2
  03302	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03309	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0330d	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN775@lzma_decod@2:
  03314	33 c0		 xor	 eax, eax
  03316	85 c0		 test	 eax, eax
  03318	0f 85 f6 fd ff
	ff		 jne	 $LN787@lzma_decod@2
  0331e	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03325	83 c0 02	 add	 eax, 2
  03328	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
  0332f	e9 f4 0c 00 00	 jmp	 $LN771@lzma_decod@2
$LN826@lzma_decod@2:
$LN770@lzma_decod@2:
  03334	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0333b	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0333f	2b c1		 sub	 eax, ecx
  03341	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03345	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0334c	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  03350	2b c1		 sub	 eax, ecx
  03352	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03356	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0335b	0f b7 90 66 66
	00 00		 movzx	 edx, WORD PTR [rax+26214]
  03362	c1 fa 05	 sar	 edx, 5
  03365	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0336a	0f b7 88 66 66
	00 00		 movzx	 ecx, WORD PTR [rax+26214]
  03371	2b ca		 sub	 ecx, edx
  03373	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03378	66 89 88 66 66
	00 00		 mov	 WORD PTR [rax+26214], cx
  0337f	33 c0		 xor	 eax, eax
  03381	85 c0		 test	 eax, eax
  03383	75 af		 jne	 SHORT $LN770@lzma_decod@2
$LN767@lzma_decod@2:
$LN766@lzma_decod@2:
$LN763@lzma_decod@2:
  03385	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0338d	73 5e		 jae	 SHORT $LN760@lzma_decod@2
  0338f	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  03397	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  0339c	75 14		 jne	 SHORT $LN759@lzma_decod@2
  0339e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  033a3	c7 80 a0 6e 00
	00 1c 00 00 00	 mov	 DWORD PTR [rax+28320], 28
  033ad	e9 6e 4c 00 00	 jmp	 $out$33200
$LN759@lzma_decod@2:
  033b2	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  033b6	c1 e0 08	 shl	 eax, 8
  033b9	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  033bd	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  033c1	c1 e2 08	 shl	 edx, 8
  033c4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  033c9	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  033d1	48 03 c1	 add	 rax, rcx
  033d4	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  033d7	8b c2		 mov	 eax, edx
  033d9	0b c1		 or	 eax, ecx
  033db	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  033df	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  033e4	48 83 c0 01	 add	 rax, 1
  033e8	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN760@lzma_decod@2:
  033ed	33 c0		 xor	 eax, eax
  033ef	85 c0		 test	 eax, eax
  033f1	75 92		 jne	 SHORT $LN763@lzma_decod@2
  033f3	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  033f7	c1 ea 0b	 shr	 edx, 11
  033fa	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03401	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03406	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  0340e	8b c2		 mov	 eax, edx
  03410	0f af c1	 imul	 eax, ecx
  03413	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0341a	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  03421	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  03425	73 6b		 jae	 SHORT $LN758@lzma_decod@2
$LN757@lzma_decod@2:
  03427	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0342e	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03432	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  03439	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03440	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03445	0f b7 84 48 68
	68 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26728]
  0344d	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  03452	2b c8		 sub	 ecx, eax
  03454	c1 e9 05	 shr	 ecx, 5
  03457	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0345c	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03464	03 d1		 add	 edx, ecx
  03466	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0346d	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03472	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  0347a	33 c0		 xor	 eax, eax
  0347c	85 c0		 test	 eax, eax
  0347e	75 a7		 jne	 SHORT $LN757@lzma_decod@2
  03480	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03487	03 c0		 add	 eax, eax
  03489	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  03490	eb 7b		 jmp	 SHORT $LN754@lzma_decod@2
$LN758@lzma_decod@2:
$LN753@lzma_decod@2:
  03492	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03499	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0349d	2b c1		 sub	 eax, ecx
  0349f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  034a3	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  034aa	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  034ae	2b c1		 sub	 eax, ecx
  034b0	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  034b4	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  034bb	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  034c2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  034c7	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  034cf	c1 f9 05	 sar	 ecx, 5
  034d2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  034d7	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  034df	2b d1		 sub	 edx, ecx
  034e1	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  034e8	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  034ed	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  034f5	33 c0		 xor	 eax, eax
  034f7	85 c0		 test	 eax, eax
  034f9	75 97		 jne	 SHORT $LN753@lzma_decod@2
  034fb	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03502	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  03506	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN754@lzma_decod@2:
  0350d	33 c0		 xor	 eax, eax
  0350f	85 c0		 test	 eax, eax
  03511	0f 85 6e fe ff
	ff		 jne	 $LN766@lzma_decod@2
$LN750@lzma_decod@2:
$LN749@lzma_decod@2:
$LN746@lzma_decod@2:
  03517	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0351f	73 5e		 jae	 SHORT $LN743@lzma_decod@2
  03521	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  03529	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  0352e	75 14		 jne	 SHORT $LN742@lzma_decod@2
  03530	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03535	c7 80 a0 6e 00
	00 1d 00 00 00	 mov	 DWORD PTR [rax+28320], 29
  0353f	e9 dc 4a 00 00	 jmp	 $out$33200
$LN742@lzma_decod@2:
  03544	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03548	c1 e0 08	 shl	 eax, 8
  0354b	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0354f	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  03553	c1 e2 08	 shl	 edx, 8
  03556	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0355b	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  03563	48 03 c1	 add	 rax, rcx
  03566	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  03569	8b c2		 mov	 eax, edx
  0356b	0b c1		 or	 eax, ecx
  0356d	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03571	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  03576	48 83 c0 01	 add	 rax, 1
  0357a	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN743@lzma_decod@2:
  0357f	33 c0		 xor	 eax, eax
  03581	85 c0		 test	 eax, eax
  03583	75 92		 jne	 SHORT $LN746@lzma_decod@2
  03585	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  03589	c1 ea 0b	 shr	 edx, 11
  0358c	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03593	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03598	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  035a0	8b c2		 mov	 eax, edx
  035a2	0f af c1	 imul	 eax, ecx
  035a5	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  035ac	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  035b3	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  035b7	73 6b		 jae	 SHORT $LN741@lzma_decod@2
$LN740@lzma_decod@2:
  035b9	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  035c0	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  035c4	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  035cb	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  035d2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  035d7	0f b7 84 48 68
	68 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26728]
  035df	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  035e4	2b c8		 sub	 ecx, eax
  035e6	c1 e9 05	 shr	 ecx, 5
  035e9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  035ee	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  035f6	03 d1		 add	 edx, ecx
  035f8	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  035ff	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03604	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  0360c	33 c0		 xor	 eax, eax
  0360e	85 c0		 test	 eax, eax
  03610	75 a7		 jne	 SHORT $LN740@lzma_decod@2
  03612	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03619	03 c0		 add	 eax, eax
  0361b	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  03622	eb 7b		 jmp	 SHORT $LN737@lzma_decod@2
$LN741@lzma_decod@2:
$LN736@lzma_decod@2:
  03624	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0362b	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0362f	2b c1		 sub	 eax, ecx
  03631	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03635	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0363c	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  03640	2b c1		 sub	 eax, ecx
  03642	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03646	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0364d	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03654	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03659	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  03661	c1 f9 05	 sar	 ecx, 5
  03664	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03669	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03671	2b d1		 sub	 edx, ecx
  03673	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0367a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0367f	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  03687	33 c0		 xor	 eax, eax
  03689	85 c0		 test	 eax, eax
  0368b	75 97		 jne	 SHORT $LN736@lzma_decod@2
  0368d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03694	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  03698	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN737@lzma_decod@2:
  0369f	33 c0		 xor	 eax, eax
  036a1	85 c0		 test	 eax, eax
  036a3	0f 85 6e fe ff
	ff		 jne	 $LN749@lzma_decod@2
$LN733@lzma_decod@2:
$LN732@lzma_decod@2:
$LN729@lzma_decod@2:
  036a9	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  036b1	73 5e		 jae	 SHORT $LN726@lzma_decod@2
  036b3	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  036bb	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  036c0	75 14		 jne	 SHORT $LN725@lzma_decod@2
  036c2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  036c7	c7 80 a0 6e 00
	00 1e 00 00 00	 mov	 DWORD PTR [rax+28320], 30
  036d1	e9 4a 49 00 00	 jmp	 $out$33200
$LN725@lzma_decod@2:
  036d6	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  036da	c1 e0 08	 shl	 eax, 8
  036dd	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  036e1	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  036e5	c1 e2 08	 shl	 edx, 8
  036e8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  036ed	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  036f5	48 03 c1	 add	 rax, rcx
  036f8	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  036fb	8b c2		 mov	 eax, edx
  036fd	0b c1		 or	 eax, ecx
  036ff	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03703	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  03708	48 83 c0 01	 add	 rax, 1
  0370c	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN726@lzma_decod@2:
  03711	33 c0		 xor	 eax, eax
  03713	85 c0		 test	 eax, eax
  03715	75 92		 jne	 SHORT $LN729@lzma_decod@2
  03717	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  0371b	c1 ea 0b	 shr	 edx, 11
  0371e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03725	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0372a	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  03732	8b c2		 mov	 eax, edx
  03734	0f af c1	 imul	 eax, ecx
  03737	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0373e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  03745	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  03749	73 6b		 jae	 SHORT $LN724@lzma_decod@2
$LN723@lzma_decod@2:
  0374b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  03752	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03756	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0375d	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03764	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03769	0f b7 84 48 68
	68 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26728]
  03771	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  03776	2b c8		 sub	 ecx, eax
  03778	c1 e9 05	 shr	 ecx, 5
  0377b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03780	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03788	03 d1		 add	 edx, ecx
  0378a	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03791	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03796	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  0379e	33 c0		 xor	 eax, eax
  037a0	85 c0		 test	 eax, eax
  037a2	75 a7		 jne	 SHORT $LN723@lzma_decod@2
  037a4	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  037ab	03 c0		 add	 eax, eax
  037ad	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  037b4	eb 7b		 jmp	 SHORT $LN720@lzma_decod@2
$LN724@lzma_decod@2:
$LN719@lzma_decod@2:
  037b6	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  037bd	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  037c1	2b c1		 sub	 eax, ecx
  037c3	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  037c7	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  037ce	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  037d2	2b c1		 sub	 eax, ecx
  037d4	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  037d8	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  037df	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  037e6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  037eb	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  037f3	c1 f9 05	 sar	 ecx, 5
  037f6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  037fb	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03803	2b d1		 sub	 edx, ecx
  03805	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0380c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03811	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  03819	33 c0		 xor	 eax, eax
  0381b	85 c0		 test	 eax, eax
  0381d	75 97		 jne	 SHORT $LN719@lzma_decod@2
  0381f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03826	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0382a	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN720@lzma_decod@2:
  03831	33 c0		 xor	 eax, eax
  03833	85 c0		 test	 eax, eax
  03835	0f 85 6e fe ff
	ff		 jne	 $LN732@lzma_decod@2
$LN716@lzma_decod@2:
$LN715@lzma_decod@2:
$LN712@lzma_decod@2:
  0383b	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  03843	73 5e		 jae	 SHORT $LN709@lzma_decod@2
  03845	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0384d	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  03852	75 14		 jne	 SHORT $LN708@lzma_decod@2
  03854	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03859	c7 80 a0 6e 00
	00 1f 00 00 00	 mov	 DWORD PTR [rax+28320], 31
  03863	e9 b8 47 00 00	 jmp	 $out$33200
$LN708@lzma_decod@2:
  03868	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0386c	c1 e0 08	 shl	 eax, 8
  0386f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03873	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  03877	c1 e2 08	 shl	 edx, 8
  0387a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0387f	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  03887	48 03 c1	 add	 rax, rcx
  0388a	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0388d	8b c2		 mov	 eax, edx
  0388f	0b c1		 or	 eax, ecx
  03891	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03895	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  0389a	48 83 c0 01	 add	 rax, 1
  0389e	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN709@lzma_decod@2:
  038a3	33 c0		 xor	 eax, eax
  038a5	85 c0		 test	 eax, eax
  038a7	75 92		 jne	 SHORT $LN712@lzma_decod@2
  038a9	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  038ad	c1 ea 0b	 shr	 edx, 11
  038b0	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  038b7	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  038bc	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  038c4	8b c2		 mov	 eax, edx
  038c6	0f af c1	 imul	 eax, ecx
  038c9	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  038d0	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  038d7	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  038db	73 6b		 jae	 SHORT $LN707@lzma_decod@2
$LN706@lzma_decod@2:
  038dd	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  038e4	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  038e8	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  038ef	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  038f6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  038fb	0f b7 84 48 68
	68 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26728]
  03903	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  03908	2b c8		 sub	 ecx, eax
  0390a	c1 e9 05	 shr	 ecx, 5
  0390d	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03912	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  0391a	03 d1		 add	 edx, ecx
  0391c	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03923	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03928	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  03930	33 c0		 xor	 eax, eax
  03932	85 c0		 test	 eax, eax
  03934	75 a7		 jne	 SHORT $LN706@lzma_decod@2
  03936	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0393d	03 c0		 add	 eax, eax
  0393f	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  03946	eb 7b		 jmp	 SHORT $LN703@lzma_decod@2
$LN707@lzma_decod@2:
$LN702@lzma_decod@2:
  03948	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0394f	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03953	2b c1		 sub	 eax, ecx
  03955	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03959	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03960	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  03964	2b c1		 sub	 eax, ecx
  03966	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0396a	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  03971	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03978	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0397d	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  03985	c1 f9 05	 sar	 ecx, 5
  03988	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0398d	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03995	2b d1		 sub	 edx, ecx
  03997	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0399e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  039a3	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  039ab	33 c0		 xor	 eax, eax
  039ad	85 c0		 test	 eax, eax
  039af	75 97		 jne	 SHORT $LN702@lzma_decod@2
  039b1	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  039b8	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  039bc	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN703@lzma_decod@2:
  039c3	33 c0		 xor	 eax, eax
  039c5	85 c0		 test	 eax, eax
  039c7	0f 85 6e fe ff
	ff		 jne	 $LN715@lzma_decod@2
$LN699@lzma_decod@2:
$LN698@lzma_decod@2:
$LN695@lzma_decod@2:
  039cd	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  039d5	73 5e		 jae	 SHORT $LN692@lzma_decod@2
  039d7	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  039df	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  039e4	75 14		 jne	 SHORT $LN691@lzma_decod@2
  039e6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  039eb	c7 80 a0 6e 00
	00 20 00 00 00	 mov	 DWORD PTR [rax+28320], 32 ; 00000020H
  039f5	e9 26 46 00 00	 jmp	 $out$33200
$LN691@lzma_decod@2:
  039fa	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  039fe	c1 e0 08	 shl	 eax, 8
  03a01	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03a05	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  03a09	c1 e2 08	 shl	 edx, 8
  03a0c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  03a11	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  03a19	48 03 c1	 add	 rax, rcx
  03a1c	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  03a1f	8b c2		 mov	 eax, edx
  03a21	0b c1		 or	 eax, ecx
  03a23	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03a27	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  03a2c	48 83 c0 01	 add	 rax, 1
  03a30	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN692@lzma_decod@2:
  03a35	33 c0		 xor	 eax, eax
  03a37	85 c0		 test	 eax, eax
  03a39	75 92		 jne	 SHORT $LN695@lzma_decod@2
  03a3b	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  03a3f	c1 ea 0b	 shr	 edx, 11
  03a42	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03a49	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03a4e	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  03a56	8b c2		 mov	 eax, edx
  03a58	0f af c1	 imul	 eax, ecx
  03a5b	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  03a62	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  03a69	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  03a6d	73 6b		 jae	 SHORT $LN690@lzma_decod@2
$LN689@lzma_decod@2:
  03a6f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  03a76	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03a7a	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  03a81	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03a88	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03a8d	0f b7 84 48 68
	68 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26728]
  03a95	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  03a9a	2b c8		 sub	 ecx, eax
  03a9c	c1 e9 05	 shr	 ecx, 5
  03a9f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03aa4	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03aac	03 d1		 add	 edx, ecx
  03aae	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03ab5	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03aba	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  03ac2	33 c0		 xor	 eax, eax
  03ac4	85 c0		 test	 eax, eax
  03ac6	75 a7		 jne	 SHORT $LN689@lzma_decod@2
  03ac8	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03acf	03 c0		 add	 eax, eax
  03ad1	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  03ad8	eb 7b		 jmp	 SHORT $LN686@lzma_decod@2
$LN690@lzma_decod@2:
$LN685@lzma_decod@2:
  03ada	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03ae1	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03ae5	2b c1		 sub	 eax, ecx
  03ae7	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03aeb	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03af2	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  03af6	2b c1		 sub	 eax, ecx
  03af8	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03afc	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  03b03	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03b0a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03b0f	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  03b17	c1 f9 05	 sar	 ecx, 5
  03b1a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03b1f	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03b27	2b d1		 sub	 edx, ecx
  03b29	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03b30	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03b35	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  03b3d	33 c0		 xor	 eax, eax
  03b3f	85 c0		 test	 eax, eax
  03b41	75 97		 jne	 SHORT $LN685@lzma_decod@2
  03b43	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03b4a	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  03b4e	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN686@lzma_decod@2:
  03b55	33 c0		 xor	 eax, eax
  03b57	85 c0		 test	 eax, eax
  03b59	0f 85 6e fe ff
	ff		 jne	 $LN698@lzma_decod@2
$LN682@lzma_decod@2:
$LN681@lzma_decod@2:
$LN678@lzma_decod@2:
  03b5f	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  03b67	73 5e		 jae	 SHORT $LN675@lzma_decod@2
  03b69	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  03b71	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  03b76	75 14		 jne	 SHORT $LN674@lzma_decod@2
  03b78	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03b7d	c7 80 a0 6e 00
	00 21 00 00 00	 mov	 DWORD PTR [rax+28320], 33 ; 00000021H
  03b87	e9 94 44 00 00	 jmp	 $out$33200
$LN674@lzma_decod@2:
  03b8c	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03b90	c1 e0 08	 shl	 eax, 8
  03b93	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03b97	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  03b9b	c1 e2 08	 shl	 edx, 8
  03b9e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  03ba3	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  03bab	48 03 c1	 add	 rax, rcx
  03bae	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  03bb1	8b c2		 mov	 eax, edx
  03bb3	0b c1		 or	 eax, ecx
  03bb5	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03bb9	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  03bbe	48 83 c0 01	 add	 rax, 1
  03bc2	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN675@lzma_decod@2:
  03bc7	33 c0		 xor	 eax, eax
  03bc9	85 c0		 test	 eax, eax
  03bcb	75 92		 jne	 SHORT $LN678@lzma_decod@2
  03bcd	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  03bd1	c1 ea 0b	 shr	 edx, 11
  03bd4	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03bdb	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03be0	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  03be8	8b c2		 mov	 eax, edx
  03bea	0f af c1	 imul	 eax, ecx
  03bed	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  03bf4	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  03bfb	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  03bff	73 6b		 jae	 SHORT $LN673@lzma_decod@2
$LN672@lzma_decod@2:
  03c01	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  03c08	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03c0c	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  03c13	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03c1a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03c1f	0f b7 84 48 68
	68 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26728]
  03c27	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  03c2c	2b c8		 sub	 ecx, eax
  03c2e	c1 e9 05	 shr	 ecx, 5
  03c31	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03c36	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03c3e	03 d1		 add	 edx, ecx
  03c40	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03c47	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03c4c	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  03c54	33 c0		 xor	 eax, eax
  03c56	85 c0		 test	 eax, eax
  03c58	75 a7		 jne	 SHORT $LN672@lzma_decod@2
  03c5a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03c61	03 c0		 add	 eax, eax
  03c63	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  03c6a	eb 7b		 jmp	 SHORT $LN669@lzma_decod@2
$LN673@lzma_decod@2:
$LN668@lzma_decod@2:
  03c6c	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03c73	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03c77	2b c1		 sub	 eax, ecx
  03c79	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03c7d	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03c84	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  03c88	2b c1		 sub	 eax, ecx
  03c8a	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03c8e	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  03c95	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03c9c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03ca1	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  03ca9	c1 f9 05	 sar	 ecx, 5
  03cac	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03cb1	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03cb9	2b d1		 sub	 edx, ecx
  03cbb	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03cc2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03cc7	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  03ccf	33 c0		 xor	 eax, eax
  03cd1	85 c0		 test	 eax, eax
  03cd3	75 97		 jne	 SHORT $LN668@lzma_decod@2
  03cd5	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03cdc	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  03ce0	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN669@lzma_decod@2:
  03ce7	33 c0		 xor	 eax, eax
  03ce9	85 c0		 test	 eax, eax
  03ceb	0f 85 6e fe ff
	ff		 jne	 $LN681@lzma_decod@2
$LN665@lzma_decod@2:
$LN664@lzma_decod@2:
$LN661@lzma_decod@2:
  03cf1	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  03cf9	73 5e		 jae	 SHORT $LN658@lzma_decod@2
  03cfb	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  03d03	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  03d08	75 14		 jne	 SHORT $LN657@lzma_decod@2
  03d0a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03d0f	c7 80 a0 6e 00
	00 22 00 00 00	 mov	 DWORD PTR [rax+28320], 34 ; 00000022H
  03d19	e9 02 43 00 00	 jmp	 $out$33200
$LN657@lzma_decod@2:
  03d1e	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03d22	c1 e0 08	 shl	 eax, 8
  03d25	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03d29	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  03d2d	c1 e2 08	 shl	 edx, 8
  03d30	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  03d35	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  03d3d	48 03 c1	 add	 rax, rcx
  03d40	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  03d43	8b c2		 mov	 eax, edx
  03d45	0b c1		 or	 eax, ecx
  03d47	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03d4b	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  03d50	48 83 c0 01	 add	 rax, 1
  03d54	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN658@lzma_decod@2:
  03d59	33 c0		 xor	 eax, eax
  03d5b	85 c0		 test	 eax, eax
  03d5d	75 92		 jne	 SHORT $LN661@lzma_decod@2
  03d5f	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  03d63	c1 ea 0b	 shr	 edx, 11
  03d66	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03d6d	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03d72	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  03d7a	8b c2		 mov	 eax, edx
  03d7c	0f af c1	 imul	 eax, ecx
  03d7f	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  03d86	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  03d8d	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  03d91	73 6b		 jae	 SHORT $LN656@lzma_decod@2
$LN655@lzma_decod@2:
  03d93	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  03d9a	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03d9e	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  03da5	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03dac	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03db1	0f b7 84 48 68
	68 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26728]
  03db9	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  03dbe	2b c8		 sub	 ecx, eax
  03dc0	c1 e9 05	 shr	 ecx, 5
  03dc3	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03dc8	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03dd0	03 d1		 add	 edx, ecx
  03dd2	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03dd9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03dde	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  03de6	33 c0		 xor	 eax, eax
  03de8	85 c0		 test	 eax, eax
  03dea	75 a7		 jne	 SHORT $LN655@lzma_decod@2
  03dec	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03df3	03 c0		 add	 eax, eax
  03df5	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  03dfc	eb 7b		 jmp	 SHORT $LN652@lzma_decod@2
$LN656@lzma_decod@2:
$LN651@lzma_decod@2:
  03dfe	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03e05	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03e09	2b c1		 sub	 eax, ecx
  03e0b	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03e0f	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03e16	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  03e1a	2b c1		 sub	 eax, ecx
  03e1c	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03e20	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  03e27	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03e2e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03e33	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  03e3b	c1 f9 05	 sar	 ecx, 5
  03e3e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03e43	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03e4b	2b d1		 sub	 edx, ecx
  03e4d	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03e54	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03e59	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  03e61	33 c0		 xor	 eax, eax
  03e63	85 c0		 test	 eax, eax
  03e65	75 97		 jne	 SHORT $LN651@lzma_decod@2
  03e67	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03e6e	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  03e72	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN652@lzma_decod@2:
  03e79	33 c0		 xor	 eax, eax
  03e7b	85 c0		 test	 eax, eax
  03e7d	0f 85 6e fe ff
	ff		 jne	 $LN664@lzma_decod@2
$LN648@lzma_decod@2:
$LN647@lzma_decod@2:
$LN644@lzma_decod@2:
  03e83	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  03e8b	73 5e		 jae	 SHORT $LN641@lzma_decod@2
  03e8d	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  03e95	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  03e9a	75 14		 jne	 SHORT $LN640@lzma_decod@2
  03e9c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03ea1	c7 80 a0 6e 00
	00 23 00 00 00	 mov	 DWORD PTR [rax+28320], 35 ; 00000023H
  03eab	e9 70 41 00 00	 jmp	 $out$33200
$LN640@lzma_decod@2:
  03eb0	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03eb4	c1 e0 08	 shl	 eax, 8
  03eb7	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03ebb	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  03ebf	c1 e2 08	 shl	 edx, 8
  03ec2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  03ec7	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  03ecf	48 03 c1	 add	 rax, rcx
  03ed2	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  03ed5	8b c2		 mov	 eax, edx
  03ed7	0b c1		 or	 eax, ecx
  03ed9	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03edd	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  03ee2	48 83 c0 01	 add	 rax, 1
  03ee6	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN641@lzma_decod@2:
  03eeb	33 c0		 xor	 eax, eax
  03eed	85 c0		 test	 eax, eax
  03eef	75 92		 jne	 SHORT $LN644@lzma_decod@2
  03ef1	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  03ef5	c1 ea 0b	 shr	 edx, 11
  03ef8	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03eff	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03f04	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  03f0c	8b c2		 mov	 eax, edx
  03f0e	0f af c1	 imul	 eax, ecx
  03f11	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  03f18	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  03f1f	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  03f23	73 6b		 jae	 SHORT $LN639@lzma_decod@2
$LN638@lzma_decod@2:
  03f25	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  03f2c	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03f30	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  03f37	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03f3e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03f43	0f b7 84 48 68
	68 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26728]
  03f4b	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  03f50	2b c8		 sub	 ecx, eax
  03f52	c1 e9 05	 shr	 ecx, 5
  03f55	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03f5a	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03f62	03 d1		 add	 edx, ecx
  03f64	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03f6b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03f70	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  03f78	33 c0		 xor	 eax, eax
  03f7a	85 c0		 test	 eax, eax
  03f7c	75 a7		 jne	 SHORT $LN638@lzma_decod@2
  03f7e	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  03f85	03 c0		 add	 eax, eax
  03f87	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  03f8e	eb 7b		 jmp	 SHORT $LN635@lzma_decod@2
$LN639@lzma_decod@2:
$LN634@lzma_decod@2:
  03f90	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03f97	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  03f9b	2b c1		 sub	 eax, ecx
  03f9d	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  03fa1	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  03fa8	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  03fac	2b c1		 sub	 eax, ecx
  03fae	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  03fb2	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  03fb9	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03fc0	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03fc5	0f b7 8c 48 68
	68 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26728]
  03fcd	c1 f9 05	 sar	 ecx, 5
  03fd0	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03fd5	0f b7 94 50 68
	68 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26728]
  03fdd	2b d1		 sub	 edx, ecx
  03fdf	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  03fe6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  03feb	66 89 94 48 68
	68 00 00	 mov	 WORD PTR [rax+rcx*2+26728], dx
  03ff3	33 c0		 xor	 eax, eax
  03ff5	85 c0		 test	 eax, eax
  03ff7	75 97		 jne	 SHORT $LN634@lzma_decod@2
  03ff9	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04000	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  04004	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN635@lzma_decod@2:
  0400b	33 c0		 xor	 eax, eax
  0400d	85 c0		 test	 eax, eax
  0400f	0f 85 6e fe ff
	ff		 jne	 $LN647@lzma_decod@2
  04015	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0401c	2d ee 00 00 00	 sub	 eax, 238		; 000000eeH
  04021	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
$LN771@lzma_decod@2:
$LN836@lzma_decod@2:
  04028	33 c0		 xor	 eax, eax
  0402a	85 c0		 test	 eax, eax
  0402c	0f 85 80 e4 ff
	ff		 jne	 $LN900@lzma_decod@2

; 520  : 
; 521  : 			// Prepare to decode the highest two bits of the
; 522  : 			// match distance.
; 523  : 			probs = coder->dist_slot[get_dist_state(len)];

  04032	83 bc 24 a8 00
	00 00 06	 cmp	 DWORD PTR len$33178[rsp], 6
  0403a	73 13		 jae	 SHORT $LN1213@lzma_decod@2
  0403c	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  04043	83 e8 02	 sub	 eax, 2
  04046	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv2303[rsp], eax
  0404d	eb 0b		 jmp	 SHORT $LN1214@lzma_decod@2
$LN1213@lzma_decod@2:
  0404f	c7 84 24 64 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv2303[rsp], 3
$LN1214@lzma_decod@2:
  0405a	8b 8c 24 64 01
	00 00		 mov	 ecx, DWORD PTR tv2303[rsp]
  04061	48 69 c9 80 00
	00 00		 imul	 rcx, 128		; 00000080H
  04068	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0406d	48 8d 84 08 60
	63 00 00	 lea	 rax, QWORD PTR [rax+rcx+25440]
  04075	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR probs$33174[rsp], rax

; 524  : 			symbol = 1;

  0407d	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR symbol$33175[rsp], 1
$LN631@lzma_decod@2:
$LN630@lzma_decod@2:
$LN627@lzma_decod@2:

; 525  : 
; 526  : #ifdef HAVE_SMALL
; 527  : 	case SEQ_DIST_SLOT:
; 528  : 			do {
; 529  : 				rc_bit(probs[symbol], , , SEQ_DIST_SLOT);
; 530  : 			} while (symbol < DIST_SLOTS);
; 531  : #else
; 532  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT0);

  04088	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  04090	73 5e		 jae	 SHORT $LN624@lzma_decod@2
  04092	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0409a	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  0409f	75 14		 jne	 SHORT $LN623@lzma_decod@2
  040a1	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  040a6	c7 80 a0 6e 00
	00 24 00 00 00	 mov	 DWORD PTR [rax+28320], 36 ; 00000024H
  040b0	e9 6b 3f 00 00	 jmp	 $out$33200
$LN623@lzma_decod@2:
  040b5	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  040b9	c1 e0 08	 shl	 eax, 8
  040bc	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  040c0	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  040c4	c1 e2 08	 shl	 edx, 8
  040c7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  040cc	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  040d4	48 03 c1	 add	 rax, rcx
  040d7	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  040da	8b c2		 mov	 eax, edx
  040dc	0b c1		 or	 eax, ecx
  040de	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  040e2	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  040e7	48 83 c0 01	 add	 rax, 1
  040eb	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN624@lzma_decod@2:
  040f0	33 c0		 xor	 eax, eax
  040f2	85 c0		 test	 eax, eax
  040f4	75 92		 jne	 SHORT $LN627@lzma_decod@2
  040f6	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  040fa	c1 ea 0b	 shr	 edx, 11
  040fd	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04104	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0410c	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  04110	8b c2		 mov	 eax, edx
  04112	0f af c1	 imul	 eax, ecx
  04115	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0411c	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  04123	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  04127	73 68		 jae	 SHORT $LN622@lzma_decod@2
$LN621@lzma_decod@2:
  04129	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  04130	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04134	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0413b	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04142	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0414a	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0414e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  04153	2b c8		 sub	 ecx, eax
  04155	c1 e9 05	 shr	 ecx, 5
  04158	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04160	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04164	03 d1		 add	 edx, ecx
  04166	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0416d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04175	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  04179	33 c0		 xor	 eax, eax
  0417b	85 c0		 test	 eax, eax
  0417d	75 aa		 jne	 SHORT $LN621@lzma_decod@2
  0417f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04186	03 c0		 add	 eax, eax
  04188	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  0418f	eb 78		 jmp	 SHORT $LN618@lzma_decod@2
$LN622@lzma_decod@2:
$LN617@lzma_decod@2:
  04191	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  04198	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0419c	2b c1		 sub	 eax, ecx
  0419e	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  041a2	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  041a9	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  041ad	2b c1		 sub	 eax, ecx
  041af	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  041b3	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  041ba	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  041c1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  041c9	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  041cd	c1 f9 05	 sar	 ecx, 5
  041d0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  041d8	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  041dc	2b d1		 sub	 edx, ecx
  041de	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  041e5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  041ed	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  041f1	33 c0		 xor	 eax, eax
  041f3	85 c0		 test	 eax, eax
  041f5	75 9a		 jne	 SHORT $LN617@lzma_decod@2
  041f7	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  041fe	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  04202	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN618@lzma_decod@2:
  04209	33 c0		 xor	 eax, eax
  0420b	85 c0		 test	 eax, eax
  0420d	0f 85 75 fe ff
	ff		 jne	 $LN630@lzma_decod@2
$LN614@lzma_decod@2:
$LN613@lzma_decod@2:
$LN610@lzma_decod@2:

; 533  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT1);

  04213	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0421b	73 5e		 jae	 SHORT $LN607@lzma_decod@2
  0421d	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  04225	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  0422a	75 14		 jne	 SHORT $LN606@lzma_decod@2
  0422c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  04231	c7 80 a0 6e 00
	00 25 00 00 00	 mov	 DWORD PTR [rax+28320], 37 ; 00000025H
  0423b	e9 e0 3d 00 00	 jmp	 $out$33200
$LN606@lzma_decod@2:
  04240	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  04244	c1 e0 08	 shl	 eax, 8
  04247	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0424b	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  0424f	c1 e2 08	 shl	 edx, 8
  04252	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  04257	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  0425f	48 03 c1	 add	 rax, rcx
  04262	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  04265	8b c2		 mov	 eax, edx
  04267	0b c1		 or	 eax, ecx
  04269	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0426d	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  04272	48 83 c0 01	 add	 rax, 1
  04276	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN607@lzma_decod@2:
  0427b	33 c0		 xor	 eax, eax
  0427d	85 c0		 test	 eax, eax
  0427f	75 92		 jne	 SHORT $LN610@lzma_decod@2
  04281	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  04285	c1 ea 0b	 shr	 edx, 11
  04288	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0428f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04297	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  0429b	8b c2		 mov	 eax, edx
  0429d	0f af c1	 imul	 eax, ecx
  042a0	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  042a7	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  042ae	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  042b2	73 68		 jae	 SHORT $LN605@lzma_decod@2
$LN604@lzma_decod@2:
  042b4	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  042bb	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  042bf	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  042c6	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  042cd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  042d5	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  042d9	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  042de	2b c8		 sub	 ecx, eax
  042e0	c1 e9 05	 shr	 ecx, 5
  042e3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  042eb	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  042ef	03 d1		 add	 edx, ecx
  042f1	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  042f8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04300	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  04304	33 c0		 xor	 eax, eax
  04306	85 c0		 test	 eax, eax
  04308	75 aa		 jne	 SHORT $LN604@lzma_decod@2
  0430a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04311	03 c0		 add	 eax, eax
  04313	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  0431a	eb 78		 jmp	 SHORT $LN601@lzma_decod@2
$LN605@lzma_decod@2:
$LN600@lzma_decod@2:
  0431c	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  04323	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  04327	2b c1		 sub	 eax, ecx
  04329	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0432d	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  04334	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  04338	2b c1		 sub	 eax, ecx
  0433a	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0433e	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  04345	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0434c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04354	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  04358	c1 f9 05	 sar	 ecx, 5
  0435b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04363	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04367	2b d1		 sub	 edx, ecx
  04369	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04370	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04378	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  0437c	33 c0		 xor	 eax, eax
  0437e	85 c0		 test	 eax, eax
  04380	75 9a		 jne	 SHORT $LN600@lzma_decod@2
  04382	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04389	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0438d	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN601@lzma_decod@2:
  04394	33 c0		 xor	 eax, eax
  04396	85 c0		 test	 eax, eax
  04398	0f 85 75 fe ff
	ff		 jne	 $LN613@lzma_decod@2
$LN597@lzma_decod@2:
$LN596@lzma_decod@2:
$LN593@lzma_decod@2:

; 534  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT2);

  0439e	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  043a6	73 5e		 jae	 SHORT $LN590@lzma_decod@2
  043a8	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  043b0	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  043b5	75 14		 jne	 SHORT $LN589@lzma_decod@2
  043b7	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  043bc	c7 80 a0 6e 00
	00 26 00 00 00	 mov	 DWORD PTR [rax+28320], 38 ; 00000026H
  043c6	e9 55 3c 00 00	 jmp	 $out$33200
$LN589@lzma_decod@2:
  043cb	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  043cf	c1 e0 08	 shl	 eax, 8
  043d2	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  043d6	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  043da	c1 e2 08	 shl	 edx, 8
  043dd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  043e2	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  043ea	48 03 c1	 add	 rax, rcx
  043ed	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  043f0	8b c2		 mov	 eax, edx
  043f2	0b c1		 or	 eax, ecx
  043f4	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  043f8	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  043fd	48 83 c0 01	 add	 rax, 1
  04401	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN590@lzma_decod@2:
  04406	33 c0		 xor	 eax, eax
  04408	85 c0		 test	 eax, eax
  0440a	75 92		 jne	 SHORT $LN593@lzma_decod@2
  0440c	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  04410	c1 ea 0b	 shr	 edx, 11
  04413	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0441a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04422	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  04426	8b c2		 mov	 eax, edx
  04428	0f af c1	 imul	 eax, ecx
  0442b	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  04432	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  04439	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  0443d	73 68		 jae	 SHORT $LN588@lzma_decod@2
$LN587@lzma_decod@2:
  0443f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  04446	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0444a	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  04451	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04458	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04460	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  04464	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  04469	2b c8		 sub	 ecx, eax
  0446b	c1 e9 05	 shr	 ecx, 5
  0446e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04476	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  0447a	03 d1		 add	 edx, ecx
  0447c	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04483	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0448b	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  0448f	33 c0		 xor	 eax, eax
  04491	85 c0		 test	 eax, eax
  04493	75 aa		 jne	 SHORT $LN587@lzma_decod@2
  04495	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0449c	03 c0		 add	 eax, eax
  0449e	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  044a5	eb 78		 jmp	 SHORT $LN584@lzma_decod@2
$LN588@lzma_decod@2:
$LN583@lzma_decod@2:
  044a7	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  044ae	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  044b2	2b c1		 sub	 eax, ecx
  044b4	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  044b8	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  044bf	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  044c3	2b c1		 sub	 eax, ecx
  044c5	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  044c9	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  044d0	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  044d7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  044df	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  044e3	c1 f9 05	 sar	 ecx, 5
  044e6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  044ee	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  044f2	2b d1		 sub	 edx, ecx
  044f4	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  044fb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04503	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  04507	33 c0		 xor	 eax, eax
  04509	85 c0		 test	 eax, eax
  0450b	75 9a		 jne	 SHORT $LN583@lzma_decod@2
  0450d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04514	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  04518	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN584@lzma_decod@2:
  0451f	33 c0		 xor	 eax, eax
  04521	85 c0		 test	 eax, eax
  04523	0f 85 75 fe ff
	ff		 jne	 $LN596@lzma_decod@2
$LN580@lzma_decod@2:
$LN579@lzma_decod@2:
$LN576@lzma_decod@2:

; 535  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT3);

  04529	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  04531	73 5e		 jae	 SHORT $LN573@lzma_decod@2
  04533	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0453b	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  04540	75 14		 jne	 SHORT $LN572@lzma_decod@2
  04542	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  04547	c7 80 a0 6e 00
	00 27 00 00 00	 mov	 DWORD PTR [rax+28320], 39 ; 00000027H
  04551	e9 ca 3a 00 00	 jmp	 $out$33200
$LN572@lzma_decod@2:
  04556	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0455a	c1 e0 08	 shl	 eax, 8
  0455d	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04561	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  04565	c1 e2 08	 shl	 edx, 8
  04568	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0456d	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  04575	48 03 c1	 add	 rax, rcx
  04578	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0457b	8b c2		 mov	 eax, edx
  0457d	0b c1		 or	 eax, ecx
  0457f	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  04583	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  04588	48 83 c0 01	 add	 rax, 1
  0458c	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN573@lzma_decod@2:
  04591	33 c0		 xor	 eax, eax
  04593	85 c0		 test	 eax, eax
  04595	75 92		 jne	 SHORT $LN576@lzma_decod@2
  04597	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  0459b	c1 ea 0b	 shr	 edx, 11
  0459e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  045a5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  045ad	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  045b1	8b c2		 mov	 eax, edx
  045b3	0f af c1	 imul	 eax, ecx
  045b6	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  045bd	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  045c4	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  045c8	73 68		 jae	 SHORT $LN571@lzma_decod@2
$LN570@lzma_decod@2:
  045ca	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  045d1	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  045d5	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  045dc	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  045e3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  045eb	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  045ef	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  045f4	2b c8		 sub	 ecx, eax
  045f6	c1 e9 05	 shr	 ecx, 5
  045f9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04601	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04605	03 d1		 add	 edx, ecx
  04607	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0460e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04616	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  0461a	33 c0		 xor	 eax, eax
  0461c	85 c0		 test	 eax, eax
  0461e	75 aa		 jne	 SHORT $LN570@lzma_decod@2
  04620	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04627	03 c0		 add	 eax, eax
  04629	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  04630	eb 78		 jmp	 SHORT $LN567@lzma_decod@2
$LN571@lzma_decod@2:
$LN566@lzma_decod@2:
  04632	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  04639	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0463d	2b c1		 sub	 eax, ecx
  0463f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04643	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0464a	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  0464e	2b c1		 sub	 eax, ecx
  04650	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  04654	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0465b	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04662	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0466a	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  0466e	c1 f9 05	 sar	 ecx, 5
  04671	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04679	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  0467d	2b d1		 sub	 edx, ecx
  0467f	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04686	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0468e	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  04692	33 c0		 xor	 eax, eax
  04694	85 c0		 test	 eax, eax
  04696	75 9a		 jne	 SHORT $LN566@lzma_decod@2
  04698	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0469f	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  046a3	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN567@lzma_decod@2:
  046aa	33 c0		 xor	 eax, eax
  046ac	85 c0		 test	 eax, eax
  046ae	0f 85 75 fe ff
	ff		 jne	 $LN579@lzma_decod@2
$LN563@lzma_decod@2:
$LN562@lzma_decod@2:
$LN559@lzma_decod@2:

; 536  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT4);

  046b4	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  046bc	73 5e		 jae	 SHORT $LN556@lzma_decod@2
  046be	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  046c6	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  046cb	75 14		 jne	 SHORT $LN555@lzma_decod@2
  046cd	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  046d2	c7 80 a0 6e 00
	00 28 00 00 00	 mov	 DWORD PTR [rax+28320], 40 ; 00000028H
  046dc	e9 3f 39 00 00	 jmp	 $out$33200
$LN555@lzma_decod@2:
  046e1	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  046e5	c1 e0 08	 shl	 eax, 8
  046e8	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  046ec	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  046f0	c1 e2 08	 shl	 edx, 8
  046f3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  046f8	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  04700	48 03 c1	 add	 rax, rcx
  04703	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  04706	8b c2		 mov	 eax, edx
  04708	0b c1		 or	 eax, ecx
  0470a	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0470e	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  04713	48 83 c0 01	 add	 rax, 1
  04717	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN556@lzma_decod@2:
  0471c	33 c0		 xor	 eax, eax
  0471e	85 c0		 test	 eax, eax
  04720	75 92		 jne	 SHORT $LN559@lzma_decod@2
  04722	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  04726	c1 ea 0b	 shr	 edx, 11
  04729	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04730	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04738	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  0473c	8b c2		 mov	 eax, edx
  0473e	0f af c1	 imul	 eax, ecx
  04741	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  04748	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0474f	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  04753	73 68		 jae	 SHORT $LN554@lzma_decod@2
$LN553@lzma_decod@2:
  04755	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0475c	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04760	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  04767	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0476e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04776	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0477a	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0477f	2b c8		 sub	 ecx, eax
  04781	c1 e9 05	 shr	 ecx, 5
  04784	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0478c	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04790	03 d1		 add	 edx, ecx
  04792	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04799	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  047a1	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  047a5	33 c0		 xor	 eax, eax
  047a7	85 c0		 test	 eax, eax
  047a9	75 aa		 jne	 SHORT $LN553@lzma_decod@2
  047ab	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  047b2	03 c0		 add	 eax, eax
  047b4	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  047bb	eb 78		 jmp	 SHORT $LN550@lzma_decod@2
$LN554@lzma_decod@2:
$LN549@lzma_decod@2:
  047bd	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  047c4	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  047c8	2b c1		 sub	 eax, ecx
  047ca	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  047ce	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  047d5	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  047d9	2b c1		 sub	 eax, ecx
  047db	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  047df	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  047e6	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  047ed	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  047f5	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  047f9	c1 f9 05	 sar	 ecx, 5
  047fc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04804	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04808	2b d1		 sub	 edx, ecx
  0480a	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04811	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04819	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  0481d	33 c0		 xor	 eax, eax
  0481f	85 c0		 test	 eax, eax
  04821	75 9a		 jne	 SHORT $LN549@lzma_decod@2
  04823	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0482a	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0482e	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN550@lzma_decod@2:
  04835	33 c0		 xor	 eax, eax
  04837	85 c0		 test	 eax, eax
  04839	0f 85 75 fe ff
	ff		 jne	 $LN562@lzma_decod@2
$LN546@lzma_decod@2:
$LN545@lzma_decod@2:
$LN542@lzma_decod@2:

; 537  : 			rc_bit_case(probs[symbol], , , SEQ_DIST_SLOT5);

  0483f	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  04847	73 5e		 jae	 SHORT $LN539@lzma_decod@2
  04849	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  04851	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  04856	75 14		 jne	 SHORT $LN538@lzma_decod@2
  04858	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0485d	c7 80 a0 6e 00
	00 29 00 00 00	 mov	 DWORD PTR [rax+28320], 41 ; 00000029H
  04867	e9 b4 37 00 00	 jmp	 $out$33200
$LN538@lzma_decod@2:
  0486c	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  04870	c1 e0 08	 shl	 eax, 8
  04873	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04877	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  0487b	c1 e2 08	 shl	 edx, 8
  0487e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  04883	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  0488b	48 03 c1	 add	 rax, rcx
  0488e	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  04891	8b c2		 mov	 eax, edx
  04893	0b c1		 or	 eax, ecx
  04895	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  04899	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  0489e	48 83 c0 01	 add	 rax, 1
  048a2	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN539@lzma_decod@2:
  048a7	33 c0		 xor	 eax, eax
  048a9	85 c0		 test	 eax, eax
  048ab	75 92		 jne	 SHORT $LN542@lzma_decod@2
  048ad	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  048b1	c1 ea 0b	 shr	 edx, 11
  048b4	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  048bb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  048c3	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  048c7	8b c2		 mov	 eax, edx
  048c9	0f af c1	 imul	 eax, ecx
  048cc	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  048d3	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  048da	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  048de	73 68		 jae	 SHORT $LN537@lzma_decod@2
$LN536@lzma_decod@2:
  048e0	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  048e7	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  048eb	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  048f2	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  048f9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04901	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  04905	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  0490a	2b c8		 sub	 ecx, eax
  0490c	c1 e9 05	 shr	 ecx, 5
  0490f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04917	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  0491b	03 d1		 add	 edx, ecx
  0491d	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04924	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0492c	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  04930	33 c0		 xor	 eax, eax
  04932	85 c0		 test	 eax, eax
  04934	75 aa		 jne	 SHORT $LN536@lzma_decod@2
  04936	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0493d	03 c0		 add	 eax, eax
  0493f	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  04946	eb 78		 jmp	 SHORT $LN533@lzma_decod@2
$LN537@lzma_decod@2:
$LN532@lzma_decod@2:
  04948	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0494f	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  04953	2b c1		 sub	 eax, ecx
  04955	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04959	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  04960	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  04964	2b c1		 sub	 eax, ecx
  04966	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0496a	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  04971	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04978	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04980	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  04984	c1 f9 05	 sar	 ecx, 5
  04987	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0498f	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04993	2b d1		 sub	 edx, ecx
  04995	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0499c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  049a4	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  049a8	33 c0		 xor	 eax, eax
  049aa	85 c0		 test	 eax, eax
  049ac	75 9a		 jne	 SHORT $LN532@lzma_decod@2
  049ae	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  049b5	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  049b9	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN533@lzma_decod@2:
  049c0	33 c0		 xor	 eax, eax
  049c2	85 c0		 test	 eax, eax
  049c4	0f 85 75 fe ff
	ff		 jne	 $LN545@lzma_decod@2

; 538  : #endif
; 539  : 			// Get rid of the highest bit that was needed for
; 540  : 			// indexing of the probability array.
; 541  : 			symbol -= DIST_SLOTS;

  049ca	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  049d1	83 e8 40	 sub	 eax, 64			; 00000040H
  049d4	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax

; 542  : 			assert(symbol <= 63);
; 543  : 
; 544  : 			if (symbol < DIST_MODEL_START) {

  049db	83 bc 24 98 00
	00 00 04	 cmp	 DWORD PTR symbol$33175[rsp], 4
  049e3	73 10		 jae	 SHORT $LN529@lzma_decod@2

; 545  : 				// Match distances [0, 3] have only two bits.
; 546  : 				rep0 = symbol;

  049e5	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  049ec	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax

; 547  : 			} else {

  049f0	e9 94 11 00 00	 jmp	 $LN528@lzma_decod@2
$LN529@lzma_decod@2:

; 548  : 				// Decode the lowest [1, 29] bits of
; 549  : 				// the match distance.
; 550  : 				limit = (symbol >> 1) - 1;

  049f5	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  049fc	d1 e8		 shr	 eax, 1
  049fe	83 e8 01	 sub	 eax, 1
  04a01	89 84 24 b4 00
	00 00		 mov	 DWORD PTR limit$33176[rsp], eax

; 551  : 				assert(limit >= 1 && limit <= 30);
; 552  : 				rep0 = 2 + (symbol & 1);

  04a08	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04a0f	83 e0 01	 and	 eax, 1
  04a12	83 c0 02	 add	 eax, 2
  04a15	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax

; 553  : 
; 554  : 				if (symbol < DIST_MODEL_END) {

  04a19	83 bc 24 98 00
	00 00 0e	 cmp	 DWORD PTR symbol$33175[rsp], 14
  04a21	0f 83 4d 09 00
	00		 jae	 $LN527@lzma_decod@2

; 555  : 					// Prepare to decode the low bits for
; 556  : 					// a distance of [4, 127].
; 557  : 					assert(limit <= 5);
; 558  : 					rep0 <<= limit;

  04a27	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR limit$33176[rsp]
  04a2e	0f b6 c8	 movzx	 ecx, al
  04a31	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  04a35	d3 e0		 shl	 eax, cl
  04a37	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax

; 559  : 					assert(rep0 <= 96);
; 560  : 					// -1 is fine, because we start
; 561  : 					// decoding at probs[1], not probs[0].
; 562  : 					// NOTE: This violates the C standard,
; 563  : 					// since we are doing pointer
; 564  : 					// arithmetic past the beginning of
; 565  : 					// the array.
; 566  : 					assert((int32_t)(rep0 - symbol - 1)
; 567  : 							>= -1);
; 568  : 					assert((int32_t)(rep0 - symbol - 1)
; 569  : 							<= 82);
; 570  : 					probs = coder->pos_special + rep0
; 571  : 							- symbol - 1;

  04a3b	8b 4c 24 40	 mov	 ecx, DWORD PTR rep0$33169[rsp]
  04a3f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  04a44	48 8d 84 48 60
	65 00 00	 lea	 rax, QWORD PTR [rax+rcx*2+25952]
  04a4c	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04a53	48 d1 e1	 shl	 rcx, 1
  04a56	48 2b c1	 sub	 rax, rcx
  04a59	48 83 e8 02	 sub	 rax, 2
  04a5d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR probs$33174[rsp], rax

; 572  : 					symbol = 1;

  04a65	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR symbol$33175[rsp], 1

; 573  : 					offset = 0;

  04a70	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR offset$33177[rsp], 0
$LN526@lzma_decod@2:

; 574  : 	case SEQ_DIST_MODEL:
; 575  : #ifdef HAVE_SMALL
; 576  : 					do {
; 577  : 						rc_bit(probs[symbol], ,
; 578  : 							rep0 += 1 << offset,
; 579  : 							SEQ_DIST_MODEL);
; 580  : 					} while (++offset < limit);
; 581  : #else
; 582  : 					switch (limit) {

  04a7b	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR limit$33176[rsp]
  04a82	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv2647[rsp], eax
  04a89	83 bc 24 68 01
	00 00 01	 cmp	 DWORD PTR tv2647[rsp], 1
  04a91	0f 84 52 07 00
	00		 je	 $LN455@lzma_decod@2
  04a97	83 bc 24 68 01
	00 00 02	 cmp	 DWORD PTR tv2647[rsp], 2
  04a9f	0f 84 7a 05 00
	00		 je	 $LN472@lzma_decod@2
  04aa5	83 bc 24 68 01
	00 00 03	 cmp	 DWORD PTR tv2647[rsp], 3
  04aad	0f 84 a2 03 00
	00		 je	 $LN489@lzma_decod@2
  04ab3	83 bc 24 68 01
	00 00 04	 cmp	 DWORD PTR tv2647[rsp], 4
  04abb	0f 84 ca 01 00
	00		 je	 $LN506@lzma_decod@2
  04ac1	83 bc 24 68 01
	00 00 05	 cmp	 DWORD PTR tv2647[rsp], 5
  04ac9	74 05		 je	 SHORT $LN523@lzma_decod@2
  04acb	e9 9f 08 00 00	 jmp	 $LN524@lzma_decod@2
$LN523@lzma_decod@2:
$LN522@lzma_decod@2:
$LN519@lzma_decod@2:

; 583  : 					case 5:
; 584  : 						assert(offset == 0);
; 585  : 						rc_bit(probs[symbol], ,
; 586  : 							rep0 += 1,
; 587  : 							SEQ_DIST_MODEL);

  04ad0	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  04ad8	73 5e		 jae	 SHORT $LN516@lzma_decod@2
  04ada	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  04ae2	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  04ae7	75 14		 jne	 SHORT $LN515@lzma_decod@2
  04ae9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  04aee	c7 80 a0 6e 00
	00 2a 00 00 00	 mov	 DWORD PTR [rax+28320], 42 ; 0000002aH
  04af8	e9 23 35 00 00	 jmp	 $out$33200
$LN515@lzma_decod@2:
  04afd	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  04b01	c1 e0 08	 shl	 eax, 8
  04b04	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04b08	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  04b0c	c1 e2 08	 shl	 edx, 8
  04b0f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  04b14	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  04b1c	48 03 c1	 add	 rax, rcx
  04b1f	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  04b22	8b c2		 mov	 eax, edx
  04b24	0b c1		 or	 eax, ecx
  04b26	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  04b2a	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  04b2f	48 83 c0 01	 add	 rax, 1
  04b33	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN516@lzma_decod@2:
  04b38	33 c0		 xor	 eax, eax
  04b3a	85 c0		 test	 eax, eax
  04b3c	75 92		 jne	 SHORT $LN519@lzma_decod@2
  04b3e	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  04b42	c1 ea 0b	 shr	 edx, 11
  04b45	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04b4c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04b54	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  04b58	8b c2		 mov	 eax, edx
  04b5a	0f af c1	 imul	 eax, ecx
  04b5d	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  04b64	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  04b6b	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  04b6f	73 6b		 jae	 SHORT $LN514@lzma_decod@2
$LN513@lzma_decod@2:
  04b71	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  04b78	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04b7c	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  04b83	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04b8a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04b92	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  04b96	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  04b9b	2b c8		 sub	 ecx, eax
  04b9d	c1 e9 05	 shr	 ecx, 5
  04ba0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04ba8	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04bac	03 d1		 add	 edx, ecx
  04bae	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04bb5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04bbd	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  04bc1	33 c0		 xor	 eax, eax
  04bc3	85 c0		 test	 eax, eax
  04bc5	75 aa		 jne	 SHORT $LN513@lzma_decod@2
  04bc7	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04bce	03 c0		 add	 eax, eax
  04bd0	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  04bd7	e9 83 00 00 00	 jmp	 $LN510@lzma_decod@2
$LN514@lzma_decod@2:
$LN509@lzma_decod@2:
  04bdc	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  04be3	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  04be7	2b c1		 sub	 eax, ecx
  04be9	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04bed	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  04bf4	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  04bf8	2b c1		 sub	 eax, ecx
  04bfa	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  04bfe	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  04c05	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04c0c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04c14	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  04c18	c1 f9 05	 sar	 ecx, 5
  04c1b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04c23	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04c27	2b d1		 sub	 edx, ecx
  04c29	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04c30	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04c38	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  04c3c	33 c0		 xor	 eax, eax
  04c3e	85 c0		 test	 eax, eax
  04c40	75 9a		 jne	 SHORT $LN509@lzma_decod@2
  04c42	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04c49	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  04c4d	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  04c54	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  04c58	83 c0 01	 add	 eax, 1
  04c5b	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax
$LN510@lzma_decod@2:
  04c5f	33 c0		 xor	 eax, eax
  04c61	85 c0		 test	 eax, eax
  04c63	0f 85 67 fe ff
	ff		 jne	 $LN522@lzma_decod@2

; 588  : 						++offset;

  04c69	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  04c70	83 c0 01	 add	 eax, 1
  04c73	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax

; 589  : 						--limit;

  04c7a	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR limit$33176[rsp]
  04c81	83 e8 01	 sub	 eax, 1
  04c84	89 84 24 b4 00
	00 00		 mov	 DWORD PTR limit$33176[rsp], eax
$LN506@lzma_decod@2:
$LN505@lzma_decod@2:
$LN502@lzma_decod@2:

; 590  : 					case 4:
; 591  : 						rc_bit(probs[symbol], ,
; 592  : 							rep0 += 1 << offset,
; 593  : 							SEQ_DIST_MODEL);

  04c8b	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  04c93	73 5e		 jae	 SHORT $LN499@lzma_decod@2
  04c95	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  04c9d	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  04ca2	75 14		 jne	 SHORT $LN498@lzma_decod@2
  04ca4	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  04ca9	c7 80 a0 6e 00
	00 2a 00 00 00	 mov	 DWORD PTR [rax+28320], 42 ; 0000002aH
  04cb3	e9 68 33 00 00	 jmp	 $out$33200
$LN498@lzma_decod@2:
  04cb8	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  04cbc	c1 e0 08	 shl	 eax, 8
  04cbf	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04cc3	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  04cc7	c1 e2 08	 shl	 edx, 8
  04cca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  04ccf	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  04cd7	48 03 c1	 add	 rax, rcx
  04cda	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  04cdd	8b c2		 mov	 eax, edx
  04cdf	0b c1		 or	 eax, ecx
  04ce1	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  04ce5	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  04cea	48 83 c0 01	 add	 rax, 1
  04cee	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN499@lzma_decod@2:
  04cf3	33 c0		 xor	 eax, eax
  04cf5	85 c0		 test	 eax, eax
  04cf7	75 92		 jne	 SHORT $LN502@lzma_decod@2
  04cf9	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  04cfd	c1 ea 0b	 shr	 edx, 11
  04d00	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04d07	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04d0f	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  04d13	8b c2		 mov	 eax, edx
  04d15	0f af c1	 imul	 eax, ecx
  04d18	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  04d1f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  04d26	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  04d2a	73 6b		 jae	 SHORT $LN497@lzma_decod@2
$LN496@lzma_decod@2:
  04d2c	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  04d33	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04d37	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  04d3e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04d45	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04d4d	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  04d51	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  04d56	2b c8		 sub	 ecx, eax
  04d58	c1 e9 05	 shr	 ecx, 5
  04d5b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04d63	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04d67	03 d1		 add	 edx, ecx
  04d69	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04d70	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04d78	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  04d7c	33 c0		 xor	 eax, eax
  04d7e	85 c0		 test	 eax, eax
  04d80	75 aa		 jne	 SHORT $LN496@lzma_decod@2
  04d82	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04d89	03 c0		 add	 eax, eax
  04d8b	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  04d92	e9 92 00 00 00	 jmp	 $LN493@lzma_decod@2
$LN497@lzma_decod@2:
$LN492@lzma_decod@2:
  04d97	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  04d9e	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  04da2	2b c1		 sub	 eax, ecx
  04da4	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04da8	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  04daf	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  04db3	2b c1		 sub	 eax, ecx
  04db5	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  04db9	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  04dc0	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04dc7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04dcf	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  04dd3	c1 f9 05	 sar	 ecx, 5
  04dd6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04dde	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04de2	2b d1		 sub	 edx, ecx
  04de4	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04deb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04df3	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  04df7	33 c0		 xor	 eax, eax
  04df9	85 c0		 test	 eax, eax
  04dfb	75 9a		 jne	 SHORT $LN492@lzma_decod@2
  04dfd	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04e04	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  04e08	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  04e0f	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  04e16	b8 01 00 00 00	 mov	 eax, 1
  04e1b	d3 e0		 shl	 eax, cl
  04e1d	8b c8		 mov	 ecx, eax
  04e1f	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  04e23	03 c1		 add	 eax, ecx
  04e25	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax
$LN493@lzma_decod@2:
  04e29	33 c0		 xor	 eax, eax
  04e2b	85 c0		 test	 eax, eax
  04e2d	0f 85 58 fe ff
	ff		 jne	 $LN505@lzma_decod@2

; 594  : 						++offset;

  04e33	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  04e3a	83 c0 01	 add	 eax, 1
  04e3d	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax

; 595  : 						--limit;

  04e44	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR limit$33176[rsp]
  04e4b	83 e8 01	 sub	 eax, 1
  04e4e	89 84 24 b4 00
	00 00		 mov	 DWORD PTR limit$33176[rsp], eax
$LN489@lzma_decod@2:
$LN488@lzma_decod@2:
$LN485@lzma_decod@2:

; 596  : 					case 3:
; 597  : 						rc_bit(probs[symbol], ,
; 598  : 							rep0 += 1 << offset,
; 599  : 							SEQ_DIST_MODEL);

  04e55	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  04e5d	73 5e		 jae	 SHORT $LN482@lzma_decod@2
  04e5f	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  04e67	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  04e6c	75 14		 jne	 SHORT $LN481@lzma_decod@2
  04e6e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  04e73	c7 80 a0 6e 00
	00 2a 00 00 00	 mov	 DWORD PTR [rax+28320], 42 ; 0000002aH
  04e7d	e9 9e 31 00 00	 jmp	 $out$33200
$LN481@lzma_decod@2:
  04e82	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  04e86	c1 e0 08	 shl	 eax, 8
  04e89	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04e8d	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  04e91	c1 e2 08	 shl	 edx, 8
  04e94	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  04e99	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  04ea1	48 03 c1	 add	 rax, rcx
  04ea4	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  04ea7	8b c2		 mov	 eax, edx
  04ea9	0b c1		 or	 eax, ecx
  04eab	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  04eaf	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  04eb4	48 83 c0 01	 add	 rax, 1
  04eb8	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN482@lzma_decod@2:
  04ebd	33 c0		 xor	 eax, eax
  04ebf	85 c0		 test	 eax, eax
  04ec1	75 92		 jne	 SHORT $LN485@lzma_decod@2
  04ec3	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  04ec7	c1 ea 0b	 shr	 edx, 11
  04eca	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04ed1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04ed9	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  04edd	8b c2		 mov	 eax, edx
  04edf	0f af c1	 imul	 eax, ecx
  04ee2	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  04ee9	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  04ef0	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  04ef4	73 6b		 jae	 SHORT $LN480@lzma_decod@2
$LN479@lzma_decod@2:
  04ef6	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  04efd	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04f01	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  04f08	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04f0f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04f17	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  04f1b	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  04f20	2b c8		 sub	 ecx, eax
  04f22	c1 e9 05	 shr	 ecx, 5
  04f25	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04f2d	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04f31	03 d1		 add	 edx, ecx
  04f33	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04f3a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04f42	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  04f46	33 c0		 xor	 eax, eax
  04f48	85 c0		 test	 eax, eax
  04f4a	75 aa		 jne	 SHORT $LN479@lzma_decod@2
  04f4c	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04f53	03 c0		 add	 eax, eax
  04f55	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  04f5c	e9 92 00 00 00	 jmp	 $LN476@lzma_decod@2
$LN480@lzma_decod@2:
$LN475@lzma_decod@2:
  04f61	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  04f68	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  04f6c	2b c1		 sub	 eax, ecx
  04f6e	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  04f72	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  04f79	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  04f7d	2b c1		 sub	 eax, ecx
  04f7f	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  04f83	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  04f8a	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04f91	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04f99	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  04f9d	c1 f9 05	 sar	 ecx, 5
  04fa0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04fa8	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  04fac	2b d1		 sub	 edx, ecx
  04fae	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  04fb5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  04fbd	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  04fc1	33 c0		 xor	 eax, eax
  04fc3	85 c0		 test	 eax, eax
  04fc5	75 9a		 jne	 SHORT $LN475@lzma_decod@2
  04fc7	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  04fce	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  04fd2	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  04fd9	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  04fe0	b8 01 00 00 00	 mov	 eax, 1
  04fe5	d3 e0		 shl	 eax, cl
  04fe7	8b c8		 mov	 ecx, eax
  04fe9	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  04fed	03 c1		 add	 eax, ecx
  04fef	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax
$LN476@lzma_decod@2:
  04ff3	33 c0		 xor	 eax, eax
  04ff5	85 c0		 test	 eax, eax
  04ff7	0f 85 58 fe ff
	ff		 jne	 $LN488@lzma_decod@2

; 600  : 						++offset;

  04ffd	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  05004	83 c0 01	 add	 eax, 1
  05007	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax

; 601  : 						--limit;

  0500e	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR limit$33176[rsp]
  05015	83 e8 01	 sub	 eax, 1
  05018	89 84 24 b4 00
	00 00		 mov	 DWORD PTR limit$33176[rsp], eax
$LN472@lzma_decod@2:
$LN471@lzma_decod@2:
$LN468@lzma_decod@2:

; 602  : 					case 2:
; 603  : 						rc_bit(probs[symbol], ,
; 604  : 							rep0 += 1 << offset,
; 605  : 							SEQ_DIST_MODEL);

  0501f	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  05027	73 5e		 jae	 SHORT $LN465@lzma_decod@2
  05029	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  05031	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  05036	75 14		 jne	 SHORT $LN464@lzma_decod@2
  05038	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0503d	c7 80 a0 6e 00
	00 2a 00 00 00	 mov	 DWORD PTR [rax+28320], 42 ; 0000002aH
  05047	e9 d4 2f 00 00	 jmp	 $out$33200
$LN464@lzma_decod@2:
  0504c	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  05050	c1 e0 08	 shl	 eax, 8
  05053	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05057	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  0505b	c1 e2 08	 shl	 edx, 8
  0505e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  05063	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  0506b	48 03 c1	 add	 rax, rcx
  0506e	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  05071	8b c2		 mov	 eax, edx
  05073	0b c1		 or	 eax, ecx
  05075	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05079	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  0507e	48 83 c0 01	 add	 rax, 1
  05082	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN465@lzma_decod@2:
  05087	33 c0		 xor	 eax, eax
  05089	85 c0		 test	 eax, eax
  0508b	75 92		 jne	 SHORT $LN468@lzma_decod@2
  0508d	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  05091	c1 ea 0b	 shr	 edx, 11
  05094	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0509b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  050a3	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  050a7	8b c2		 mov	 eax, edx
  050a9	0f af c1	 imul	 eax, ecx
  050ac	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  050b3	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  050ba	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  050be	73 6b		 jae	 SHORT $LN463@lzma_decod@2
$LN462@lzma_decod@2:
  050c0	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  050c7	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  050cb	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  050d2	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  050d9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  050e1	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  050e5	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  050ea	2b c8		 sub	 ecx, eax
  050ec	c1 e9 05	 shr	 ecx, 5
  050ef	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  050f7	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  050fb	03 d1		 add	 edx, ecx
  050fd	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05104	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0510c	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  05110	33 c0		 xor	 eax, eax
  05112	85 c0		 test	 eax, eax
  05114	75 aa		 jne	 SHORT $LN462@lzma_decod@2
  05116	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0511d	03 c0		 add	 eax, eax
  0511f	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  05126	e9 92 00 00 00	 jmp	 $LN459@lzma_decod@2
$LN463@lzma_decod@2:
$LN458@lzma_decod@2:
  0512b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  05132	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  05136	2b c1		 sub	 eax, ecx
  05138	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0513c	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  05143	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  05147	2b c1		 sub	 eax, ecx
  05149	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0514d	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  05154	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0515b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  05163	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  05167	c1 f9 05	 sar	 ecx, 5
  0516a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  05172	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  05176	2b d1		 sub	 edx, ecx
  05178	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0517f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  05187	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  0518b	33 c0		 xor	 eax, eax
  0518d	85 c0		 test	 eax, eax
  0518f	75 9a		 jne	 SHORT $LN458@lzma_decod@2
  05191	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  05198	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0519c	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  051a3	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  051aa	b8 01 00 00 00	 mov	 eax, 1
  051af	d3 e0		 shl	 eax, cl
  051b1	8b c8		 mov	 ecx, eax
  051b3	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  051b7	03 c1		 add	 eax, ecx
  051b9	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax
$LN459@lzma_decod@2:
  051bd	33 c0		 xor	 eax, eax
  051bf	85 c0		 test	 eax, eax
  051c1	0f 85 58 fe ff
	ff		 jne	 $LN471@lzma_decod@2

; 606  : 						++offset;

  051c7	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  051ce	83 c0 01	 add	 eax, 1
  051d1	89 84 24 ac 00
	00 00		 mov	 DWORD PTR offset$33177[rsp], eax

; 607  : 						--limit;

  051d8	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR limit$33176[rsp]
  051df	83 e8 01	 sub	 eax, 1
  051e2	89 84 24 b4 00
	00 00		 mov	 DWORD PTR limit$33176[rsp], eax
$LN455@lzma_decod@2:
$LN454@lzma_decod@2:
$LN451@lzma_decod@2:

; 608  : 					case 1:
; 609  : 						// We need "symbol" only for
; 610  : 						// indexing the probability
; 611  : 						// array, thus we can use
; 612  : 						// rc_bit_last() here to omit
; 613  : 						// the unneeded updating of
; 614  : 						// "symbol".
; 615  : 						rc_bit_last(probs[symbol], ,
; 616  : 							rep0 += 1 << offset,
; 617  : 							SEQ_DIST_MODEL);

  051e9	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  051f1	73 5e		 jae	 SHORT $LN448@lzma_decod@2
  051f3	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  051fb	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  05200	75 14		 jne	 SHORT $LN447@lzma_decod@2
  05202	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05207	c7 80 a0 6e 00
	00 2a 00 00 00	 mov	 DWORD PTR [rax+28320], 42 ; 0000002aH
  05211	e9 0a 2e 00 00	 jmp	 $out$33200
$LN447@lzma_decod@2:
  05216	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0521a	c1 e0 08	 shl	 eax, 8
  0521d	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05221	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  05225	c1 e2 08	 shl	 edx, 8
  05228	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0522d	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  05235	48 03 c1	 add	 rax, rcx
  05238	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0523b	8b c2		 mov	 eax, edx
  0523d	0b c1		 or	 eax, ecx
  0523f	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05243	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  05248	48 83 c0 01	 add	 rax, 1
  0524c	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN448@lzma_decod@2:
  05251	33 c0		 xor	 eax, eax
  05253	85 c0		 test	 eax, eax
  05255	75 92		 jne	 SHORT $LN451@lzma_decod@2
  05257	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  0525b	c1 ea 0b	 shr	 edx, 11
  0525e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05265	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0526d	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  05271	8b c2		 mov	 eax, edx
  05273	0f af c1	 imul	 eax, ecx
  05276	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0527d	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  05284	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  05288	73 5b		 jae	 SHORT $LN446@lzma_decod@2
$LN445@lzma_decod@2:
  0528a	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  05291	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05295	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0529c	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  052a3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  052ab	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  052af	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  052b4	2b c8		 sub	 ecx, eax
  052b6	c1 e9 05	 shr	 ecx, 5
  052b9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  052c1	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  052c5	03 d1		 add	 edx, ecx
  052c7	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  052ce	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  052d6	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  052da	33 c0		 xor	 eax, eax
  052dc	85 c0		 test	 eax, eax
  052de	75 aa		 jne	 SHORT $LN445@lzma_decod@2
  052e0	e9 80 00 00 00	 jmp	 $LN442@lzma_decod@2
$LN446@lzma_decod@2:
$LN441@lzma_decod@2:
  052e5	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  052ec	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  052f0	2b c1		 sub	 eax, ecx
  052f2	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  052f6	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  052fd	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  05301	2b c1		 sub	 eax, ecx
  05303	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05307	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0530e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05315	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0531d	0f b7 0c 48	 movzx	 ecx, WORD PTR [rax+rcx*2]
  05321	c1 f9 05	 sar	 ecx, 5
  05324	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  0532c	0f b7 14 50	 movzx	 edx, WORD PTR [rax+rdx*2]
  05330	2b d1		 sub	 edx, ecx
  05332	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05339	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  05341	66 89 14 48	 mov	 WORD PTR [rax+rcx*2], dx
  05345	33 c0		 xor	 eax, eax
  05347	85 c0		 test	 eax, eax
  05349	75 9a		 jne	 SHORT $LN441@lzma_decod@2
  0534b	8b 8c 24 ac 00
	00 00		 mov	 ecx, DWORD PTR offset$33177[rsp]
  05352	b8 01 00 00 00	 mov	 eax, 1
  05357	d3 e0		 shl	 eax, cl
  05359	8b c8		 mov	 ecx, eax
  0535b	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  0535f	03 c1		 add	 eax, ecx
  05361	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax
$LN442@lzma_decod@2:
  05365	33 c0		 xor	 eax, eax
  05367	85 c0		 test	 eax, eax
  05369	0f 85 7a fe ff
	ff		 jne	 $LN454@lzma_decod@2
$LN524@lzma_decod@2:

; 618  : 					}
; 619  : #endif
; 620  : 				} else {

  0536f	e9 15 08 00 00	 jmp	 $LN438@lzma_decod@2
$LN527@lzma_decod@2:

; 621  : 					// The distance is >= 128. Decode the
; 622  : 					// lower bits without probabilities
; 623  : 					// except the lowest four bits.
; 624  : 					assert(symbol >= 14);
; 625  : 					assert(limit >= 6);
; 626  : 					limit -= ALIGN_BITS;

  05374	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR limit$33176[rsp]
  0537b	83 e8 04	 sub	 eax, 4
  0537e	89 84 24 b4 00
	00 00		 mov	 DWORD PTR limit$33176[rsp], eax
$LN437@lzma_decod@2:
$LN436@lzma_decod@2:
$LN433@lzma_decod@2:
$LN430@lzma_decod@2:

; 627  : 					assert(limit >= 2);
; 628  : 	case SEQ_DIRECT:
; 629  : 					// Not worth manual unrolling
; 630  : 					do {
; 631  : 						rc_direct(rep0, SEQ_DIRECT);

  05385	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0538d	73 5e		 jae	 SHORT $LN427@lzma_decod@2
  0538f	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  05397	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  0539c	75 14		 jne	 SHORT $LN426@lzma_decod@2
  0539e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  053a3	c7 80 a0 6e 00
	00 2b 00 00 00	 mov	 DWORD PTR [rax+28320], 43 ; 0000002bH
  053ad	e9 6e 2c 00 00	 jmp	 $out$33200
$LN426@lzma_decod@2:
  053b2	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  053b6	c1 e0 08	 shl	 eax, 8
  053b9	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  053bd	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  053c1	c1 e2 08	 shl	 edx, 8
  053c4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  053c9	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  053d1	48 03 c1	 add	 rax, rcx
  053d4	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  053d7	8b c2		 mov	 eax, edx
  053d9	0b c1		 or	 eax, ecx
  053db	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  053df	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  053e4	48 83 c0 01	 add	 rax, 1
  053e8	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN427@lzma_decod@2:
  053ed	33 c0		 xor	 eax, eax
  053ef	85 c0		 test	 eax, eax
  053f1	75 92		 jne	 SHORT $LN430@lzma_decod@2
  053f3	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  053f7	d1 e8		 shr	 eax, 1
  053f9	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  053fd	8b 4c 24 30	 mov	 ecx, DWORD PTR rc$33165[rsp]
  05401	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  05405	2b c1		 sub	 eax, ecx
  05407	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0540b	8b 4c 24 34	 mov	 ecx, DWORD PTR rc$33165[rsp+4]
  0540f	c1 e9 1f	 shr	 ecx, 31
  05412	33 c0		 xor	 eax, eax
  05414	2b c1		 sub	 eax, ecx
  05416	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0541d	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  05424	8b 4c 24 30	 mov	 ecx, DWORD PTR rc$33165[rsp]
  05428	23 c8		 and	 ecx, eax
  0542a	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  0542e	03 c1		 add	 eax, ecx
  05430	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05434	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0543b	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  0543f	8d 44 41 01	 lea	 eax, DWORD PTR [rcx+rax*2+1]
  05443	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax
  05447	33 c0		 xor	 eax, eax
  05449	85 c0		 test	 eax, eax
  0544b	0f 85 34 ff ff
	ff		 jne	 $LN433@lzma_decod@2

; 632  : 					} while (--limit > 0);

  05451	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR limit$33176[rsp]
  05458	83 e8 01	 sub	 eax, 1
  0545b	89 84 24 b4 00
	00 00		 mov	 DWORD PTR limit$33176[rsp], eax
  05462	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR limit$33176[rsp], 0
  0546a	0f 87 15 ff ff
	ff		 ja	 $LN436@lzma_decod@2

; 633  : 
; 634  : 					// Decode the lowest four bits using
; 635  : 					// probabilities.
; 636  : 					rep0 <<= ALIGN_BITS;

  05470	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  05474	c1 e0 04	 shl	 eax, 4
  05477	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax

; 637  : 					symbol = 1;

  0547b	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR symbol$33175[rsp], 1
$LN425@lzma_decod@2:
$LN424@lzma_decod@2:
$LN421@lzma_decod@2:

; 638  : #ifdef HAVE_SMALL
; 639  : 					offset = 0;
; 640  : 	case SEQ_ALIGN:
; 641  : 					do {
; 642  : 						rc_bit(coder->pos_align[
; 643  : 								symbol], ,
; 644  : 							rep0 += 1 << offset,
; 645  : 							SEQ_ALIGN);
; 646  : 					} while (++offset < ALIGN_BITS);
; 647  : #else
; 648  : 	case SEQ_ALIGN0:
; 649  : 					rc_bit(coder->pos_align[symbol], ,
; 650  : 							rep0 += 1, SEQ_ALIGN0);

  05486	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0548e	73 5e		 jae	 SHORT $LN418@lzma_decod@2
  05490	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  05498	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  0549d	75 14		 jne	 SHORT $LN417@lzma_decod@2
  0549f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  054a4	c7 80 a0 6e 00
	00 2c 00 00 00	 mov	 DWORD PTR [rax+28320], 44 ; 0000002cH
  054ae	e9 6d 2b 00 00	 jmp	 $out$33200
$LN417@lzma_decod@2:
  054b3	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  054b7	c1 e0 08	 shl	 eax, 8
  054ba	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  054be	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  054c2	c1 e2 08	 shl	 edx, 8
  054c5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  054ca	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  054d2	48 03 c1	 add	 rax, rcx
  054d5	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  054d8	8b c2		 mov	 eax, edx
  054da	0b c1		 or	 eax, ecx
  054dc	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  054e0	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  054e5	48 83 c0 01	 add	 rax, 1
  054e9	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN418@lzma_decod@2:
  054ee	33 c0		 xor	 eax, eax
  054f0	85 c0		 test	 eax, eax
  054f2	75 92		 jne	 SHORT $LN421@lzma_decod@2
  054f4	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  054f8	c1 ea 0b	 shr	 edx, 11
  054fb	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05502	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05507	0f b7 8c 48 44
	66 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26180]
  0550f	8b c2		 mov	 eax, edx
  05511	0f af c1	 imul	 eax, ecx
  05514	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0551b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  05522	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  05526	73 6e		 jae	 SHORT $LN416@lzma_decod@2
$LN415@lzma_decod@2:
  05528	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0552f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05533	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0553a	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05541	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05546	0f b7 84 48 44
	66 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26180]
  0554e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  05553	2b c8		 sub	 ecx, eax
  05555	c1 e9 05	 shr	 ecx, 5
  05558	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0555d	0f b7 94 50 44
	66 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26180]
  05565	03 d1		 add	 edx, ecx
  05567	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0556e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05573	66 89 94 48 44
	66 00 00	 mov	 WORD PTR [rax+rcx*2+26180], dx
  0557b	33 c0		 xor	 eax, eax
  0557d	85 c0		 test	 eax, eax
  0557f	75 a7		 jne	 SHORT $LN415@lzma_decod@2
  05581	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  05588	03 c0		 add	 eax, eax
  0558a	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  05591	e9 86 00 00 00	 jmp	 $LN412@lzma_decod@2
$LN416@lzma_decod@2:
$LN411@lzma_decod@2:
  05596	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0559d	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  055a1	2b c1		 sub	 eax, ecx
  055a3	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  055a7	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  055ae	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  055b2	2b c1		 sub	 eax, ecx
  055b4	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  055b8	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  055bf	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  055c6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  055cb	0f b7 8c 48 44
	66 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26180]
  055d3	c1 f9 05	 sar	 ecx, 5
  055d6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  055db	0f b7 94 50 44
	66 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26180]
  055e3	2b d1		 sub	 edx, ecx
  055e5	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  055ec	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  055f1	66 89 94 48 44
	66 00 00	 mov	 WORD PTR [rax+rcx*2+26180], dx
  055f9	33 c0		 xor	 eax, eax
  055fb	85 c0		 test	 eax, eax
  055fd	75 97		 jne	 SHORT $LN411@lzma_decod@2
  055ff	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  05606	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0560a	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  05611	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  05615	83 c0 01	 add	 eax, 1
  05618	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax
$LN412@lzma_decod@2:
  0561c	33 c0		 xor	 eax, eax
  0561e	85 c0		 test	 eax, eax
  05620	0f 85 60 fe ff
	ff		 jne	 $LN424@lzma_decod@2
$LN408@lzma_decod@2:
$LN407@lzma_decod@2:
$LN404@lzma_decod@2:

; 651  : 	case SEQ_ALIGN1:
; 652  : 					rc_bit(coder->pos_align[symbol], ,
; 653  : 							rep0 += 2, SEQ_ALIGN1);

  05626	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0562e	73 5e		 jae	 SHORT $LN401@lzma_decod@2
  05630	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  05638	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  0563d	75 14		 jne	 SHORT $LN400@lzma_decod@2
  0563f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05644	c7 80 a0 6e 00
	00 2d 00 00 00	 mov	 DWORD PTR [rax+28320], 45 ; 0000002dH
  0564e	e9 cd 29 00 00	 jmp	 $out$33200
$LN400@lzma_decod@2:
  05653	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  05657	c1 e0 08	 shl	 eax, 8
  0565a	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0565e	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  05662	c1 e2 08	 shl	 edx, 8
  05665	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0566a	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  05672	48 03 c1	 add	 rax, rcx
  05675	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  05678	8b c2		 mov	 eax, edx
  0567a	0b c1		 or	 eax, ecx
  0567c	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05680	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  05685	48 83 c0 01	 add	 rax, 1
  05689	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN401@lzma_decod@2:
  0568e	33 c0		 xor	 eax, eax
  05690	85 c0		 test	 eax, eax
  05692	75 92		 jne	 SHORT $LN404@lzma_decod@2
  05694	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  05698	c1 ea 0b	 shr	 edx, 11
  0569b	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  056a2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  056a7	0f b7 8c 48 44
	66 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26180]
  056af	8b c2		 mov	 eax, edx
  056b1	0f af c1	 imul	 eax, ecx
  056b4	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  056bb	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  056c2	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  056c6	73 6e		 jae	 SHORT $LN399@lzma_decod@2
$LN398@lzma_decod@2:
  056c8	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  056cf	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  056d3	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  056da	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  056e1	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  056e6	0f b7 84 48 44
	66 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26180]
  056ee	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  056f3	2b c8		 sub	 ecx, eax
  056f5	c1 e9 05	 shr	 ecx, 5
  056f8	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  056fd	0f b7 94 50 44
	66 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26180]
  05705	03 d1		 add	 edx, ecx
  05707	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0570e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05713	66 89 94 48 44
	66 00 00	 mov	 WORD PTR [rax+rcx*2+26180], dx
  0571b	33 c0		 xor	 eax, eax
  0571d	85 c0		 test	 eax, eax
  0571f	75 a7		 jne	 SHORT $LN398@lzma_decod@2
  05721	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  05728	03 c0		 add	 eax, eax
  0572a	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  05731	e9 86 00 00 00	 jmp	 $LN395@lzma_decod@2
$LN399@lzma_decod@2:
$LN394@lzma_decod@2:
  05736	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0573d	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  05741	2b c1		 sub	 eax, ecx
  05743	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05747	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0574e	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  05752	2b c1		 sub	 eax, ecx
  05754	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05758	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0575f	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05766	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0576b	0f b7 8c 48 44
	66 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26180]
  05773	c1 f9 05	 sar	 ecx, 5
  05776	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0577b	0f b7 94 50 44
	66 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26180]
  05783	2b d1		 sub	 edx, ecx
  05785	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0578c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05791	66 89 94 48 44
	66 00 00	 mov	 WORD PTR [rax+rcx*2+26180], dx
  05799	33 c0		 xor	 eax, eax
  0579b	85 c0		 test	 eax, eax
  0579d	75 97		 jne	 SHORT $LN394@lzma_decod@2
  0579f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  057a6	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  057aa	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  057b1	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  057b5	83 c0 02	 add	 eax, 2
  057b8	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax
$LN395@lzma_decod@2:
  057bc	33 c0		 xor	 eax, eax
  057be	85 c0		 test	 eax, eax
  057c0	0f 85 60 fe ff
	ff		 jne	 $LN407@lzma_decod@2
$LN391@lzma_decod@2:
$LN390@lzma_decod@2:
$LN387@lzma_decod@2:

; 654  : 	case SEQ_ALIGN2:
; 655  : 					rc_bit(coder->pos_align[symbol], ,
; 656  : 							rep0 += 4, SEQ_ALIGN2);

  057c6	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  057ce	73 5e		 jae	 SHORT $LN384@lzma_decod@2
  057d0	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  057d8	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  057dd	75 14		 jne	 SHORT $LN383@lzma_decod@2
  057df	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  057e4	c7 80 a0 6e 00
	00 2e 00 00 00	 mov	 DWORD PTR [rax+28320], 46 ; 0000002eH
  057ee	e9 2d 28 00 00	 jmp	 $out$33200
$LN383@lzma_decod@2:
  057f3	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  057f7	c1 e0 08	 shl	 eax, 8
  057fa	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  057fe	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  05802	c1 e2 08	 shl	 edx, 8
  05805	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0580a	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  05812	48 03 c1	 add	 rax, rcx
  05815	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  05818	8b c2		 mov	 eax, edx
  0581a	0b c1		 or	 eax, ecx
  0581c	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05820	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  05825	48 83 c0 01	 add	 rax, 1
  05829	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN384@lzma_decod@2:
  0582e	33 c0		 xor	 eax, eax
  05830	85 c0		 test	 eax, eax
  05832	75 92		 jne	 SHORT $LN387@lzma_decod@2
  05834	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  05838	c1 ea 0b	 shr	 edx, 11
  0583b	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05842	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05847	0f b7 8c 48 44
	66 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26180]
  0584f	8b c2		 mov	 eax, edx
  05851	0f af c1	 imul	 eax, ecx
  05854	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0585b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  05862	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  05866	73 6e		 jae	 SHORT $LN382@lzma_decod@2
$LN381@lzma_decod@2:
  05868	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0586f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05873	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0587a	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05881	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05886	0f b7 84 48 44
	66 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26180]
  0588e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  05893	2b c8		 sub	 ecx, eax
  05895	c1 e9 05	 shr	 ecx, 5
  05898	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0589d	0f b7 94 50 44
	66 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26180]
  058a5	03 d1		 add	 edx, ecx
  058a7	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  058ae	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  058b3	66 89 94 48 44
	66 00 00	 mov	 WORD PTR [rax+rcx*2+26180], dx
  058bb	33 c0		 xor	 eax, eax
  058bd	85 c0		 test	 eax, eax
  058bf	75 a7		 jne	 SHORT $LN381@lzma_decod@2
  058c1	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  058c8	03 c0		 add	 eax, eax
  058ca	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  058d1	e9 86 00 00 00	 jmp	 $LN378@lzma_decod@2
$LN382@lzma_decod@2:
$LN377@lzma_decod@2:
  058d6	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  058dd	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  058e1	2b c1		 sub	 eax, ecx
  058e3	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  058e7	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  058ee	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  058f2	2b c1		 sub	 eax, ecx
  058f4	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  058f8	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  058ff	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05906	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0590b	0f b7 8c 48 44
	66 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26180]
  05913	c1 f9 05	 sar	 ecx, 5
  05916	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0591b	0f b7 94 50 44
	66 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26180]
  05923	2b d1		 sub	 edx, ecx
  05925	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0592c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05931	66 89 94 48 44
	66 00 00	 mov	 WORD PTR [rax+rcx*2+26180], dx
  05939	33 c0		 xor	 eax, eax
  0593b	85 c0		 test	 eax, eax
  0593d	75 97		 jne	 SHORT $LN377@lzma_decod@2
  0593f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  05946	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0594a	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  05951	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  05955	83 c0 04	 add	 eax, 4
  05958	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax
$LN378@lzma_decod@2:
  0595c	33 c0		 xor	 eax, eax
  0595e	85 c0		 test	 eax, eax
  05960	0f 85 60 fe ff
	ff		 jne	 $LN390@lzma_decod@2
$LN374@lzma_decod@2:
$LN373@lzma_decod@2:
$LN370@lzma_decod@2:

; 657  : 	case SEQ_ALIGN3:
; 658  : 					// Like in SEQ_DIST_MODEL, we don't
; 659  : 					// need "symbol" for anything else
; 660  : 					// than indexing the probability array.
; 661  : 					rc_bit_last(coder->pos_align[symbol], ,
; 662  : 							rep0 += 8, SEQ_ALIGN3);

  05966	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0596e	73 5e		 jae	 SHORT $LN367@lzma_decod@2
  05970	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  05978	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  0597d	75 14		 jne	 SHORT $LN366@lzma_decod@2
  0597f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05984	c7 80 a0 6e 00
	00 2f 00 00 00	 mov	 DWORD PTR [rax+28320], 47 ; 0000002fH
  0598e	e9 8d 26 00 00	 jmp	 $out$33200
$LN366@lzma_decod@2:
  05993	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  05997	c1 e0 08	 shl	 eax, 8
  0599a	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0599e	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  059a2	c1 e2 08	 shl	 edx, 8
  059a5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  059aa	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  059b2	48 03 c1	 add	 rax, rcx
  059b5	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  059b8	8b c2		 mov	 eax, edx
  059ba	0b c1		 or	 eax, ecx
  059bc	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  059c0	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  059c5	48 83 c0 01	 add	 rax, 1
  059c9	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN367@lzma_decod@2:
  059ce	33 c0		 xor	 eax, eax
  059d0	85 c0		 test	 eax, eax
  059d2	75 92		 jne	 SHORT $LN370@lzma_decod@2
  059d4	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  059d8	c1 ea 0b	 shr	 edx, 11
  059db	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  059e2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  059e7	0f b7 8c 48 44
	66 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26180]
  059ef	8b c2		 mov	 eax, edx
  059f1	0f af c1	 imul	 eax, ecx
  059f4	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  059fb	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  05a02	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  05a06	73 5b		 jae	 SHORT $LN365@lzma_decod@2
$LN364@lzma_decod@2:
  05a08	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  05a0f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05a13	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  05a1a	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05a21	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05a26	0f b7 84 48 44
	66 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+26180]
  05a2e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  05a33	2b c8		 sub	 ecx, eax
  05a35	c1 e9 05	 shr	 ecx, 5
  05a38	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05a3d	0f b7 94 50 44
	66 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26180]
  05a45	03 d1		 add	 edx, ecx
  05a47	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05a4e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05a53	66 89 94 48 44
	66 00 00	 mov	 WORD PTR [rax+rcx*2+26180], dx
  05a5b	33 c0		 xor	 eax, eax
  05a5d	85 c0		 test	 eax, eax
  05a5f	75 a7		 jne	 SHORT $LN364@lzma_decod@2
  05a61	eb 74		 jmp	 SHORT $LN361@lzma_decod@2
$LN365@lzma_decod@2:
$LN360@lzma_decod@2:
  05a63	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  05a6a	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  05a6e	2b c1		 sub	 eax, ecx
  05a70	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05a74	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  05a7b	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  05a7f	2b c1		 sub	 eax, ecx
  05a81	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05a85	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  05a8c	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05a93	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05a98	0f b7 8c 48 44
	66 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+26180]
  05aa0	c1 f9 05	 sar	 ecx, 5
  05aa3	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05aa8	0f b7 94 50 44
	66 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+26180]
  05ab0	2b d1		 sub	 edx, ecx
  05ab2	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  05ab9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05abe	66 89 94 48 44
	66 00 00	 mov	 WORD PTR [rax+rcx*2+26180], dx
  05ac6	33 c0		 xor	 eax, eax
  05ac8	85 c0		 test	 eax, eax
  05aca	75 97		 jne	 SHORT $LN360@lzma_decod@2
  05acc	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  05ad0	83 c0 08	 add	 eax, 8
  05ad3	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax
$LN361@lzma_decod@2:
  05ad7	33 c0		 xor	 eax, eax
  05ad9	85 c0		 test	 eax, eax
  05adb	0f 85 85 fe ff
	ff		 jne	 $LN373@lzma_decod@2

; 663  : #endif
; 664  : 
; 665  : 					if (rep0 == UINT32_MAX) {

  05ae1	83 7c 24 40 ff	 cmp	 DWORD PTR rep0$33169[rsp], -1 ; ffffffffH
  05ae6	0f 85 9d 00 00
	00		 jne	 $LN357@lzma_decod@2

; 666  : 						// End of payload marker was
; 667  : 						// found. It must not be
; 668  : 						// present if uncompressed
; 669  : 						// size is known.
; 670  : 						if (coder->uncompressed_size
; 671  : 						!= LZMA_VLI_UNKNOWN) {

  05aec	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05af1	48 83 b8 98 6e
	00 00 ff	 cmp	 QWORD PTR [rax+28312], -1
  05af9	74 10		 je	 SHORT $LN356@lzma_decod@2

; 672  : 							ret = LZMA_DATA_ERROR;

  05afb	c7 84 24 c0 00
	00 00 09 00 00
	00		 mov	 DWORD PTR ret$33182[rsp], 9

; 673  : 							goto out;

  05b06	e9 15 25 00 00	 jmp	 $out$33200
$LN356@lzma_decod@2:
$LN355@lzma_decod@2:
$LN354@lzma_decod@2:

; 674  : 						}
; 675  : 
; 676  : 	case SEQ_EOPM:
; 677  : 						// LZMA1 stream with
; 678  : 						// end-of-payload marker.
; 679  : 						rc_normalize(SEQ_EOPM);

  05b0b	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  05b13	73 5e		 jae	 SHORT $LN351@lzma_decod@2
  05b15	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  05b1d	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  05b22	75 14		 jne	 SHORT $LN350@lzma_decod@2
  05b24	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05b29	c7 80 a0 6e 00
	00 30 00 00 00	 mov	 DWORD PTR [rax+28320], 48 ; 00000030H
  05b33	e9 e8 24 00 00	 jmp	 $out$33200
$LN350@lzma_decod@2:
  05b38	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  05b3c	c1 e0 08	 shl	 eax, 8
  05b3f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05b43	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  05b47	c1 e2 08	 shl	 edx, 8
  05b4a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  05b4f	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  05b57	48 03 c1	 add	 rax, rcx
  05b5a	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  05b5d	8b c2		 mov	 eax, edx
  05b5f	0b c1		 or	 eax, ecx
  05b61	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05b65	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  05b6a	48 83 c0 01	 add	 rax, 1
  05b6e	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN351@lzma_decod@2:
  05b73	33 c0		 xor	 eax, eax
  05b75	85 c0		 test	 eax, eax
  05b77	75 92		 jne	 SHORT $LN354@lzma_decod@2

; 680  : 						ret = LZMA_STREAM_END;

  05b79	c7 84 24 c0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR ret$33182[rsp], 1

; 681  : 						goto out;

  05b84	e9 97 24 00 00	 jmp	 $out$33200
$LN357@lzma_decod@2:
$LN438@lzma_decod@2:
$LN528@lzma_decod@2:

; 682  : 					}
; 683  : 				}
; 684  : 			}
; 685  : 
; 686  : 			// Validate the distance we just decoded.
; 687  : 			if (unlikely(!dict_is_distance_valid(&dict, rep0))) {

  05b89	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  05b8d	48 39 44 24 58	 cmp	 QWORD PTR dict$33163[rsp+16], rax
  05b92	76 0d		 jbe	 SHORT $LN1241@lzma_decod@2
  05b94	c7 84 24 6c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv4669[rsp], 1
  05b9f	eb 0b		 jmp	 SHORT $LN1242@lzma_decod@2
$LN1241@lzma_decod@2:
  05ba1	c7 84 24 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4669[rsp], 0
$LN1242@lzma_decod@2:
  05bac	0f b6 84 24 6c
	01 00 00	 movzx	 eax, BYTE PTR tv4669[rsp]
  05bb4	85 c0		 test	 eax, eax
  05bb6	75 10		 jne	 SHORT $LN349@lzma_decod@2

; 688  : 				ret = LZMA_DATA_ERROR;

  05bb8	c7 84 24 c0 00
	00 00 09 00 00
	00		 mov	 DWORD PTR ret$33182[rsp], 9

; 689  : 				goto out;

  05bc3	e9 58 24 00 00	 jmp	 $out$33200
$LN349@lzma_decod@2:

; 690  : 			}
; 691  : 
; 692  : 		} else {

  05bc8	e9 a6 23 00 00	 jmp	 $LN348@lzma_decod@2
$LN904@lzma_decod@2:
$LN347@lzma_decod@2:

; 693  : 			rc_update_1(coder->is_rep[state]);

  05bcd	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  05bd4	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  05bd8	2b c1		 sub	 eax, ecx
  05bda	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05bde	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  05be5	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  05be9	2b c1		 sub	 eax, ecx
  05beb	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05bef	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR state$33168[rsp]
  05bf6	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05bfd	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05c02	0f b7 8c 48 80
	61 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+24960]
  05c0a	c1 f9 05	 sar	 ecx, 5
  05c0d	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05c12	0f b7 94 50 80
	61 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+24960]
  05c1a	2b d1		 sub	 edx, ecx
  05c1c	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05c23	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05c28	66 89 94 48 80
	61 00 00	 mov	 WORD PTR [rax+rcx*2+24960], dx
  05c30	33 c0		 xor	 eax, eax
  05c32	85 c0		 test	 eax, eax
  05c34	75 97		 jne	 SHORT $LN347@lzma_decod@2

; 694  : 
; 695  : 			// Repeated match
; 696  : 			//
; 697  : 			// The match distance is a value that we have had
; 698  : 			// earlier. The latest four match distances are
; 699  : 			// available as rep0, rep1, rep2 and rep3. We will
; 700  : 			// now decode which of them is the new distance.
; 701  : 			//
; 702  : 			// There cannot be a match if we haven't produced
; 703  : 			// any output, so check that first.
; 704  : 			if (unlikely(!dict_is_distance_valid(&dict, 0))) {

  05c36	48 83 7c 24 58
	00		 cmp	 QWORD PTR dict$33163[rsp+16], 0
  05c3c	76 0d		 jbe	 SHORT $LN1245@lzma_decod@2
  05c3e	c7 84 24 70 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv4667[rsp], 1
  05c49	eb 0b		 jmp	 SHORT $LN1246@lzma_decod@2
$LN1245@lzma_decod@2:
  05c4b	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv4667[rsp], 0
$LN1246@lzma_decod@2:
  05c56	0f b6 84 24 70
	01 00 00	 movzx	 eax, BYTE PTR tv4667[rsp]
  05c5e	85 c0		 test	 eax, eax
  05c60	75 10		 jne	 SHORT $LN344@lzma_decod@2

; 705  : 				ret = LZMA_DATA_ERROR;

  05c62	c7 84 24 c0 00
	00 00 09 00 00
	00		 mov	 DWORD PTR ret$33182[rsp], 9

; 706  : 				goto out;

  05c6d	e9 ae 23 00 00	 jmp	 $out$33200
$LN344@lzma_decod@2:
$LN343@lzma_decod@2:
$LN342@lzma_decod@2:

; 707  : 			}
; 708  : 
; 709  : 	case SEQ_IS_REP0:
; 710  : 			rc_if_0(coder->is_rep0[state], SEQ_IS_REP0) {

  05c72	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  05c7a	73 5e		 jae	 SHORT $LN339@lzma_decod@2
  05c7c	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  05c84	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  05c89	75 14		 jne	 SHORT $LN338@lzma_decod@2
  05c8b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05c90	c7 80 a0 6e 00
	00 31 00 00 00	 mov	 DWORD PTR [rax+28320], 49 ; 00000031H
  05c9a	e9 81 23 00 00	 jmp	 $out$33200
$LN338@lzma_decod@2:
  05c9f	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  05ca3	c1 e0 08	 shl	 eax, 8
  05ca6	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05caa	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  05cae	c1 e2 08	 shl	 edx, 8
  05cb1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  05cb6	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  05cbe	48 03 c1	 add	 rax, rcx
  05cc1	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  05cc4	8b c2		 mov	 eax, edx
  05cc6	0b c1		 or	 eax, ecx
  05cc8	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05ccc	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  05cd1	48 83 c0 01	 add	 rax, 1
  05cd5	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN339@lzma_decod@2:
  05cda	33 c0		 xor	 eax, eax
  05cdc	85 c0		 test	 eax, eax
  05cde	75 92		 jne	 SHORT $LN342@lzma_decod@2
  05ce0	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  05ce4	c1 ea 0b	 shr	 edx, 11
  05ce7	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05cee	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05cf3	0f b7 8c 48 98
	61 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+24984]
  05cfb	8b c2		 mov	 eax, edx
  05cfd	0f af c1	 imul	 eax, ecx
  05d00	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  05d07	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  05d0e	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  05d12	0f 83 e8 02 00
	00		 jae	 $LN337@lzma_decod@2
$LN336@lzma_decod@2:

; 711  : 				rc_update_0(coder->is_rep0[state]);

  05d18	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  05d1f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05d23	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR state$33168[rsp]
  05d2a	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05d31	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05d36	0f b7 84 48 98
	61 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+24984]
  05d3e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  05d43	2b c8		 sub	 ecx, eax
  05d45	c1 e9 05	 shr	 ecx, 5
  05d48	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05d4d	0f b7 94 50 98
	61 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+24984]
  05d55	03 d1		 add	 edx, ecx
  05d57	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05d5e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05d63	66 89 94 48 98
	61 00 00	 mov	 WORD PTR [rax+rcx*2+24984], dx
  05d6b	33 c0		 xor	 eax, eax
  05d6d	85 c0		 test	 eax, eax
  05d6f	75 a7		 jne	 SHORT $LN336@lzma_decod@2
$LN333@lzma_decod@2:
$LN332@lzma_decod@2:

; 712  : 				// The distance is rep0.
; 713  : 
; 714  : 	case SEQ_IS_REP0_LONG:
; 715  : 				rc_if_0(coder->is_rep0_long[state][pos_state],
; 716  : 						SEQ_IS_REP0_LONG) {

  05d71	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  05d79	73 5e		 jae	 SHORT $LN329@lzma_decod@2
  05d7b	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  05d83	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  05d88	75 14		 jne	 SHORT $LN328@lzma_decod@2
  05d8a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05d8f	c7 80 a0 6e 00
	00 33 00 00 00	 mov	 DWORD PTR [rax+28320], 51 ; 00000033H
  05d99	e9 82 22 00 00	 jmp	 $out$33200
$LN328@lzma_decod@2:
  05d9e	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  05da2	c1 e0 08	 shl	 eax, 8
  05da5	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05da9	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  05dad	c1 e2 08	 shl	 edx, 8
  05db0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  05db5	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  05dbd	48 03 c1	 add	 rax, rcx
  05dc0	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  05dc3	8b c2		 mov	 eax, edx
  05dc5	0b c1		 or	 eax, ecx
  05dc7	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05dcb	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  05dd0	48 83 c0 01	 add	 rax, 1
  05dd4	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN329@lzma_decod@2:
  05dd9	33 c0		 xor	 eax, eax
  05ddb	85 c0		 test	 eax, eax
  05ddd	75 92		 jne	 SHORT $LN332@lzma_decod@2
  05ddf	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  05de3	c1 ea 0b	 shr	 edx, 11
  05de6	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05ded	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  05df1	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05df6	48 8d 8c 08 e0
	61 00 00	 lea	 rcx, QWORD PTR [rax+rcx+25056]
  05dfe	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR pos_state$33181[rsp]
  05e05	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  05e09	8b c2		 mov	 eax, edx
  05e0b	0f af c1	 imul	 eax, ecx
  05e0e	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  05e15	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  05e1c	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  05e20	0f 83 3b 01 00
	00		 jae	 $LN327@lzma_decod@2
$LN326@lzma_decod@2:

; 717  : 					rc_update_0(coder->is_rep0_long[
; 718  : 							state][pos_state]);

  05e26	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  05e2d	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05e31	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05e38	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  05e3c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05e41	48 8d bc 08 e0
	61 00 00	 lea	 rdi, QWORD PTR [rax+rcx+25056]
  05e49	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR pos_state$33181[rsp]
  05e50	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05e57	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  05e5b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05e60	48 8d 8c 08 e0
	61 00 00	 lea	 rcx, QWORD PTR [rax+rcx+25056]
  05e68	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR pos_state$33181[rsp]
  05e6f	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  05e73	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  05e78	2b c1		 sub	 eax, ecx
  05e7a	c1 e8 05	 shr	 eax, 5
  05e7d	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  05e81	03 f8		 add	 edi, eax
  05e83	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR pos_state$33181[rsp]
  05e8a	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05e91	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  05e95	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05e9a	48 8d 84 08 e0
	61 00 00	 lea	 rax, QWORD PTR [rax+rcx+25056]
  05ea2	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  05ea6	33 c0		 xor	 eax, eax
  05ea8	85 c0		 test	 eax, eax
  05eaa	0f 85 76 ff ff
	ff		 jne	 $LN326@lzma_decod@2

; 719  : 
; 720  : 					update_short_rep(state);

  05eb0	83 bc 24 94 00
	00 00 07	 cmp	 DWORD PTR state$33168[rsp], 7
  05eb8	73 0d		 jae	 SHORT $LN1215@lzma_decod@2
  05eba	c7 84 24 74 01
	00 00 09 00 00
	00		 mov	 DWORD PTR tv3337[rsp], 9
  05ec5	eb 0b		 jmp	 SHORT $LN1216@lzma_decod@2
$LN1215@lzma_decod@2:
  05ec7	c7 84 24 74 01
	00 00 0b 00 00
	00		 mov	 DWORD PTR tv3337[rsp], 11
$LN1216@lzma_decod@2:
  05ed2	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv3337[rsp]
  05ed9	89 84 24 94 00
	00 00		 mov	 DWORD PTR state$33168[rsp], eax
$LN323@lzma_decod@2:

; 721  : 
; 722  : 	case SEQ_SHORTREP:
; 723  : 					if (unlikely(dict_put(&dict, dict_get(
; 724  : 							&dict, rep0)))) {

  05ee0	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  05ee4	48 3b 44 24 50	 cmp	 rax, QWORD PTR dict$33163[rsp+8]
  05ee9	73 0e		 jae	 SHORT $LN1249@lzma_decod@2
  05eeb	48 c7 84 24 78
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv670[rsp], 0
  05ef7	eb 0d		 jmp	 SHORT $LN1250@lzma_decod@2
$LN1249@lzma_decod@2:
  05ef9	48 8b 44 24 68	 mov	 rax, QWORD PTR dict$33163[rsp+32]
  05efe	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv670[rsp], rax
$LN1250@lzma_decod@2:
  05f06	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  05f0a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dict$33163[rsp+8]
  05f0f	48 2b c8	 sub	 rcx, rax
  05f12	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR tv670[rsp]
  05f1a	48 8d 4c 01 ff	 lea	 rcx, QWORD PTR [rcx+rax-1]
  05f1f	48 8b 44 24 48	 mov	 rax, QWORD PTR dict$33163[rsp]
  05f24	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  05f28	88 84 24 ea 00
	00 00		 mov	 BYTE PTR $T37358[rsp], al
  05f2f	0f b6 94 24 ea
	00 00 00	 movzx	 edx, BYTE PTR $T37358[rsp]
  05f37	48 8d 4c 24 48	 lea	 rcx, QWORD PTR dict$33163[rsp]
  05f3c	e8 00 00 00 00	 call	 dict_put
  05f41	0f b6 c0	 movzx	 eax, al
  05f44	85 c0		 test	 eax, eax
  05f46	74 14		 je	 SHORT $LN322@lzma_decod@2

; 725  : 						coder->sequence = SEQ_SHORTREP;

  05f48	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05f4d	c7 80 a0 6e 00
	00 32 00 00 00	 mov	 DWORD PTR [rax+28320], 50 ; 00000032H

; 726  : 						goto out;

  05f57	e9 c4 20 00 00	 jmp	 $out$33200
$LN322@lzma_decod@2:

; 727  : 					}
; 728  : 
; 729  : 					continue;

  05f5c	e9 f6 a3 ff ff	 jmp	 $LN1202@lzma_decod@2
$LN327@lzma_decod@2:
$LN321@lzma_decod@2:

; 730  : 				}
; 731  : 
; 732  : 				// Repeating more than one byte at
; 733  : 				// distance of rep0.
; 734  : 				rc_update_1(coder->is_rep0_long[
; 735  : 						state][pos_state]);

  05f61	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  05f68	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  05f6c	2b c1		 sub	 eax, ecx
  05f6e	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  05f72	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  05f79	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  05f7d	2b c1		 sub	 eax, ecx
  05f7f	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  05f83	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05f8a	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  05f8e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05f93	48 8d bc 08 e0
	61 00 00	 lea	 rdi, QWORD PTR [rax+rcx+25056]
  05f9b	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR pos_state$33181[rsp]
  05fa2	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05fa9	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  05fad	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05fb2	48 8d 8c 08 e0
	61 00 00	 lea	 rcx, QWORD PTR [rax+rcx+25056]
  05fba	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR pos_state$33181[rsp]
  05fc1	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  05fc5	c1 f8 05	 sar	 eax, 5
  05fc8	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  05fcc	2b f8		 sub	 edi, eax
  05fce	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR pos_state$33181[rsp]
  05fd5	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  05fdc	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  05fe0	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  05fe5	48 8d 84 08 e0
	61 00 00	 lea	 rax, QWORD PTR [rax+rcx+25056]
  05fed	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  05ff1	33 c0		 xor	 eax, eax
  05ff3	85 c0		 test	 eax, eax
  05ff5	0f 85 66 ff ff
	ff		 jne	 $LN321@lzma_decod@2

; 736  : 
; 737  : 			} else {

  05ffb	e9 c3 03 00 00	 jmp	 $LN318@lzma_decod@2
$LN337@lzma_decod@2:
$LN317@lzma_decod@2:

; 738  : 				rc_update_1(coder->is_rep0[state]);

  06000	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06007	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0600b	2b c1		 sub	 eax, ecx
  0600d	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06011	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06018	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  0601c	2b c1		 sub	 eax, ecx
  0601e	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06022	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR state$33168[rsp]
  06029	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  06030	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06035	0f b7 8c 48 98
	61 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+24984]
  0603d	c1 f9 05	 sar	 ecx, 5
  06040	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06045	0f b7 94 50 98
	61 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+24984]
  0604d	2b d1		 sub	 edx, ecx
  0604f	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  06056	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0605b	66 89 94 48 98
	61 00 00	 mov	 WORD PTR [rax+rcx*2+24984], dx
  06063	33 c0		 xor	 eax, eax
  06065	85 c0		 test	 eax, eax
  06067	75 97		 jne	 SHORT $LN317@lzma_decod@2
$LN314@lzma_decod@2:
$LN313@lzma_decod@2:

; 739  : 
; 740  : 	case SEQ_IS_REP1:
; 741  : 				// The distance is rep1, rep2 or rep3. Once
; 742  : 				// we find out which one of these three, it
; 743  : 				// is stored to rep0 and rep1, rep2 and rep3
; 744  : 				// are updated accordingly.
; 745  : 				rc_if_0(coder->is_rep1[state], SEQ_IS_REP1) {

  06069	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  06071	73 5e		 jae	 SHORT $LN310@lzma_decod@2
  06073	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0607b	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  06080	75 14		 jne	 SHORT $LN309@lzma_decod@2
  06082	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06087	c7 80 a0 6e 00
	00 34 00 00 00	 mov	 DWORD PTR [rax+28320], 52 ; 00000034H
  06091	e9 8a 1f 00 00	 jmp	 $out$33200
$LN309@lzma_decod@2:
  06096	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0609a	c1 e0 08	 shl	 eax, 8
  0609d	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  060a1	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  060a5	c1 e2 08	 shl	 edx, 8
  060a8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  060ad	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  060b5	48 03 c1	 add	 rax, rcx
  060b8	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  060bb	8b c2		 mov	 eax, edx
  060bd	0b c1		 or	 eax, ecx
  060bf	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  060c3	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  060c8	48 83 c0 01	 add	 rax, 1
  060cc	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN310@lzma_decod@2:
  060d1	33 c0		 xor	 eax, eax
  060d3	85 c0		 test	 eax, eax
  060d5	75 92		 jne	 SHORT $LN313@lzma_decod@2
  060d7	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  060db	c1 ea 0b	 shr	 edx, 11
  060de	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  060e5	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  060ea	0f b7 8c 48 b0
	61 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+25008]
  060f2	8b c2		 mov	 eax, edx
  060f4	0f af c1	 imul	 eax, ecx
  060f7	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  060fe	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06105	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  06109	73 7c		 jae	 SHORT $LN308@lzma_decod@2
$LN307@lzma_decod@2:

; 746  : 					rc_update_0(coder->is_rep1[state]);

  0610b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06112	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06116	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR state$33168[rsp]
  0611d	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  06124	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06129	0f b7 84 48 b0
	61 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+25008]
  06131	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  06136	2b c8		 sub	 ecx, eax
  06138	c1 e9 05	 shr	 ecx, 5
  0613b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06140	0f b7 94 50 b0
	61 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+25008]
  06148	03 d1		 add	 edx, ecx
  0614a	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  06151	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06156	66 89 94 48 b0
	61 00 00	 mov	 WORD PTR [rax+rcx*2+25008], dx
  0615e	33 c0		 xor	 eax, eax
  06160	85 c0		 test	 eax, eax
  06162	75 a7		 jne	 SHORT $LN307@lzma_decod@2

; 747  : 
; 748  : 				  {
; 749  : 					const uint32_t distance = rep1;

  06164	8b 44 24 2c	 mov	 eax, DWORD PTR rep1$33170[rsp]
  06168	89 84 24 d4 00
	00 00		 mov	 DWORD PTR distance$34106[rsp], eax

; 750  : 					rep1 = rep0;

  0616f	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  06173	89 44 24 2c	 mov	 DWORD PTR rep1$33170[rsp], eax

; 751  : 					rep0 = distance;

  06177	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR distance$34106[rsp]
  0617e	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax

; 752  : 				  }
; 753  : 
; 754  : 				} else {

  06182	e9 3c 02 00 00	 jmp	 $LN304@lzma_decod@2
$LN308@lzma_decod@2:
$LN303@lzma_decod@2:

; 755  : 					rc_update_1(coder->is_rep1[state]);

  06187	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0618e	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06192	2b c1		 sub	 eax, ecx
  06194	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06198	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0619f	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  061a3	2b c1		 sub	 eax, ecx
  061a5	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  061a9	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR state$33168[rsp]
  061b0	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  061b7	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  061bc	0f b7 8c 48 b0
	61 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+25008]
  061c4	c1 f9 05	 sar	 ecx, 5
  061c7	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  061cc	0f b7 94 50 b0
	61 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+25008]
  061d4	2b d1		 sub	 edx, ecx
  061d6	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  061dd	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  061e2	66 89 94 48 b0
	61 00 00	 mov	 WORD PTR [rax+rcx*2+25008], dx
  061ea	33 c0		 xor	 eax, eax
  061ec	85 c0		 test	 eax, eax
  061ee	75 97		 jne	 SHORT $LN303@lzma_decod@2
$LN300@lzma_decod@2:
$LN299@lzma_decod@2:

; 756  : 	case SEQ_IS_REP2:
; 757  : 					rc_if_0(coder->is_rep2[state],
; 758  : 							SEQ_IS_REP2) {

  061f0	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  061f8	73 5e		 jae	 SHORT $LN296@lzma_decod@2
  061fa	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  06202	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  06207	75 14		 jne	 SHORT $LN295@lzma_decod@2
  06209	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0620e	c7 80 a0 6e 00
	00 35 00 00 00	 mov	 DWORD PTR [rax+28320], 53 ; 00000035H
  06218	e9 03 1e 00 00	 jmp	 $out$33200
$LN295@lzma_decod@2:
  0621d	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06221	c1 e0 08	 shl	 eax, 8
  06224	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06228	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  0622c	c1 e2 08	 shl	 edx, 8
  0622f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  06234	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  0623c	48 03 c1	 add	 rax, rcx
  0623f	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  06242	8b c2		 mov	 eax, edx
  06244	0b c1		 or	 eax, ecx
  06246	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0624a	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  0624f	48 83 c0 01	 add	 rax, 1
  06253	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN296@lzma_decod@2:
  06258	33 c0		 xor	 eax, eax
  0625a	85 c0		 test	 eax, eax
  0625c	75 92		 jne	 SHORT $LN299@lzma_decod@2
  0625e	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  06262	c1 ea 0b	 shr	 edx, 11
  06265	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  0626c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06271	0f b7 8c 48 c8
	61 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+25032]
  06279	8b c2		 mov	 eax, edx
  0627b	0f af c1	 imul	 eax, ecx
  0627e	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  06285	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0628c	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  06290	0f 83 8a 00 00
	00		 jae	 $LN294@lzma_decod@2
$LN293@lzma_decod@2:

; 759  : 						rc_update_0(coder->is_rep2[
; 760  : 								state]);

  06296	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0629d	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  062a1	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR state$33168[rsp]
  062a8	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  062af	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  062b4	0f b7 84 48 c8
	61 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+25032]
  062bc	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  062c1	2b c8		 sub	 ecx, eax
  062c3	c1 e9 05	 shr	 ecx, 5
  062c6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  062cb	0f b7 94 50 c8
	61 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+25032]
  062d3	03 d1		 add	 edx, ecx
  062d5	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  062dc	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  062e1	66 89 94 48 c8
	61 00 00	 mov	 WORD PTR [rax+rcx*2+25032], dx
  062e9	33 c0		 xor	 eax, eax
  062eb	85 c0		 test	 eax, eax
  062ed	75 a7		 jne	 SHORT $LN293@lzma_decod@2

; 761  : 
; 762  : 					  {
; 763  : 						const uint32_t distance = rep2;

  062ef	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR rep2$33171[rsp]
  062f6	89 84 24 d8 00
	00 00		 mov	 DWORD PTR distance$34121[rsp], eax

; 764  : 						rep2 = rep1;

  062fd	8b 44 24 2c	 mov	 eax, DWORD PTR rep1$33170[rsp]
  06301	89 84 24 90 00
	00 00		 mov	 DWORD PTR rep2$33171[rsp], eax

; 765  : 						rep1 = rep0;

  06308	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  0630c	89 44 24 2c	 mov	 DWORD PTR rep1$33170[rsp], eax

; 766  : 						rep0 = distance;

  06310	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR distance$34121[rsp]
  06317	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax

; 767  : 					  }
; 768  : 
; 769  : 					} else {

  0631b	e9 a3 00 00 00	 jmp	 $LN290@lzma_decod@2
$LN294@lzma_decod@2:
$LN289@lzma_decod@2:

; 770  : 						rc_update_1(coder->is_rep2[
; 771  : 								state]);

  06320	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06327	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0632b	2b c1		 sub	 eax, ecx
  0632d	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06331	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06338	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  0633c	2b c1		 sub	 eax, ecx
  0633e	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06342	8b 94 24 94 00
	00 00		 mov	 edx, DWORD PTR state$33168[rsp]
  06349	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  06350	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06355	0f b7 8c 48 c8
	61 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+25032]
  0635d	c1 f9 05	 sar	 ecx, 5
  06360	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06365	0f b7 94 50 c8
	61 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+25032]
  0636d	2b d1		 sub	 edx, ecx
  0636f	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR state$33168[rsp]
  06376	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0637b	66 89 94 48 c8
	61 00 00	 mov	 WORD PTR [rax+rcx*2+25032], dx
  06383	33 c0		 xor	 eax, eax
  06385	85 c0		 test	 eax, eax
  06387	75 97		 jne	 SHORT $LN289@lzma_decod@2

; 772  : 
; 773  : 					  {
; 774  : 						const uint32_t distance = rep3;

  06389	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR rep3$33172[rsp]
  06390	89 84 24 dc 00
	00 00		 mov	 DWORD PTR distance$34126[rsp], eax

; 775  : 						rep3 = rep2;

  06397	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR rep2$33171[rsp]
  0639e	89 84 24 80 00
	00 00		 mov	 DWORD PTR rep3$33172[rsp], eax

; 776  : 						rep2 = rep1;

  063a5	8b 44 24 2c	 mov	 eax, DWORD PTR rep1$33170[rsp]
  063a9	89 84 24 90 00
	00 00		 mov	 DWORD PTR rep2$33171[rsp], eax

; 777  : 						rep1 = rep0;

  063b0	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  063b4	89 44 24 2c	 mov	 DWORD PTR rep1$33170[rsp], eax

; 778  : 						rep0 = distance;

  063b8	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR distance$34126[rsp]
  063bf	89 44 24 40	 mov	 DWORD PTR rep0$33169[rsp], eax
$LN290@lzma_decod@2:
$LN304@lzma_decod@2:
$LN318@lzma_decod@2:

; 779  : 					  }
; 780  : 					}
; 781  : 				}
; 782  : 			}
; 783  : 
; 784  : 			update_long_rep(state);

  063c3	83 bc 24 94 00
	00 00 07	 cmp	 DWORD PTR state$33168[rsp], 7
  063cb	73 0d		 jae	 SHORT $LN1217@lzma_decod@2
  063cd	c7 84 24 80 01
	00 00 08 00 00
	00		 mov	 DWORD PTR tv3511[rsp], 8
  063d8	eb 0b		 jmp	 SHORT $LN1218@lzma_decod@2
$LN1217@lzma_decod@2:
  063da	c7 84 24 80 01
	00 00 0b 00 00
	00		 mov	 DWORD PTR tv3511[rsp], 11
$LN1218@lzma_decod@2:
  063e5	8b 84 24 80 01
	00 00		 mov	 eax, DWORD PTR tv3511[rsp]
  063ec	89 84 24 94 00
	00 00		 mov	 DWORD PTR state$33168[rsp], eax
$LN286@lzma_decod@2:

; 785  : 
; 786  : 			// Decode the length of the repeated match.
; 787  : 			len_decode(len, coder->rep_len_decoder,
; 788  : 					pos_state, SEQ_REP_LEN);

  063f3	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR symbol$33175[rsp], 1
$LN283@lzma_decod@2:
$LN282@lzma_decod@2:
  063fe	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  06406	73 5e		 jae	 SHORT $LN279@lzma_decod@2
  06408	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  06410	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  06415	75 14		 jne	 SHORT $LN278@lzma_decod@2
  06417	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0641c	c7 80 a0 6e 00
	00 36 00 00 00	 mov	 DWORD PTR [rax+28320], 54 ; 00000036H
  06426	e9 f5 1b 00 00	 jmp	 $out$33200
$LN278@lzma_decod@2:
  0642b	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0642f	c1 e0 08	 shl	 eax, 8
  06432	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06436	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  0643a	c1 e2 08	 shl	 edx, 8
  0643d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  06442	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  0644a	48 03 c1	 add	 rax, rcx
  0644d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  06450	8b c2		 mov	 eax, edx
  06452	0b c1		 or	 eax, ecx
  06454	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06458	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  0645d	48 83 c0 01	 add	 rax, 1
  06461	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN279@lzma_decod@2:
  06466	33 c0		 xor	 eax, eax
  06468	85 c0		 test	 eax, eax
  0646a	75 92		 jne	 SHORT $LN282@lzma_decod@2
  0646c	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  06470	c1 ea 0b	 shr	 edx, 11
  06473	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06478	0f b7 88 68 6a
	00 00		 movzx	 ecx, WORD PTR [rax+27240]
  0647f	8b c2		 mov	 eax, edx
  06481	0f af c1	 imul	 eax, ecx
  06484	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0648b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06492	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  06496	0f 83 75 06 00
	00		 jae	 $LN277@lzma_decod@2
$LN276@lzma_decod@2:
  0649c	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  064a3	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  064a7	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  064ac	0f b7 80 68 6a
	00 00		 movzx	 eax, WORD PTR [rax+27240]
  064b3	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  064b8	2b d0		 sub	 edx, eax
  064ba	c1 ea 05	 shr	 edx, 5
  064bd	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  064c2	0f b7 88 68 6a
	00 00		 movzx	 ecx, WORD PTR [rax+27240]
  064c9	03 ca		 add	 ecx, edx
  064cb	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  064d0	66 89 88 68 6a
	00 00		 mov	 WORD PTR [rax+27240], cx
  064d7	33 c0		 xor	 eax, eax
  064d9	85 c0		 test	 eax, eax
  064db	75 bf		 jne	 SHORT $LN276@lzma_decod@2
$LN273@lzma_decod@2:
$LN272@lzma_decod@2:
$LN269@lzma_decod@2:
  064dd	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  064e5	73 5e		 jae	 SHORT $LN266@lzma_decod@2
  064e7	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  064ef	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  064f4	75 14		 jne	 SHORT $LN265@lzma_decod@2
  064f6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  064fb	c7 80 a0 6e 00
	00 37 00 00 00	 mov	 DWORD PTR [rax+28320], 55 ; 00000037H
  06505	e9 16 1b 00 00	 jmp	 $out$33200
$LN265@lzma_decod@2:
  0650a	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0650e	c1 e0 08	 shl	 eax, 8
  06511	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06515	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  06519	c1 e2 08	 shl	 edx, 8
  0651c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  06521	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  06529	48 03 c1	 add	 rax, rcx
  0652c	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0652f	8b c2		 mov	 eax, edx
  06531	0b c1		 or	 eax, ecx
  06533	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06537	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  0653c	48 83 c0 01	 add	 rax, 1
  06540	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN266@lzma_decod@2:
  06545	33 c0		 xor	 eax, eax
  06547	85 c0		 test	 eax, eax
  06549	75 92		 jne	 SHORT $LN269@lzma_decod@2
  0654b	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  0654f	c1 ea 0b	 shr	 edx, 11
  06552	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06559	48 6b c9 10	 imul	 rcx, 16
  0655d	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06562	48 8d 8c 08 6c
	6a 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27244]
  0656a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06571	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  06575	8b c2		 mov	 eax, edx
  06577	0f af c1	 imul	 eax, ecx
  0657a	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  06581	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06588	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  0658c	0f 83 9f 00 00
	00		 jae	 $LN264@lzma_decod@2
$LN263@lzma_decod@2:
  06592	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06599	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0659d	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  065a4	48 6b c9 10	 imul	 rcx, 16
  065a8	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  065ad	48 8d bc 08 6c
	6a 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27244]
  065b5	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  065bc	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  065c3	48 6b c9 10	 imul	 rcx, 16
  065c7	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  065cc	48 8d 8c 08 6c
	6a 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27244]
  065d4	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  065db	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  065df	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  065e4	2b c1		 sub	 eax, ecx
  065e6	c1 e8 05	 shr	 eax, 5
  065e9	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  065ed	03 f8		 add	 edi, eax
  065ef	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  065f6	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  065fd	48 6b c9 10	 imul	 rcx, 16
  06601	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06606	48 8d 84 08 6c
	6a 00 00	 lea	 rax, QWORD PTR [rax+rcx+27244]
  0660e	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  06612	33 c0		 xor	 eax, eax
  06614	85 c0		 test	 eax, eax
  06616	0f 85 76 ff ff
	ff		 jne	 $LN263@lzma_decod@2
  0661c	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06623	03 c0		 add	 eax, eax
  06625	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  0662c	e9 ac 00 00 00	 jmp	 $LN260@lzma_decod@2
$LN264@lzma_decod@2:
$LN259@lzma_decod@2:
  06631	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06638	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0663c	2b c1		 sub	 eax, ecx
  0663e	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06642	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06649	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  0664d	2b c1		 sub	 eax, ecx
  0664f	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06653	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  0665a	48 6b c9 10	 imul	 rcx, 16
  0665e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06663	48 8d bc 08 6c
	6a 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27244]
  0666b	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06672	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06679	48 6b c9 10	 imul	 rcx, 16
  0667d	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06682	48 8d 8c 08 6c
	6a 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27244]
  0668a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06691	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  06695	c1 f8 05	 sar	 eax, 5
  06698	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  0669c	2b f8		 sub	 edi, eax
  0669e	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  066a5	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  066ac	48 6b c9 10	 imul	 rcx, 16
  066b0	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  066b5	48 8d 84 08 6c
	6a 00 00	 lea	 rax, QWORD PTR [rax+rcx+27244]
  066bd	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  066c1	33 c0		 xor	 eax, eax
  066c3	85 c0		 test	 eax, eax
  066c5	0f 85 66 ff ff
	ff		 jne	 $LN259@lzma_decod@2
  066cb	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  066d2	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  066d6	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN260@lzma_decod@2:
  066dd	33 c0		 xor	 eax, eax
  066df	85 c0		 test	 eax, eax
  066e1	0f 85 f6 fd ff
	ff		 jne	 $LN272@lzma_decod@2
$LN256@lzma_decod@2:
$LN255@lzma_decod@2:
$LN252@lzma_decod@2:
  066e7	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  066ef	73 5e		 jae	 SHORT $LN249@lzma_decod@2
  066f1	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  066f9	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  066fe	75 14		 jne	 SHORT $LN248@lzma_decod@2
  06700	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06705	c7 80 a0 6e 00
	00 38 00 00 00	 mov	 DWORD PTR [rax+28320], 56 ; 00000038H
  0670f	e9 0c 19 00 00	 jmp	 $out$33200
$LN248@lzma_decod@2:
  06714	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06718	c1 e0 08	 shl	 eax, 8
  0671b	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0671f	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  06723	c1 e2 08	 shl	 edx, 8
  06726	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0672b	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  06733	48 03 c1	 add	 rax, rcx
  06736	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  06739	8b c2		 mov	 eax, edx
  0673b	0b c1		 or	 eax, ecx
  0673d	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06741	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  06746	48 83 c0 01	 add	 rax, 1
  0674a	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN249@lzma_decod@2:
  0674f	33 c0		 xor	 eax, eax
  06751	85 c0		 test	 eax, eax
  06753	75 92		 jne	 SHORT $LN252@lzma_decod@2
  06755	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  06759	c1 ea 0b	 shr	 edx, 11
  0675c	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06763	48 6b c9 10	 imul	 rcx, 16
  06767	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0676c	48 8d 8c 08 6c
	6a 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27244]
  06774	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0677b	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  0677f	8b c2		 mov	 eax, edx
  06781	0f af c1	 imul	 eax, ecx
  06784	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0678b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06792	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  06796	0f 83 9f 00 00
	00		 jae	 $LN247@lzma_decod@2
$LN246@lzma_decod@2:
  0679c	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  067a3	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  067a7	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  067ae	48 6b c9 10	 imul	 rcx, 16
  067b2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  067b7	48 8d bc 08 6c
	6a 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27244]
  067bf	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  067c6	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  067cd	48 6b c9 10	 imul	 rcx, 16
  067d1	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  067d6	48 8d 8c 08 6c
	6a 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27244]
  067de	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  067e5	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  067e9	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  067ee	2b c1		 sub	 eax, ecx
  067f0	c1 e8 05	 shr	 eax, 5
  067f3	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  067f7	03 f8		 add	 edi, eax
  067f9	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06800	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06807	48 6b c9 10	 imul	 rcx, 16
  0680b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06810	48 8d 84 08 6c
	6a 00 00	 lea	 rax, QWORD PTR [rax+rcx+27244]
  06818	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  0681c	33 c0		 xor	 eax, eax
  0681e	85 c0		 test	 eax, eax
  06820	0f 85 76 ff ff
	ff		 jne	 $LN246@lzma_decod@2
  06826	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0682d	03 c0		 add	 eax, eax
  0682f	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  06836	e9 ac 00 00 00	 jmp	 $LN243@lzma_decod@2
$LN247@lzma_decod@2:
$LN242@lzma_decod@2:
  0683b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06842	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06846	2b c1		 sub	 eax, ecx
  06848	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0684c	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06853	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  06857	2b c1		 sub	 eax, ecx
  06859	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0685d	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06864	48 6b c9 10	 imul	 rcx, 16
  06868	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0686d	48 8d bc 08 6c
	6a 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27244]
  06875	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0687c	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06883	48 6b c9 10	 imul	 rcx, 16
  06887	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0688c	48 8d 8c 08 6c
	6a 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27244]
  06894	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0689b	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0689f	c1 f8 05	 sar	 eax, 5
  068a2	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  068a6	2b f8		 sub	 edi, eax
  068a8	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  068af	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  068b6	48 6b c9 10	 imul	 rcx, 16
  068ba	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  068bf	48 8d 84 08 6c
	6a 00 00	 lea	 rax, QWORD PTR [rax+rcx+27244]
  068c7	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  068cb	33 c0		 xor	 eax, eax
  068cd	85 c0		 test	 eax, eax
  068cf	0f 85 66 ff ff
	ff		 jne	 $LN242@lzma_decod@2
  068d5	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  068dc	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  068e0	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN243@lzma_decod@2:
  068e7	33 c0		 xor	 eax, eax
  068e9	85 c0		 test	 eax, eax
  068eb	0f 85 f6 fd ff
	ff		 jne	 $LN255@lzma_decod@2
$LN239@lzma_decod@2:
$LN238@lzma_decod@2:
$LN235@lzma_decod@2:
  068f1	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  068f9	73 5e		 jae	 SHORT $LN232@lzma_decod@2
  068fb	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  06903	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  06908	75 14		 jne	 SHORT $LN231@lzma_decod@2
  0690a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0690f	c7 80 a0 6e 00
	00 39 00 00 00	 mov	 DWORD PTR [rax+28320], 57 ; 00000039H
  06919	e9 02 17 00 00	 jmp	 $out$33200
$LN231@lzma_decod@2:
  0691e	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06922	c1 e0 08	 shl	 eax, 8
  06925	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06929	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  0692d	c1 e2 08	 shl	 edx, 8
  06930	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  06935	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  0693d	48 03 c1	 add	 rax, rcx
  06940	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  06943	8b c2		 mov	 eax, edx
  06945	0b c1		 or	 eax, ecx
  06947	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  0694b	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  06950	48 83 c0 01	 add	 rax, 1
  06954	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN232@lzma_decod@2:
  06959	33 c0		 xor	 eax, eax
  0695b	85 c0		 test	 eax, eax
  0695d	75 92		 jne	 SHORT $LN235@lzma_decod@2
  0695f	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  06963	c1 ea 0b	 shr	 edx, 11
  06966	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  0696d	48 6b c9 10	 imul	 rcx, 16
  06971	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06976	48 8d 8c 08 6c
	6a 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27244]
  0697e	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06985	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  06989	8b c2		 mov	 eax, edx
  0698b	0f af c1	 imul	 eax, ecx
  0698e	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  06995	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0699c	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  069a0	0f 83 9f 00 00
	00		 jae	 $LN230@lzma_decod@2
$LN229@lzma_decod@2:
  069a6	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  069ad	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  069b1	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  069b8	48 6b c9 10	 imul	 rcx, 16
  069bc	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  069c1	48 8d bc 08 6c
	6a 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27244]
  069c9	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  069d0	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  069d7	48 6b c9 10	 imul	 rcx, 16
  069db	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  069e0	48 8d 8c 08 6c
	6a 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27244]
  069e8	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  069ef	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  069f3	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  069f8	2b c1		 sub	 eax, ecx
  069fa	c1 e8 05	 shr	 eax, 5
  069fd	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  06a01	03 f8		 add	 edi, eax
  06a03	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06a0a	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06a11	48 6b c9 10	 imul	 rcx, 16
  06a15	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06a1a	48 8d 84 08 6c
	6a 00 00	 lea	 rax, QWORD PTR [rax+rcx+27244]
  06a22	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  06a26	33 c0		 xor	 eax, eax
  06a28	85 c0		 test	 eax, eax
  06a2a	0f 85 76 ff ff
	ff		 jne	 $LN229@lzma_decod@2
  06a30	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06a37	03 c0		 add	 eax, eax
  06a39	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  06a40	e9 ac 00 00 00	 jmp	 $LN226@lzma_decod@2
$LN230@lzma_decod@2:
$LN225@lzma_decod@2:
  06a45	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06a4c	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06a50	2b c1		 sub	 eax, ecx
  06a52	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06a56	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06a5d	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  06a61	2b c1		 sub	 eax, ecx
  06a63	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06a67	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06a6e	48 6b c9 10	 imul	 rcx, 16
  06a72	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06a77	48 8d bc 08 6c
	6a 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27244]
  06a7f	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06a86	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06a8d	48 6b c9 10	 imul	 rcx, 16
  06a91	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06a96	48 8d 8c 08 6c
	6a 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27244]
  06a9e	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06aa5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  06aa9	c1 f8 05	 sar	 eax, 5
  06aac	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  06ab0	2b f8		 sub	 edi, eax
  06ab2	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06ab9	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06ac0	48 6b c9 10	 imul	 rcx, 16
  06ac4	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06ac9	48 8d 84 08 6c
	6a 00 00	 lea	 rax, QWORD PTR [rax+rcx+27244]
  06ad1	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  06ad5	33 c0		 xor	 eax, eax
  06ad7	85 c0		 test	 eax, eax
  06ad9	0f 85 66 ff ff
	ff		 jne	 $LN225@lzma_decod@2
  06adf	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06ae6	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  06aea	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN226@lzma_decod@2:
  06af1	33 c0		 xor	 eax, eax
  06af3	85 c0		 test	 eax, eax
  06af5	0f 85 f6 fd ff
	ff		 jne	 $LN238@lzma_decod@2
  06afb	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06b02	83 e8 06	 sub	 eax, 6
  06b05	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
  06b0c	e9 58 14 00 00	 jmp	 $LN222@lzma_decod@2
$LN277@lzma_decod@2:
$LN221@lzma_decod@2:
  06b11	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06b18	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06b1c	2b c1		 sub	 eax, ecx
  06b1e	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06b22	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06b29	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  06b2d	2b c1		 sub	 eax, ecx
  06b2f	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06b33	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06b38	0f b7 90 68 6a
	00 00		 movzx	 edx, WORD PTR [rax+27240]
  06b3f	c1 fa 05	 sar	 edx, 5
  06b42	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06b47	0f b7 88 68 6a
	00 00		 movzx	 ecx, WORD PTR [rax+27240]
  06b4e	2b ca		 sub	 ecx, edx
  06b50	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06b55	66 89 88 68 6a
	00 00		 mov	 WORD PTR [rax+27240], cx
  06b5c	33 c0		 xor	 eax, eax
  06b5e	85 c0		 test	 eax, eax
  06b60	75 af		 jne	 SHORT $LN221@lzma_decod@2
$LN218@lzma_decod@2:
$LN217@lzma_decod@2:
  06b62	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  06b6a	73 5e		 jae	 SHORT $LN214@lzma_decod@2
  06b6c	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  06b74	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  06b79	75 14		 jne	 SHORT $LN213@lzma_decod@2
  06b7b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06b80	c7 80 a0 6e 00
	00 3a 00 00 00	 mov	 DWORD PTR [rax+28320], 58 ; 0000003aH
  06b8a	e9 91 14 00 00	 jmp	 $out$33200
$LN213@lzma_decod@2:
  06b8f	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06b93	c1 e0 08	 shl	 eax, 8
  06b96	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06b9a	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  06b9e	c1 e2 08	 shl	 edx, 8
  06ba1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  06ba6	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  06bae	48 03 c1	 add	 rax, rcx
  06bb1	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  06bb4	8b c2		 mov	 eax, edx
  06bb6	0b c1		 or	 eax, ecx
  06bb8	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06bbc	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  06bc1	48 83 c0 01	 add	 rax, 1
  06bc5	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN214@lzma_decod@2:
  06bca	33 c0		 xor	 eax, eax
  06bcc	85 c0		 test	 eax, eax
  06bce	75 92		 jne	 SHORT $LN217@lzma_decod@2
  06bd0	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  06bd4	c1 ea 0b	 shr	 edx, 11
  06bd7	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06bdc	0f b7 88 6a 6a
	00 00		 movzx	 ecx, WORD PTR [rax+27242]
  06be3	8b c2		 mov	 eax, edx
  06be5	0f af c1	 imul	 eax, ecx
  06be8	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  06bef	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06bf6	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  06bfa	0f 83 75 06 00
	00		 jae	 $LN212@lzma_decod@2
$LN211@lzma_decod@2:
  06c00	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06c07	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06c0b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06c10	0f b7 80 6a 6a
	00 00		 movzx	 eax, WORD PTR [rax+27242]
  06c17	ba 00 08 00 00	 mov	 edx, 2048		; 00000800H
  06c1c	2b d0		 sub	 edx, eax
  06c1e	c1 ea 05	 shr	 edx, 5
  06c21	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06c26	0f b7 88 6a 6a
	00 00		 movzx	 ecx, WORD PTR [rax+27242]
  06c2d	03 ca		 add	 ecx, edx
  06c2f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06c34	66 89 88 6a 6a
	00 00		 mov	 WORD PTR [rax+27242], cx
  06c3b	33 c0		 xor	 eax, eax
  06c3d	85 c0		 test	 eax, eax
  06c3f	75 bf		 jne	 SHORT $LN211@lzma_decod@2
$LN208@lzma_decod@2:
$LN207@lzma_decod@2:
$LN204@lzma_decod@2:
  06c41	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  06c49	73 5e		 jae	 SHORT $LN201@lzma_decod@2
  06c4b	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  06c53	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  06c58	75 14		 jne	 SHORT $LN200@lzma_decod@2
  06c5a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06c5f	c7 80 a0 6e 00
	00 3b 00 00 00	 mov	 DWORD PTR [rax+28320], 59 ; 0000003bH
  06c69	e9 b2 13 00 00	 jmp	 $out$33200
$LN200@lzma_decod@2:
  06c6e	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06c72	c1 e0 08	 shl	 eax, 8
  06c75	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06c79	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  06c7d	c1 e2 08	 shl	 edx, 8
  06c80	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  06c85	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  06c8d	48 03 c1	 add	 rax, rcx
  06c90	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  06c93	8b c2		 mov	 eax, edx
  06c95	0b c1		 or	 eax, ecx
  06c97	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06c9b	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  06ca0	48 83 c0 01	 add	 rax, 1
  06ca4	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN201@lzma_decod@2:
  06ca9	33 c0		 xor	 eax, eax
  06cab	85 c0		 test	 eax, eax
  06cad	75 92		 jne	 SHORT $LN204@lzma_decod@2
  06caf	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  06cb3	c1 ea 0b	 shr	 edx, 11
  06cb6	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06cbd	48 6b c9 10	 imul	 rcx, 16
  06cc1	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06cc6	48 8d 8c 08 6c
	6b 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27500]
  06cce	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06cd5	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  06cd9	8b c2		 mov	 eax, edx
  06cdb	0f af c1	 imul	 eax, ecx
  06cde	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  06ce5	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06cec	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  06cf0	0f 83 9f 00 00
	00		 jae	 $LN199@lzma_decod@2
$LN198@lzma_decod@2:
  06cf6	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06cfd	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06d01	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06d08	48 6b c9 10	 imul	 rcx, 16
  06d0c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06d11	48 8d bc 08 6c
	6b 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27500]
  06d19	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06d20	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06d27	48 6b c9 10	 imul	 rcx, 16
  06d2b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06d30	48 8d 8c 08 6c
	6b 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27500]
  06d38	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06d3f	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  06d43	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  06d48	2b c1		 sub	 eax, ecx
  06d4a	c1 e8 05	 shr	 eax, 5
  06d4d	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  06d51	03 f8		 add	 edi, eax
  06d53	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06d5a	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06d61	48 6b c9 10	 imul	 rcx, 16
  06d65	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06d6a	48 8d 84 08 6c
	6b 00 00	 lea	 rax, QWORD PTR [rax+rcx+27500]
  06d72	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  06d76	33 c0		 xor	 eax, eax
  06d78	85 c0		 test	 eax, eax
  06d7a	0f 85 76 ff ff
	ff		 jne	 $LN198@lzma_decod@2
  06d80	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06d87	03 c0		 add	 eax, eax
  06d89	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  06d90	e9 ac 00 00 00	 jmp	 $LN195@lzma_decod@2
$LN199@lzma_decod@2:
$LN194@lzma_decod@2:
  06d95	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06d9c	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06da0	2b c1		 sub	 eax, ecx
  06da2	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06da6	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06dad	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  06db1	2b c1		 sub	 eax, ecx
  06db3	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06db7	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06dbe	48 6b c9 10	 imul	 rcx, 16
  06dc2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06dc7	48 8d bc 08 6c
	6b 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27500]
  06dcf	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06dd6	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06ddd	48 6b c9 10	 imul	 rcx, 16
  06de1	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06de6	48 8d 8c 08 6c
	6b 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27500]
  06dee	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06df5	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  06df9	c1 f8 05	 sar	 eax, 5
  06dfc	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  06e00	2b f8		 sub	 edi, eax
  06e02	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06e09	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06e10	48 6b c9 10	 imul	 rcx, 16
  06e14	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06e19	48 8d 84 08 6c
	6b 00 00	 lea	 rax, QWORD PTR [rax+rcx+27500]
  06e21	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  06e25	33 c0		 xor	 eax, eax
  06e27	85 c0		 test	 eax, eax
  06e29	0f 85 66 ff ff
	ff		 jne	 $LN194@lzma_decod@2
  06e2f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06e36	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  06e3a	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN195@lzma_decod@2:
  06e41	33 c0		 xor	 eax, eax
  06e43	85 c0		 test	 eax, eax
  06e45	0f 85 f6 fd ff
	ff		 jne	 $LN207@lzma_decod@2
$LN191@lzma_decod@2:
$LN190@lzma_decod@2:
$LN187@lzma_decod@2:
  06e4b	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  06e53	73 5e		 jae	 SHORT $LN184@lzma_decod@2
  06e55	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  06e5d	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  06e62	75 14		 jne	 SHORT $LN183@lzma_decod@2
  06e64	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06e69	c7 80 a0 6e 00
	00 3c 00 00 00	 mov	 DWORD PTR [rax+28320], 60 ; 0000003cH
  06e73	e9 a8 11 00 00	 jmp	 $out$33200
$LN183@lzma_decod@2:
  06e78	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06e7c	c1 e0 08	 shl	 eax, 8
  06e7f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06e83	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  06e87	c1 e2 08	 shl	 edx, 8
  06e8a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  06e8f	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  06e97	48 03 c1	 add	 rax, rcx
  06e9a	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  06e9d	8b c2		 mov	 eax, edx
  06e9f	0b c1		 or	 eax, ecx
  06ea1	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06ea5	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  06eaa	48 83 c0 01	 add	 rax, 1
  06eae	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN184@lzma_decod@2:
  06eb3	33 c0		 xor	 eax, eax
  06eb5	85 c0		 test	 eax, eax
  06eb7	75 92		 jne	 SHORT $LN187@lzma_decod@2
  06eb9	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  06ebd	c1 ea 0b	 shr	 edx, 11
  06ec0	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06ec7	48 6b c9 10	 imul	 rcx, 16
  06ecb	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06ed0	48 8d 8c 08 6c
	6b 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27500]
  06ed8	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06edf	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  06ee3	8b c2		 mov	 eax, edx
  06ee5	0f af c1	 imul	 eax, ecx
  06ee8	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  06eef	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06ef6	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  06efa	0f 83 9f 00 00
	00		 jae	 $LN182@lzma_decod@2
$LN181@lzma_decod@2:
  06f00	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  06f07	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06f0b	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06f12	48 6b c9 10	 imul	 rcx, 16
  06f16	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06f1b	48 8d bc 08 6c
	6b 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27500]
  06f23	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06f2a	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06f31	48 6b c9 10	 imul	 rcx, 16
  06f35	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06f3a	48 8d 8c 08 6c
	6b 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27500]
  06f42	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06f49	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  06f4d	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  06f52	2b c1		 sub	 eax, ecx
  06f54	c1 e8 05	 shr	 eax, 5
  06f57	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  06f5b	03 f8		 add	 edi, eax
  06f5d	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06f64	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06f6b	48 6b c9 10	 imul	 rcx, 16
  06f6f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06f74	48 8d 84 08 6c
	6b 00 00	 lea	 rax, QWORD PTR [rax+rcx+27500]
  06f7c	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  06f80	33 c0		 xor	 eax, eax
  06f82	85 c0		 test	 eax, eax
  06f84	0f 85 76 ff ff
	ff		 jne	 $LN181@lzma_decod@2
  06f8a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06f91	03 c0		 add	 eax, eax
  06f93	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  06f9a	e9 ac 00 00 00	 jmp	 $LN178@lzma_decod@2
$LN182@lzma_decod@2:
$LN177@lzma_decod@2:
  06f9f	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06fa6	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  06faa	2b c1		 sub	 eax, ecx
  06fac	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  06fb0	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  06fb7	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  06fbb	2b c1		 sub	 eax, ecx
  06fbd	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  06fc1	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06fc8	48 6b c9 10	 imul	 rcx, 16
  06fcc	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06fd1	48 8d bc 08 6c
	6b 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27500]
  06fd9	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  06fe0	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  06fe7	48 6b c9 10	 imul	 rcx, 16
  06feb	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  06ff0	48 8d 8c 08 6c
	6b 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27500]
  06ff8	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  06fff	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  07003	c1 f8 05	 sar	 eax, 5
  07006	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  0700a	2b f8		 sub	 edi, eax
  0700c	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  07013	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  0701a	48 6b c9 10	 imul	 rcx, 16
  0701e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07023	48 8d 84 08 6c
	6b 00 00	 lea	 rax, QWORD PTR [rax+rcx+27500]
  0702b	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  0702f	33 c0		 xor	 eax, eax
  07031	85 c0		 test	 eax, eax
  07033	0f 85 66 ff ff
	ff		 jne	 $LN177@lzma_decod@2
  07039	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07040	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  07044	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN178@lzma_decod@2:
  0704b	33 c0		 xor	 eax, eax
  0704d	85 c0		 test	 eax, eax
  0704f	0f 85 f6 fd ff
	ff		 jne	 $LN190@lzma_decod@2
$LN174@lzma_decod@2:
$LN173@lzma_decod@2:
$LN170@lzma_decod@2:
  07055	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  0705d	73 5e		 jae	 SHORT $LN167@lzma_decod@2
  0705f	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  07067	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  0706c	75 14		 jne	 SHORT $LN166@lzma_decod@2
  0706e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07073	c7 80 a0 6e 00
	00 3d 00 00 00	 mov	 DWORD PTR [rax+28320], 61 ; 0000003dH
  0707d	e9 9e 0f 00 00	 jmp	 $out$33200
$LN166@lzma_decod@2:
  07082	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07086	c1 e0 08	 shl	 eax, 8
  07089	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0708d	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  07091	c1 e2 08	 shl	 edx, 8
  07094	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  07099	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  070a1	48 03 c1	 add	 rax, rcx
  070a4	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  070a7	8b c2		 mov	 eax, edx
  070a9	0b c1		 or	 eax, ecx
  070ab	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  070af	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  070b4	48 83 c0 01	 add	 rax, 1
  070b8	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN167@lzma_decod@2:
  070bd	33 c0		 xor	 eax, eax
  070bf	85 c0		 test	 eax, eax
  070c1	75 92		 jne	 SHORT $LN170@lzma_decod@2
  070c3	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  070c7	c1 ea 0b	 shr	 edx, 11
  070ca	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  070d1	48 6b c9 10	 imul	 rcx, 16
  070d5	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  070da	48 8d 8c 08 6c
	6b 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27500]
  070e2	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  070e9	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  070ed	8b c2		 mov	 eax, edx
  070ef	0f af c1	 imul	 eax, ecx
  070f2	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  070f9	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07100	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  07104	0f 83 9f 00 00
	00		 jae	 $LN165@lzma_decod@2
$LN164@lzma_decod@2:
  0710a	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07111	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07115	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  0711c	48 6b c9 10	 imul	 rcx, 16
  07120	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07125	48 8d bc 08 6c
	6b 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27500]
  0712d	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  07134	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  0713b	48 6b c9 10	 imul	 rcx, 16
  0713f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07144	48 8d 8c 08 6c
	6b 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27500]
  0714c	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07153	0f b7 0c 41	 movzx	 ecx, WORD PTR [rcx+rax*2]
  07157	b8 00 08 00 00	 mov	 eax, 2048		; 00000800H
  0715c	2b c1		 sub	 eax, ecx
  0715e	c1 e8 05	 shr	 eax, 5
  07161	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  07165	03 f8		 add	 edi, eax
  07167	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0716e	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  07175	48 6b c9 10	 imul	 rcx, 16
  07179	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0717e	48 8d 84 08 6c
	6b 00 00	 lea	 rax, QWORD PTR [rax+rcx+27500]
  07186	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  0718a	33 c0		 xor	 eax, eax
  0718c	85 c0		 test	 eax, eax
  0718e	0f 85 76 ff ff
	ff		 jne	 $LN164@lzma_decod@2
  07194	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0719b	03 c0		 add	 eax, eax
  0719d	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  071a4	e9 ac 00 00 00	 jmp	 $LN161@lzma_decod@2
$LN165@lzma_decod@2:
$LN160@lzma_decod@2:
  071a9	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  071b0	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  071b4	2b c1		 sub	 eax, ecx
  071b6	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  071ba	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  071c1	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  071c5	2b c1		 sub	 eax, ecx
  071c7	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  071cb	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  071d2	48 6b c9 10	 imul	 rcx, 16
  071d6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  071db	48 8d bc 08 6c
	6b 00 00	 lea	 rdi, QWORD PTR [rax+rcx+27500]
  071e3	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  071ea	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  071f1	48 6b c9 10	 imul	 rcx, 16
  071f5	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  071fa	48 8d 8c 08 6c
	6b 00 00	 lea	 rcx, QWORD PTR [rax+rcx+27500]
  07202	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07209	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0720d	c1 f8 05	 sar	 eax, 5
  07210	0f b7 3c 57	 movzx	 edi, WORD PTR [rdi+rdx*2]
  07214	2b f8		 sub	 edi, eax
  07216	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0721d	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR pos_state$33181[rsp]
  07224	48 6b c9 10	 imul	 rcx, 16
  07228	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0722d	48 8d 84 08 6c
	6b 00 00	 lea	 rax, QWORD PTR [rax+rcx+27500]
  07235	66 89 3c 50	 mov	 WORD PTR [rax+rdx*2], di
  07239	33 c0		 xor	 eax, eax
  0723b	85 c0		 test	 eax, eax
  0723d	0f 85 66 ff ff
	ff		 jne	 $LN160@lzma_decod@2
  07243	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0724a	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0724e	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN161@lzma_decod@2:
  07255	33 c0		 xor	 eax, eax
  07257	85 c0		 test	 eax, eax
  07259	0f 85 f6 fd ff
	ff		 jne	 $LN173@lzma_decod@2
  0725f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07266	83 c0 02	 add	 eax, 2
  07269	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
  07270	e9 f4 0c 00 00	 jmp	 $LN157@lzma_decod@2
$LN212@lzma_decod@2:
$LN156@lzma_decod@2:
  07275	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0727c	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07280	2b c1		 sub	 eax, ecx
  07282	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07286	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0728d	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  07291	2b c1		 sub	 eax, ecx
  07293	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07297	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0729c	0f b7 90 6a 6a
	00 00		 movzx	 edx, WORD PTR [rax+27242]
  072a3	c1 fa 05	 sar	 edx, 5
  072a6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  072ab	0f b7 88 6a 6a
	00 00		 movzx	 ecx, WORD PTR [rax+27242]
  072b2	2b ca		 sub	 ecx, edx
  072b4	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  072b9	66 89 88 6a 6a
	00 00		 mov	 WORD PTR [rax+27242], cx
  072c0	33 c0		 xor	 eax, eax
  072c2	85 c0		 test	 eax, eax
  072c4	75 af		 jne	 SHORT $LN156@lzma_decod@2
$LN153@lzma_decod@2:
$LN152@lzma_decod@2:
$LN149@lzma_decod@2:
  072c6	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  072ce	73 5e		 jae	 SHORT $LN146@lzma_decod@2
  072d0	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  072d8	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  072dd	75 14		 jne	 SHORT $LN145@lzma_decod@2
  072df	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  072e4	c7 80 a0 6e 00
	00 3e 00 00 00	 mov	 DWORD PTR [rax+28320], 62 ; 0000003eH
  072ee	e9 2d 0d 00 00	 jmp	 $out$33200
$LN145@lzma_decod@2:
  072f3	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  072f7	c1 e0 08	 shl	 eax, 8
  072fa	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  072fe	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  07302	c1 e2 08	 shl	 edx, 8
  07305	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0730a	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  07312	48 03 c1	 add	 rax, rcx
  07315	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  07318	8b c2		 mov	 eax, edx
  0731a	0b c1		 or	 eax, ecx
  0731c	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07320	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  07325	48 83 c0 01	 add	 rax, 1
  07329	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN146@lzma_decod@2:
  0732e	33 c0		 xor	 eax, eax
  07330	85 c0		 test	 eax, eax
  07332	75 92		 jne	 SHORT $LN149@lzma_decod@2
  07334	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  07338	c1 ea 0b	 shr	 edx, 11
  0733b	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07342	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07347	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  0734f	8b c2		 mov	 eax, edx
  07351	0f af c1	 imul	 eax, ecx
  07354	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0735b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07362	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  07366	73 6b		 jae	 SHORT $LN144@lzma_decod@2
$LN143@lzma_decod@2:
  07368	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  0736f	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07373	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0737a	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07381	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07386	0f b7 84 48 6c
	6c 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+27756]
  0738e	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  07393	2b c8		 sub	 ecx, eax
  07395	c1 e9 05	 shr	 ecx, 5
  07398	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0739d	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  073a5	03 d1		 add	 edx, ecx
  073a7	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  073ae	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  073b3	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  073bb	33 c0		 xor	 eax, eax
  073bd	85 c0		 test	 eax, eax
  073bf	75 a7		 jne	 SHORT $LN143@lzma_decod@2
  073c1	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  073c8	03 c0		 add	 eax, eax
  073ca	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  073d1	eb 7b		 jmp	 SHORT $LN140@lzma_decod@2
$LN144@lzma_decod@2:
$LN139@lzma_decod@2:
  073d3	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  073da	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  073de	2b c1		 sub	 eax, ecx
  073e0	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  073e4	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  073eb	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  073ef	2b c1		 sub	 eax, ecx
  073f1	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  073f5	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  073fc	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07403	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07408	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07410	c1 f9 05	 sar	 ecx, 5
  07413	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07418	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  07420	2b d1		 sub	 edx, ecx
  07422	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07429	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0742e	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  07436	33 c0		 xor	 eax, eax
  07438	85 c0		 test	 eax, eax
  0743a	75 97		 jne	 SHORT $LN139@lzma_decod@2
  0743c	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07443	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  07447	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN140@lzma_decod@2:
  0744e	33 c0		 xor	 eax, eax
  07450	85 c0		 test	 eax, eax
  07452	0f 85 6e fe ff
	ff		 jne	 $LN152@lzma_decod@2
$LN136@lzma_decod@2:
$LN135@lzma_decod@2:
$LN132@lzma_decod@2:
  07458	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  07460	73 5e		 jae	 SHORT $LN129@lzma_decod@2
  07462	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0746a	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  0746f	75 14		 jne	 SHORT $LN128@lzma_decod@2
  07471	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07476	c7 80 a0 6e 00
	00 3f 00 00 00	 mov	 DWORD PTR [rax+28320], 63 ; 0000003fH
  07480	e9 9b 0b 00 00	 jmp	 $out$33200
$LN128@lzma_decod@2:
  07485	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07489	c1 e0 08	 shl	 eax, 8
  0748c	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07490	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  07494	c1 e2 08	 shl	 edx, 8
  07497	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0749c	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  074a4	48 03 c1	 add	 rax, rcx
  074a7	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  074aa	8b c2		 mov	 eax, edx
  074ac	0b c1		 or	 eax, ecx
  074ae	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  074b2	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  074b7	48 83 c0 01	 add	 rax, 1
  074bb	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN129@lzma_decod@2:
  074c0	33 c0		 xor	 eax, eax
  074c2	85 c0		 test	 eax, eax
  074c4	75 92		 jne	 SHORT $LN132@lzma_decod@2
  074c6	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  074ca	c1 ea 0b	 shr	 edx, 11
  074cd	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  074d4	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  074d9	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  074e1	8b c2		 mov	 eax, edx
  074e3	0f af c1	 imul	 eax, ecx
  074e6	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  074ed	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  074f4	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  074f8	73 6b		 jae	 SHORT $LN127@lzma_decod@2
$LN126@lzma_decod@2:
  074fa	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07501	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07505	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0750c	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07513	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07518	0f b7 84 48 6c
	6c 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+27756]
  07520	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  07525	2b c8		 sub	 ecx, eax
  07527	c1 e9 05	 shr	 ecx, 5
  0752a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0752f	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  07537	03 d1		 add	 edx, ecx
  07539	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07540	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07545	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  0754d	33 c0		 xor	 eax, eax
  0754f	85 c0		 test	 eax, eax
  07551	75 a7		 jne	 SHORT $LN126@lzma_decod@2
  07553	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0755a	03 c0		 add	 eax, eax
  0755c	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  07563	eb 7b		 jmp	 SHORT $LN123@lzma_decod@2
$LN127@lzma_decod@2:
$LN122@lzma_decod@2:
  07565	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0756c	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07570	2b c1		 sub	 eax, ecx
  07572	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07576	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0757d	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  07581	2b c1		 sub	 eax, ecx
  07583	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07587	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0758e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07595	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0759a	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  075a2	c1 f9 05	 sar	 ecx, 5
  075a5	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  075aa	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  075b2	2b d1		 sub	 edx, ecx
  075b4	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  075bb	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  075c0	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  075c8	33 c0		 xor	 eax, eax
  075ca	85 c0		 test	 eax, eax
  075cc	75 97		 jne	 SHORT $LN122@lzma_decod@2
  075ce	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  075d5	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  075d9	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN123@lzma_decod@2:
  075e0	33 c0		 xor	 eax, eax
  075e2	85 c0		 test	 eax, eax
  075e4	0f 85 6e fe ff
	ff		 jne	 $LN135@lzma_decod@2
$LN119@lzma_decod@2:
$LN118@lzma_decod@2:
$LN115@lzma_decod@2:
  075ea	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  075f2	73 5e		 jae	 SHORT $LN112@lzma_decod@2
  075f4	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  075fc	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  07601	75 14		 jne	 SHORT $LN111@lzma_decod@2
  07603	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07608	c7 80 a0 6e 00
	00 40 00 00 00	 mov	 DWORD PTR [rax+28320], 64 ; 00000040H
  07612	e9 09 0a 00 00	 jmp	 $out$33200
$LN111@lzma_decod@2:
  07617	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0761b	c1 e0 08	 shl	 eax, 8
  0761e	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07622	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  07626	c1 e2 08	 shl	 edx, 8
  07629	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  0762e	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  07636	48 03 c1	 add	 rax, rcx
  07639	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0763c	8b c2		 mov	 eax, edx
  0763e	0b c1		 or	 eax, ecx
  07640	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07644	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  07649	48 83 c0 01	 add	 rax, 1
  0764d	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN112@lzma_decod@2:
  07652	33 c0		 xor	 eax, eax
  07654	85 c0		 test	 eax, eax
  07656	75 92		 jne	 SHORT $LN115@lzma_decod@2
  07658	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  0765c	c1 ea 0b	 shr	 edx, 11
  0765f	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07666	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0766b	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07673	8b c2		 mov	 eax, edx
  07675	0f af c1	 imul	 eax, ecx
  07678	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  0767f	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07686	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  0768a	73 6b		 jae	 SHORT $LN110@lzma_decod@2
$LN109@lzma_decod@2:
  0768c	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07693	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07697	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  0769e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  076a5	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  076aa	0f b7 84 48 6c
	6c 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+27756]
  076b2	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  076b7	2b c8		 sub	 ecx, eax
  076b9	c1 e9 05	 shr	 ecx, 5
  076bc	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  076c1	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  076c9	03 d1		 add	 edx, ecx
  076cb	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  076d2	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  076d7	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  076df	33 c0		 xor	 eax, eax
  076e1	85 c0		 test	 eax, eax
  076e3	75 a7		 jne	 SHORT $LN109@lzma_decod@2
  076e5	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  076ec	03 c0		 add	 eax, eax
  076ee	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  076f5	eb 7b		 jmp	 SHORT $LN106@lzma_decod@2
$LN110@lzma_decod@2:
$LN105@lzma_decod@2:
  076f7	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  076fe	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07702	2b c1		 sub	 eax, ecx
  07704	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07708	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  0770f	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  07713	2b c1		 sub	 eax, ecx
  07715	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07719	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  07720	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07727	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0772c	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07734	c1 f9 05	 sar	 ecx, 5
  07737	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0773c	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  07744	2b d1		 sub	 edx, ecx
  07746	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0774d	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07752	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  0775a	33 c0		 xor	 eax, eax
  0775c	85 c0		 test	 eax, eax
  0775e	75 97		 jne	 SHORT $LN105@lzma_decod@2
  07760	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07767	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  0776b	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN106@lzma_decod@2:
  07772	33 c0		 xor	 eax, eax
  07774	85 c0		 test	 eax, eax
  07776	0f 85 6e fe ff
	ff		 jne	 $LN118@lzma_decod@2
$LN102@lzma_decod@2:
$LN101@lzma_decod@2:
$LN98@lzma_decod@2:
  0777c	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  07784	73 5e		 jae	 SHORT $LN95@lzma_decod@2
  07786	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0778e	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  07793	75 14		 jne	 SHORT $LN94@lzma_decod@2
  07795	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0779a	c7 80 a0 6e 00
	00 41 00 00 00	 mov	 DWORD PTR [rax+28320], 65 ; 00000041H
  077a4	e9 77 08 00 00	 jmp	 $out$33200
$LN94@lzma_decod@2:
  077a9	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  077ad	c1 e0 08	 shl	 eax, 8
  077b0	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  077b4	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  077b8	c1 e2 08	 shl	 edx, 8
  077bb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  077c0	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  077c8	48 03 c1	 add	 rax, rcx
  077cb	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  077ce	8b c2		 mov	 eax, edx
  077d0	0b c1		 or	 eax, ecx
  077d2	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  077d6	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  077db	48 83 c0 01	 add	 rax, 1
  077df	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN95@lzma_decod@2:
  077e4	33 c0		 xor	 eax, eax
  077e6	85 c0		 test	 eax, eax
  077e8	75 92		 jne	 SHORT $LN98@lzma_decod@2
  077ea	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  077ee	c1 ea 0b	 shr	 edx, 11
  077f1	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  077f8	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  077fd	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07805	8b c2		 mov	 eax, edx
  07807	0f af c1	 imul	 eax, ecx
  0780a	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  07811	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07818	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  0781c	73 6b		 jae	 SHORT $LN93@lzma_decod@2
$LN92@lzma_decod@2:
  0781e	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07825	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07829	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  07830	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07837	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0783c	0f b7 84 48 6c
	6c 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+27756]
  07844	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  07849	2b c8		 sub	 ecx, eax
  0784b	c1 e9 05	 shr	 ecx, 5
  0784e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07853	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  0785b	03 d1		 add	 edx, ecx
  0785d	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07864	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07869	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  07871	33 c0		 xor	 eax, eax
  07873	85 c0		 test	 eax, eax
  07875	75 a7		 jne	 SHORT $LN92@lzma_decod@2
  07877	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  0787e	03 c0		 add	 eax, eax
  07880	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  07887	eb 7b		 jmp	 SHORT $LN89@lzma_decod@2
$LN93@lzma_decod@2:
$LN88@lzma_decod@2:
  07889	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  07890	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07894	2b c1		 sub	 eax, ecx
  07896	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  0789a	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  078a1	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  078a5	2b c1		 sub	 eax, ecx
  078a7	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  078ab	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  078b2	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  078b9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  078be	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  078c6	c1 f9 05	 sar	 ecx, 5
  078c9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  078ce	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  078d6	2b d1		 sub	 edx, ecx
  078d8	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  078df	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  078e4	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  078ec	33 c0		 xor	 eax, eax
  078ee	85 c0		 test	 eax, eax
  078f0	75 97		 jne	 SHORT $LN88@lzma_decod@2
  078f2	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  078f9	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  078fd	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN89@lzma_decod@2:
  07904	33 c0		 xor	 eax, eax
  07906	85 c0		 test	 eax, eax
  07908	0f 85 6e fe ff
	ff		 jne	 $LN101@lzma_decod@2
$LN85@lzma_decod@2:
$LN84@lzma_decod@2:
$LN81@lzma_decod@2:
  0790e	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  07916	73 5e		 jae	 SHORT $LN78@lzma_decod@2
  07918	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  07920	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  07925	75 14		 jne	 SHORT $LN77@lzma_decod@2
  07927	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0792c	c7 80 a0 6e 00
	00 42 00 00 00	 mov	 DWORD PTR [rax+28320], 66 ; 00000042H
  07936	e9 e5 06 00 00	 jmp	 $out$33200
$LN77@lzma_decod@2:
  0793b	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  0793f	c1 e0 08	 shl	 eax, 8
  07942	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07946	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  0794a	c1 e2 08	 shl	 edx, 8
  0794d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  07952	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  0795a	48 03 c1	 add	 rax, rcx
  0795d	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  07960	8b c2		 mov	 eax, edx
  07962	0b c1		 or	 eax, ecx
  07964	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07968	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  0796d	48 83 c0 01	 add	 rax, 1
  07971	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN78@lzma_decod@2:
  07976	33 c0		 xor	 eax, eax
  07978	85 c0		 test	 eax, eax
  0797a	75 92		 jne	 SHORT $LN81@lzma_decod@2
  0797c	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  07980	c1 ea 0b	 shr	 edx, 11
  07983	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  0798a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0798f	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07997	8b c2		 mov	 eax, edx
  07999	0f af c1	 imul	 eax, ecx
  0799c	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  079a3	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  079aa	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  079ae	73 6b		 jae	 SHORT $LN76@lzma_decod@2
$LN75@lzma_decod@2:
  079b0	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  079b7	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  079bb	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  079c2	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  079c9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  079ce	0f b7 84 48 6c
	6c 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+27756]
  079d6	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  079db	2b c8		 sub	 ecx, eax
  079dd	c1 e9 05	 shr	 ecx, 5
  079e0	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  079e5	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  079ed	03 d1		 add	 edx, ecx
  079ef	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  079f6	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  079fb	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  07a03	33 c0		 xor	 eax, eax
  07a05	85 c0		 test	 eax, eax
  07a07	75 a7		 jne	 SHORT $LN75@lzma_decod@2
  07a09	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07a10	03 c0		 add	 eax, eax
  07a12	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  07a19	eb 7b		 jmp	 SHORT $LN72@lzma_decod@2
$LN76@lzma_decod@2:
$LN71@lzma_decod@2:
  07a1b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  07a22	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07a26	2b c1		 sub	 eax, ecx
  07a28	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07a2c	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  07a33	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  07a37	2b c1		 sub	 eax, ecx
  07a39	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07a3d	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  07a44	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07a4b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07a50	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07a58	c1 f9 05	 sar	 ecx, 5
  07a5b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07a60	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  07a68	2b d1		 sub	 edx, ecx
  07a6a	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07a71	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07a76	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  07a7e	33 c0		 xor	 eax, eax
  07a80	85 c0		 test	 eax, eax
  07a82	75 97		 jne	 SHORT $LN71@lzma_decod@2
  07a84	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07a8b	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  07a8f	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN72@lzma_decod@2:
  07a96	33 c0		 xor	 eax, eax
  07a98	85 c0		 test	 eax, eax
  07a9a	0f 85 6e fe ff
	ff		 jne	 $LN84@lzma_decod@2
$LN68@lzma_decod@2:
$LN67@lzma_decod@2:
$LN64@lzma_decod@2:
  07aa0	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  07aa8	73 5e		 jae	 SHORT $LN61@lzma_decod@2
  07aaa	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  07ab2	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  07ab7	75 14		 jne	 SHORT $LN60@lzma_decod@2
  07ab9	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07abe	c7 80 a0 6e 00
	00 43 00 00 00	 mov	 DWORD PTR [rax+28320], 67 ; 00000043H
  07ac8	e9 53 05 00 00	 jmp	 $out$33200
$LN60@lzma_decod@2:
  07acd	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07ad1	c1 e0 08	 shl	 eax, 8
  07ad4	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07ad8	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  07adc	c1 e2 08	 shl	 edx, 8
  07adf	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  07ae4	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  07aec	48 03 c1	 add	 rax, rcx
  07aef	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  07af2	8b c2		 mov	 eax, edx
  07af4	0b c1		 or	 eax, ecx
  07af6	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07afa	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  07aff	48 83 c0 01	 add	 rax, 1
  07b03	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN61@lzma_decod@2:
  07b08	33 c0		 xor	 eax, eax
  07b0a	85 c0		 test	 eax, eax
  07b0c	75 92		 jne	 SHORT $LN64@lzma_decod@2
  07b0e	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  07b12	c1 ea 0b	 shr	 edx, 11
  07b15	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07b1c	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07b21	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07b29	8b c2		 mov	 eax, edx
  07b2b	0f af c1	 imul	 eax, ecx
  07b2e	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  07b35	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07b3c	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  07b40	73 6b		 jae	 SHORT $LN59@lzma_decod@2
$LN58@lzma_decod@2:
  07b42	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07b49	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07b4d	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  07b54	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07b5b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07b60	0f b7 84 48 6c
	6c 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+27756]
  07b68	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  07b6d	2b c8		 sub	 ecx, eax
  07b6f	c1 e9 05	 shr	 ecx, 5
  07b72	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07b77	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  07b7f	03 d1		 add	 edx, ecx
  07b81	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07b88	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07b8d	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  07b95	33 c0		 xor	 eax, eax
  07b97	85 c0		 test	 eax, eax
  07b99	75 a7		 jne	 SHORT $LN58@lzma_decod@2
  07b9b	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07ba2	03 c0		 add	 eax, eax
  07ba4	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  07bab	eb 7b		 jmp	 SHORT $LN55@lzma_decod@2
$LN59@lzma_decod@2:
$LN54@lzma_decod@2:
  07bad	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  07bb4	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07bb8	2b c1		 sub	 eax, ecx
  07bba	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07bbe	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  07bc5	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  07bc9	2b c1		 sub	 eax, ecx
  07bcb	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07bcf	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  07bd6	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07bdd	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07be2	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07bea	c1 f9 05	 sar	 ecx, 5
  07bed	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07bf2	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  07bfa	2b d1		 sub	 edx, ecx
  07bfc	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07c03	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07c08	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  07c10	33 c0		 xor	 eax, eax
  07c12	85 c0		 test	 eax, eax
  07c14	75 97		 jne	 SHORT $LN54@lzma_decod@2
  07c16	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07c1d	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  07c21	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN55@lzma_decod@2:
  07c28	33 c0		 xor	 eax, eax
  07c2a	85 c0		 test	 eax, eax
  07c2c	0f 85 6e fe ff
	ff		 jne	 $LN67@lzma_decod@2
$LN51@lzma_decod@2:
$LN50@lzma_decod@2:
$LN47@lzma_decod@2:
  07c32	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  07c3a	73 5e		 jae	 SHORT $LN44@lzma_decod@2
  07c3c	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  07c44	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  07c49	75 14		 jne	 SHORT $LN43@lzma_decod@2
  07c4b	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07c50	c7 80 a0 6e 00
	00 44 00 00 00	 mov	 DWORD PTR [rax+28320], 68 ; 00000044H
  07c5a	e9 c1 03 00 00	 jmp	 $out$33200
$LN43@lzma_decod@2:
  07c5f	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07c63	c1 e0 08	 shl	 eax, 8
  07c66	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07c6a	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  07c6e	c1 e2 08	 shl	 edx, 8
  07c71	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  07c76	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  07c7e	48 03 c1	 add	 rax, rcx
  07c81	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  07c84	8b c2		 mov	 eax, edx
  07c86	0b c1		 or	 eax, ecx
  07c88	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07c8c	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  07c91	48 83 c0 01	 add	 rax, 1
  07c95	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN44@lzma_decod@2:
  07c9a	33 c0		 xor	 eax, eax
  07c9c	85 c0		 test	 eax, eax
  07c9e	75 92		 jne	 SHORT $LN47@lzma_decod@2
  07ca0	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  07ca4	c1 ea 0b	 shr	 edx, 11
  07ca7	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07cae	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07cb3	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07cbb	8b c2		 mov	 eax, edx
  07cbd	0f af c1	 imul	 eax, ecx
  07cc0	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  07cc7	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07cce	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  07cd2	73 6b		 jae	 SHORT $LN42@lzma_decod@2
$LN41@lzma_decod@2:
  07cd4	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07cdb	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07cdf	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  07ce6	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07ced	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07cf2	0f b7 84 48 6c
	6c 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+27756]
  07cfa	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  07cff	2b c8		 sub	 ecx, eax
  07d01	c1 e9 05	 shr	 ecx, 5
  07d04	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07d09	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  07d11	03 d1		 add	 edx, ecx
  07d13	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07d1a	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07d1f	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  07d27	33 c0		 xor	 eax, eax
  07d29	85 c0		 test	 eax, eax
  07d2b	75 a7		 jne	 SHORT $LN41@lzma_decod@2
  07d2d	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07d34	03 c0		 add	 eax, eax
  07d36	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  07d3d	eb 7b		 jmp	 SHORT $LN38@lzma_decod@2
$LN42@lzma_decod@2:
$LN37@lzma_decod@2:
  07d3f	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  07d46	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07d4a	2b c1		 sub	 eax, ecx
  07d4c	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07d50	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  07d57	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  07d5b	2b c1		 sub	 eax, ecx
  07d5d	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07d61	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  07d68	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07d6f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07d74	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07d7c	c1 f9 05	 sar	 ecx, 5
  07d7f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07d84	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  07d8c	2b d1		 sub	 edx, ecx
  07d8e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07d95	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07d9a	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  07da2	33 c0		 xor	 eax, eax
  07da4	85 c0		 test	 eax, eax
  07da6	75 97		 jne	 SHORT $LN37@lzma_decod@2
  07da8	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07daf	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  07db3	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN38@lzma_decod@2:
  07dba	33 c0		 xor	 eax, eax
  07dbc	85 c0		 test	 eax, eax
  07dbe	0f 85 6e fe ff
	ff		 jne	 $LN50@lzma_decod@2
$LN34@lzma_decod@2:
$LN33@lzma_decod@2:
$LN30@lzma_decod@2:
  07dc4	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  07dcc	73 5e		 jae	 SHORT $LN27@lzma_decod@2
  07dce	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  07dd6	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  07ddb	75 14		 jne	 SHORT $LN26@lzma_decod@2
  07ddd	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07de2	c7 80 a0 6e 00
	00 45 00 00 00	 mov	 DWORD PTR [rax+28320], 69 ; 00000045H
  07dec	e9 2f 02 00 00	 jmp	 $out$33200
$LN26@lzma_decod@2:
  07df1	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07df5	c1 e0 08	 shl	 eax, 8
  07df8	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07dfc	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  07e00	c1 e2 08	 shl	 edx, 8
  07e03	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  07e08	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  07e10	48 03 c1	 add	 rax, rcx
  07e13	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  07e16	8b c2		 mov	 eax, edx
  07e18	0b c1		 or	 eax, ecx
  07e1a	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07e1e	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  07e23	48 83 c0 01	 add	 rax, 1
  07e27	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN27@lzma_decod@2:
  07e2c	33 c0		 xor	 eax, eax
  07e2e	85 c0		 test	 eax, eax
  07e30	75 92		 jne	 SHORT $LN30@lzma_decod@2
  07e32	8b 54 24 30	 mov	 edx, DWORD PTR rc$33165[rsp]
  07e36	c1 ea 0b	 shr	 edx, 11
  07e39	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07e40	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07e45	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07e4d	8b c2		 mov	 eax, edx
  07e4f	0f af c1	 imul	 eax, ecx
  07e52	89 84 24 84 00
	00 00		 mov	 DWORD PTR rc_bound$33167[rsp], eax
  07e59	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07e60	39 44 24 34	 cmp	 DWORD PTR rc$33165[rsp+4], eax
  07e64	73 6b		 jae	 SHORT $LN25@lzma_decod@2
$LN24@lzma_decod@2:
  07e66	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR rc_bound$33167[rsp]
  07e6d	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07e71	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  07e78	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07e7f	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07e84	0f b7 84 48 6c
	6c 00 00	 movzx	 eax, WORD PTR [rax+rcx*2+27756]
  07e8c	b9 00 08 00 00	 mov	 ecx, 2048		; 00000800H
  07e91	2b c8		 sub	 ecx, eax
  07e93	c1 e9 05	 shr	 ecx, 5
  07e96	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07e9b	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  07ea3	03 d1		 add	 edx, ecx
  07ea5	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07eac	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07eb1	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  07eb9	33 c0		 xor	 eax, eax
  07ebb	85 c0		 test	 eax, eax
  07ebd	75 a7		 jne	 SHORT $LN24@lzma_decod@2
  07ebf	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07ec6	03 c0		 add	 eax, eax
  07ec8	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
  07ecf	eb 7b		 jmp	 SHORT $LN21@lzma_decod@2
$LN25@lzma_decod@2:
$LN20@lzma_decod@2:
  07ed1	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  07ed8	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07edc	2b c1		 sub	 eax, ecx
  07ede	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07ee2	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR rc_bound$33167[rsp]
  07ee9	8b 44 24 34	 mov	 eax, DWORD PTR rc$33165[rsp+4]
  07eed	2b c1		 sub	 eax, ecx
  07eef	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07ef3	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR symbol$33175[rsp]
  07efa	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07f01	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07f06	0f b7 8c 48 6c
	6c 00 00	 movzx	 ecx, WORD PTR [rax+rcx*2+27756]
  07f0e	c1 f9 05	 sar	 ecx, 5
  07f11	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07f16	0f b7 94 50 6c
	6c 00 00	 movzx	 edx, WORD PTR [rax+rdx*2+27756]
  07f1e	2b d1		 sub	 edx, ecx
  07f20	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR symbol$33175[rsp]
  07f27	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07f2c	66 89 94 48 6c
	6c 00 00	 mov	 WORD PTR [rax+rcx*2+27756], dx
  07f34	33 c0		 xor	 eax, eax
  07f36	85 c0		 test	 eax, eax
  07f38	75 97		 jne	 SHORT $LN20@lzma_decod@2
  07f3a	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07f41	8d 44 00 01	 lea	 eax, DWORD PTR [rax+rax+1]
  07f45	89 84 24 98 00
	00 00		 mov	 DWORD PTR symbol$33175[rsp], eax
$LN21@lzma_decod@2:
  07f4c	33 c0		 xor	 eax, eax
  07f4e	85 c0		 test	 eax, eax
  07f50	0f 85 6e fe ff
	ff		 jne	 $LN33@lzma_decod@2
  07f56	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  07f5d	2d ee 00 00 00	 sub	 eax, 238		; 000000eeH
  07f62	89 84 24 a8 00
	00 00		 mov	 DWORD PTR len$33178[rsp], eax
$LN157@lzma_decod@2:
$LN222@lzma_decod@2:
  07f69	33 c0		 xor	 eax, eax
  07f6b	85 c0		 test	 eax, eax
  07f6d	0f 85 80 e4 ff
	ff		 jne	 $LN286@lzma_decod@2
$LN348@lzma_decod@2:
$LN17@lzma_decod@2:

; 789  : 		}
; 790  : 
; 791  : 		/////////////////////////////////
; 792  : 		// Repeat from history buffer. //
; 793  : 		/////////////////////////////////
; 794  : 
; 795  : 		// The length is always between these limits. There is no way
; 796  : 		// to trigger the algorithm to set len outside this range.
; 797  : 		assert(len >= MATCH_LEN_MIN);
; 798  : 		assert(len <= MATCH_LEN_MAX);
; 799  : 
; 800  : 	case SEQ_COPY:
; 801  : 		// Repeat len bytes from distance of rep0.
; 802  : 		if (unlikely(dict_repeat(&dict, rep0, &len))) {

  07f73	4c 8d 84 24 a8
	00 00 00	 lea	 r8, QWORD PTR len$33178[rsp]
  07f7b	8b 54 24 40	 mov	 edx, DWORD PTR rep0$33169[rsp]
  07f7f	48 8d 4c 24 48	 lea	 rcx, QWORD PTR dict$33163[rsp]
  07f84	e8 00 00 00 00	 call	 dict_repeat
  07f89	0f b6 c0	 movzx	 eax, al
  07f8c	85 c0		 test	 eax, eax
  07f8e	74 11		 je	 SHORT $LN16@lzma_decod@2

; 803  : 			coder->sequence = SEQ_COPY;

  07f90	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07f95	c7 80 a0 6e 00
	00 46 00 00 00	 mov	 DWORD PTR [rax+28320], 70 ; 00000046H

; 804  : 			goto out;

  07f9f	eb 7f		 jmp	 SHORT $out$33200
$LN16@lzma_decod@2:

; 805  : 		}

  07fa1	e9 b1 83 ff ff	 jmp	 $LN1202@lzma_decod@2
$LN1201@lzma_decod@2:
$LN1203@lzma_decod@2:
$LN15@lzma_decod@2:

; 806  : 	}
; 807  : 
; 808  : 	rc_normalize(SEQ_NORMALIZE);

  07fa6	81 7c 24 30 00
	00 00 01	 cmp	 DWORD PTR rc$33165[rsp], 16777216 ; 01000000H
  07fae	73 5b		 jae	 SHORT $LN12@lzma_decod@2
  07fb0	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  07fb8	48 39 44 24 78	 cmp	 QWORD PTR rc_in_pos$33166[rsp], rax
  07fbd	75 11		 jne	 SHORT $LN11@lzma_decod@2
  07fbf	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  07fc4	c7 80 a0 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28320], 0
  07fce	eb 50		 jmp	 SHORT $out$33200
$LN11@lzma_decod@2:
  07fd0	8b 44 24 30	 mov	 eax, DWORD PTR rc$33165[rsp]
  07fd4	c1 e0 08	 shl	 eax, 8
  07fd7	89 44 24 30	 mov	 DWORD PTR rc$33165[rsp], eax
  07fdb	8b 54 24 34	 mov	 edx, DWORD PTR rc$33165[rsp+4]
  07fdf	c1 e2 08	 shl	 edx, 8
  07fe2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR rc_in_pos$33166[rsp]
  07fe7	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR in$[rsp]
  07fef	48 03 c1	 add	 rax, rcx
  07ff2	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  07ff5	8b c2		 mov	 eax, edx
  07ff7	0b c1		 or	 eax, ecx
  07ff9	89 44 24 34	 mov	 DWORD PTR rc$33165[rsp+4], eax
  07ffd	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  08002	48 83 c0 01	 add	 rax, 1
  08006	48 89 44 24 78	 mov	 QWORD PTR rc_in_pos$33166[rsp], rax
$LN12@lzma_decod@2:
  0800b	33 c0		 xor	 eax, eax
  0800d	85 c0		 test	 eax, eax
  0800f	75 95		 jne	 SHORT $LN15@lzma_decod@2

; 809  : 	coder->sequence = SEQ_IS_MATCH;

  08011	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  08016	c7 80 a0 6e 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+28320], 1
$out$33200:

; 810  : 
; 811  : out:
; 812  : 	// Save state
; 813  : 
; 814  : 	// NOTE: Must not copy dict.limit.
; 815  : 	dictptr->pos = dict.pos;

  08020	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR dictptr$[rsp]
  08028	48 8b 44 24 50	 mov	 rax, QWORD PTR dict$33163[rsp+8]
  0802d	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 816  : 	dictptr->full = dict.full;

  08031	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR dictptr$[rsp]
  08039	48 8b 44 24 58	 mov	 rax, QWORD PTR dict$33163[rsp+16]
  0803e	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
$LN10@lzma_decod@2:

; 817  : 
; 818  : 	rc_from_local(coder->rc, *in_pos);

  08042	48 8b 7c 24 20	 mov	 rdi, QWORD PTR coder$[rsp]
  08047	48 8d 74 24 30	 lea	 rsi, QWORD PTR rc$33165[rsp]
  0804c	48 81 c7 6c 6e
	00 00		 add	 rdi, 28268		; 00006e6cH
  08053	b9 0c 00 00 00	 mov	 ecx, 12
  08058	f3 a4		 rep movsb
  0805a	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR in_pos$[rsp]
  08062	48 8b 44 24 78	 mov	 rax, QWORD PTR rc_in_pos$33166[rsp]
  08067	48 89 02	 mov	 QWORD PTR [rdx], rax
  0806a	33 c0		 xor	 eax, eax
  0806c	85 c0		 test	 eax, eax
  0806e	75 d2		 jne	 SHORT $LN10@lzma_decod@2

; 819  : 
; 820  : 	coder->state = state;

  08070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  08075	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR state$33168[rsp]
  0807c	89 81 78 6e 00
	00		 mov	 DWORD PTR [rcx+28280], eax

; 821  : 	coder->rep0 = rep0;

  08082	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  08087	8b 44 24 40	 mov	 eax, DWORD PTR rep0$33169[rsp]
  0808b	89 81 7c 6e 00
	00		 mov	 DWORD PTR [rcx+28284], eax

; 822  : 	coder->rep1 = rep1;

  08091	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  08096	8b 44 24 2c	 mov	 eax, DWORD PTR rep1$33170[rsp]
  0809a	89 81 80 6e 00
	00		 mov	 DWORD PTR [rcx+28288], eax

; 823  : 	coder->rep2 = rep2;

  080a0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  080a5	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR rep2$33171[rsp]
  080ac	89 81 84 6e 00
	00		 mov	 DWORD PTR [rcx+28292], eax

; 824  : 	coder->rep3 = rep3;

  080b2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  080b7	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR rep3$33172[rsp]
  080be	89 81 88 6e 00
	00		 mov	 DWORD PTR [rcx+28296], eax

; 825  : 
; 826  : 	coder->probs = probs;

  080c4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  080c9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR probs$33174[rsp]
  080d1	48 89 81 a8 6e
	00 00		 mov	 QWORD PTR [rcx+28328], rax

; 827  : 	coder->symbol = symbol;

  080d8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  080dd	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR symbol$33175[rsp]
  080e4	89 81 b0 6e 00
	00		 mov	 DWORD PTR [rcx+28336], eax

; 828  : 	coder->limit = limit;

  080ea	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  080ef	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR limit$33176[rsp]
  080f6	89 81 b4 6e 00
	00		 mov	 DWORD PTR [rcx+28340], eax

; 829  : 	coder->offset = offset;

  080fc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  08101	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR offset$33177[rsp]
  08108	89 81 b8 6e 00
	00		 mov	 DWORD PTR [rcx+28344], eax

; 830  : 	coder->len = len;

  0810e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  08113	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR len$33178[rsp]
  0811a	89 81 bc 6e 00
	00		 mov	 DWORD PTR [rcx+28348], eax

; 831  : 
; 832  : 	// Update the remaining amount of uncompressed data if uncompressed
; 833  : 	// size was known.
; 834  : 	if (coder->uncompressed_size != LZMA_VLI_UNKNOWN) {

  08120	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  08125	48 83 b8 98 6e
	00 00 ff	 cmp	 QWORD PTR [rax+28312], -1
  0812d	0f 84 86 00 00
	00		 je	 $LN7@lzma_decod@2

; 835  : 		coder->uncompressed_size -= dict.pos - dict_start;

  08133	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR dict_start$33164[rsp]
  0813b	48 8b 44 24 50	 mov	 rax, QWORD PTR dict$33163[rsp+8]
  08140	48 2b c1	 sub	 rax, rcx
  08143	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  08148	48 8b 89 98 6e
	00 00		 mov	 rcx, QWORD PTR [rcx+28312]
  0814f	48 2b c8	 sub	 rcx, rax
  08152	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  08157	48 89 88 98 6e
	00 00		 mov	 QWORD PTR [rax+28312], rcx

; 836  : 
; 837  : 		// Since there cannot be end of payload marker if the
; 838  : 		// uncompressed size was known, we check here if we
; 839  : 		// finished decoding.
; 840  : 		if (coder->uncompressed_size == 0 && ret == LZMA_OK
; 841  : 				&& coder->sequence != SEQ_NORMALIZE)

  0815e	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  08163	48 83 b8 98 6e
	00 00 00	 cmp	 QWORD PTR [rax+28312], 0
  0816b	75 4c		 jne	 SHORT $LN6@lzma_decod@2
  0816d	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR ret$33182[rsp], 0
  08175	75 42		 jne	 SHORT $LN6@lzma_decod@2
  08177	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0817c	83 b8 a0 6e 00
	00 00		 cmp	 DWORD PTR [rax+28320], 0
  08183	74 34		 je	 SHORT $LN6@lzma_decod@2

; 842  : 			ret = coder->sequence == SEQ_IS_MATCH
; 843  : 					? LZMA_STREAM_END : LZMA_DATA_ERROR;

  08185	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0818a	83 b8 a0 6e 00
	00 01		 cmp	 DWORD PTR [rax+28320], 1
  08191	75 0d		 jne	 SHORT $LN1219@lzma_decod@2
  08193	c7 84 24 84 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv4620[rsp], 1
  0819e	eb 0b		 jmp	 SHORT $LN1220@lzma_decod@2
$LN1219@lzma_decod@2:
  081a0	c7 84 24 84 01
	00 00 09 00 00
	00		 mov	 DWORD PTR tv4620[rsp], 9
$LN1220@lzma_decod@2:
  081ab	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv4620[rsp]
  081b2	89 84 24 c0 00
	00 00		 mov	 DWORD PTR ret$33182[rsp], eax
$LN6@lzma_decod@2:
$LN7@lzma_decod@2:

; 844  : 	}
; 845  : 
; 846  : 	// We can do an additional check in the range decoder to catch some
; 847  : 	// corrupted files.
; 848  : 	if (ret == LZMA_STREAM_END) {

  081b9	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR ret$33182[rsp], 1
  081c1	75 4c		 jne	 SHORT $LN5@lzma_decod@2

; 849  : 		if (!rc_is_finished(coder->rc))

  081c3	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  081c8	83 b8 70 6e 00
	00 00		 cmp	 DWORD PTR [rax+28272], 0
  081cf	74 0b		 je	 SHORT $LN4@lzma_decod@2

; 850  : 			ret = LZMA_DATA_ERROR;

  081d1	c7 84 24 c0 00
	00 00 09 00 00
	00		 mov	 DWORD PTR ret$33182[rsp], 9
$LN4@lzma_decod@2:
$LN3@lzma_decod@2:

; 851  : 
; 852  : 		// Reset the range decoder so that it is ready to reinitialize
; 853  : 		// for a new LZMA2 chunk.
; 854  : 		rc_reset(coder->rc);

  081dc	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  081e1	c7 80 6c 6e 00
	00 ff ff ff ff	 mov	 DWORD PTR [rax+28268], -1 ; ffffffffH
  081eb	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  081f0	c7 80 70 6e 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+28272], 0
  081fa	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  081ff	c7 80 74 6e 00
	00 05 00 00 00	 mov	 DWORD PTR [rax+28276], 5
  08209	33 c0		 xor	 eax, eax
  0820b	85 c0		 test	 eax, eax
  0820d	75 cd		 jne	 SHORT $LN3@lzma_decod@2
$LN5@lzma_decod@2:

; 855  : 	}
; 856  :   }
; 857  : 
; 858  : 	return ret;

  0820f	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR ret$33182[rsp]
$LN1207@lzma_decod@2:

; 859  :   }}}
; 860  : }

  08216	48 81 c4 98 01
	00 00		 add	 rsp, 408		; 00000198H
  0821d	5f		 pop	 rdi
  0821e	5e		 pop	 rsi
  0821f	c3		 ret	 0
$LN1275@lzma_decod@2:
  08220	00 00 00 00	 DD	 $LN1200@lzma_decod@2
  08224	00 00 00 00	 DD	 $LN1200@lzma_decod@2
  08228	00 00 00 00	 DD	 $LN1188@lzma_decod@2
  0822c	00 00 00 00	 DD	 $LN1171@lzma_decod@2
  08230	00 00 00 00	 DD	 $LN1154@lzma_decod@2
  08234	00 00 00 00	 DD	 $LN1137@lzma_decod@2
  08238	00 00 00 00	 DD	 $LN1120@lzma_decod@2
  0823c	00 00 00 00	 DD	 $LN1103@lzma_decod@2
  08240	00 00 00 00	 DD	 $LN1086@lzma_decod@2
  08244	00 00 00 00	 DD	 $LN1069@lzma_decod@2
  08248	00 00 00 00	 DD	 $LN1051@lzma_decod@2
  0824c	00 00 00 00	 DD	 $LN1034@lzma_decod@2
  08250	00 00 00 00	 DD	 $LN1017@lzma_decod@2
  08254	00 00 00 00	 DD	 $LN1000@lzma_decod@2
  08258	00 00 00 00	 DD	 $LN983@lzma_decod@2
  0825c	00 00 00 00	 DD	 $LN966@lzma_decod@2
  08260	00 00 00 00	 DD	 $LN949@lzma_decod@2
  08264	00 00 00 00	 DD	 $LN932@lzma_decod@2
  08268	00 00 00 00	 DD	 $LN915@lzma_decod@2
  0826c	00 00 00 00	 DD	 $LN910@lzma_decod@2
  08270	00 00 00 00	 DD	 $LN897@lzma_decod@2
  08274	00 00 00 00	 DD	 $LN887@lzma_decod@2
  08278	00 00 00 00	 DD	 $LN870@lzma_decod@2
  0827c	00 00 00 00	 DD	 $LN853@lzma_decod@2
  08280	00 00 00 00	 DD	 $LN832@lzma_decod@2
  08284	00 00 00 00	 DD	 $LN822@lzma_decod@2
  08288	00 00 00 00	 DD	 $LN805@lzma_decod@2
  0828c	00 00 00 00	 DD	 $LN788@lzma_decod@2
  08290	00 00 00 00	 DD	 $LN767@lzma_decod@2
  08294	00 00 00 00	 DD	 $LN750@lzma_decod@2
  08298	00 00 00 00	 DD	 $LN733@lzma_decod@2
  0829c	00 00 00 00	 DD	 $LN716@lzma_decod@2
  082a0	00 00 00 00	 DD	 $LN699@lzma_decod@2
  082a4	00 00 00 00	 DD	 $LN682@lzma_decod@2
  082a8	00 00 00 00	 DD	 $LN665@lzma_decod@2
  082ac	00 00 00 00	 DD	 $LN648@lzma_decod@2
  082b0	00 00 00 00	 DD	 $LN631@lzma_decod@2
  082b4	00 00 00 00	 DD	 $LN614@lzma_decod@2
  082b8	00 00 00 00	 DD	 $LN597@lzma_decod@2
  082bc	00 00 00 00	 DD	 $LN580@lzma_decod@2
  082c0	00 00 00 00	 DD	 $LN563@lzma_decod@2
  082c4	00 00 00 00	 DD	 $LN546@lzma_decod@2
  082c8	00 00 00 00	 DD	 $LN526@lzma_decod@2
  082cc	00 00 00 00	 DD	 $LN437@lzma_decod@2
  082d0	00 00 00 00	 DD	 $LN425@lzma_decod@2
  082d4	00 00 00 00	 DD	 $LN408@lzma_decod@2
  082d8	00 00 00 00	 DD	 $LN391@lzma_decod@2
  082dc	00 00 00 00	 DD	 $LN374@lzma_decod@2
  082e0	00 00 00 00	 DD	 $LN355@lzma_decod@2
  082e4	00 00 00 00	 DD	 $LN343@lzma_decod@2
  082e8	00 00 00 00	 DD	 $LN323@lzma_decod@2
  082ec	00 00 00 00	 DD	 $LN333@lzma_decod@2
  082f0	00 00 00 00	 DD	 $LN314@lzma_decod@2
  082f4	00 00 00 00	 DD	 $LN300@lzma_decod@2
  082f8	00 00 00 00	 DD	 $LN283@lzma_decod@2
  082fc	00 00 00 00	 DD	 $LN273@lzma_decod@2
  08300	00 00 00 00	 DD	 $LN256@lzma_decod@2
  08304	00 00 00 00	 DD	 $LN239@lzma_decod@2
  08308	00 00 00 00	 DD	 $LN218@lzma_decod@2
  0830c	00 00 00 00	 DD	 $LN208@lzma_decod@2
  08310	00 00 00 00	 DD	 $LN191@lzma_decod@2
  08314	00 00 00 00	 DD	 $LN174@lzma_decod@2
  08318	00 00 00 00	 DD	 $LN153@lzma_decod@2
  0831c	00 00 00 00	 DD	 $LN136@lzma_decod@2
  08320	00 00 00 00	 DD	 $LN119@lzma_decod@2
  08324	00 00 00 00	 DD	 $LN102@lzma_decod@2
  08328	00 00 00 00	 DD	 $LN85@lzma_decod@2
  0832c	00 00 00 00	 DD	 $LN68@lzma_decod@2
  08330	00 00 00 00	 DD	 $LN51@lzma_decod@2
  08334	00 00 00 00	 DD	 $LN34@lzma_decod@2
  08338	00 00 00 00	 DD	 $LN17@lzma_decod@2
lzma_decode ENDP
PUBLIC	lzma_lzma_decoder_create
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_lzma_decoder_create DD imagerel $LN5
	DD	imagerel $LN5+194
	DD	imagerel $unwind$lzma_lzma_decoder_create
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_lzma_decoder_create DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_lzma_decoder_create
_TEXT	SEGMENT
options$34499 = 32
lz$ = 64
allocator$ = 72
opt$ = 80
lz_options$ = 88
lzma_lzma_decoder_create PROC				; COMDAT

; 966  : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 967  : 	if (lz->coder == NULL) {

  00018	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  0001d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00021	75 5c		 jne	 SHORT $LN2@lzma_lzma_@4

; 968  : 		lz->coder = lzma_alloc(sizeof(lzma_lzma1_decoder), allocator);

  00023	48 8b 54 24 48	 mov	 rdx, QWORD PTR allocator$[rsp]
  00028	b9 c0 6e 00 00	 mov	 ecx, 28352		; 00006ec0H
  0002d	e8 00 00 00 00	 call	 lzma_alloc
  00032	4c 8b d8	 mov	 r11, rax
  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  0003a	4c 89 18	 mov	 QWORD PTR [rax], r11

; 969  : 		if (lz->coder == NULL)

  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR lz$[rsp]
  00042	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00046	75 07		 jne	 SHORT $LN1@lzma_lzma_@4

; 970  : 			return LZMA_MEM_ERROR;

  00048	b8 05 00 00 00	 mov	 eax, 5
  0004d	eb 6e		 jmp	 SHORT $LN3@lzma_lzma_@4
$LN1@lzma_lzma_@4:

; 971  : 
; 972  : 		lz->code = &lzma_decode;

  0004f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lz$[rsp]
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lzma_decode
  0005b	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 973  : 		lz->reset = &lzma_decoder_reset;

  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lz$[rsp]
  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lzma_decoder_reset
  0006b	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 974  : 		lz->set_uncompressed = &lzma_decoder_uncompressed;

  0006f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lz$[rsp]
  00074	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lzma_decoder_uncompressed
  0007b	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN2@lzma_lzma_@4:

; 975  : 	}
; 976  : 
; 977  : 	// All dictionary sizes are OK here. LZ decoder will take care of
; 978  : 	// the special cases.
; 979  :   {
; 980  : 	const lzma_options_lzma *options = opt;

  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR opt$[rsp]
  00084	48 89 44 24 20	 mov	 QWORD PTR options$34499[rsp], rax

; 981  : 	lz_options->dict_size = options->dict_size;

  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR options$34499[rsp]
  0008e	8b 08		 mov	 ecx, DWORD PTR [rax]
  00090	48 8b 44 24 58	 mov	 rax, QWORD PTR lz_options$[rsp]
  00095	48 89 08	 mov	 QWORD PTR [rax], rcx

; 982  : 	lz_options->preset_dict = options->preset_dict;

  00098	48 8b 4c 24 58	 mov	 rcx, QWORD PTR lz_options$[rsp]
  0009d	48 8b 44 24 20	 mov	 rax, QWORD PTR options$34499[rsp]
  000a2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000a6	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 983  : 	lz_options->preset_dict_size = options->preset_dict_size;

  000aa	48 8b 44 24 20	 mov	 rax, QWORD PTR options$34499[rsp]
  000af	8b 48 10	 mov	 ecx, DWORD PTR [rax+16]
  000b2	48 8b 44 24 58	 mov	 rax, QWORD PTR lz_options$[rsp]
  000b7	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 984  :   }
; 985  : 
; 986  : 	return LZMA_OK;

  000bb	33 c0		 xor	 eax, eax
$LN3@lzma_lzma_@4:

; 987  : }

  000bd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c1	c3		 ret	 0
lzma_lzma_decoder_create ENDP
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_common.h
pdata	SEGMENT
$pdata$lzma_decoder_init DD imagerel lzma_decoder_init
	DD	imagerel lzma_decoder_init+205
	DD	imagerel $unwind$lzma_decoder_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_decoder_init DD 011801H
	DD	06218H
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\lzma\lzma_decoder.c
xdata	ENDS
;	COMDAT lzma_decoder_init
_TEXT	SEGMENT
ret_$34514 = 32
tv89 = 36
lz$ = 64
allocator$ = 72
options$ = 80
lz_options$ = 88
lzma_decoder_init PROC					; COMDAT

; 996  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 997  : 	if (!is_lclppb_valid(options))

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR options$[rsp]
  0001d	83 78 14 04	 cmp	 DWORD PTR [rax+20], 4
  00021	77 35		 ja	 SHORT $LN10@lzma_decod@3
  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR options$[rsp]
  00028	83 78 18 04	 cmp	 DWORD PTR [rax+24], 4
  0002c	77 2a		 ja	 SHORT $LN10@lzma_decod@3
  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR options$[rsp]
  00033	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00036	48 8b 4c 24 50	 mov	 rcx, QWORD PTR options$[rsp]
  0003b	03 41 18	 add	 eax, DWORD PTR [rcx+24]
  0003e	83 f8 04	 cmp	 eax, 4
  00041	77 15		 ja	 SHORT $LN10@lzma_decod@3
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR options$[rsp]
  00048	83 78 1c 04	 cmp	 DWORD PTR [rax+28], 4
  0004c	77 0a		 ja	 SHORT $LN10@lzma_decod@3
  0004e	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv89[rsp], 1
  00056	eb 08		 jmp	 SHORT $LN11@lzma_decod@3
$LN10@lzma_decod@3:
  00058	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
$LN11@lzma_decod@3:
  00060	0f b6 44 24 24	 movzx	 eax, BYTE PTR tv89[rsp]
  00065	85 c0		 test	 eax, eax
  00067	75 07		 jne	 SHORT $LN5@lzma_decod@3

; 998  : 		return LZMA_PROG_ERROR;

  00069	b8 0b 00 00 00	 mov	 eax, 11
  0006e	eb 58		 jmp	 SHORT $LN6@lzma_decod@3
$LN5@lzma_decod@3:
$LN4@lzma_decod@3:

; 999  : 
; 1000 : 	return_if_error(lzma_lzma_decoder_create(
; 1001 : 			lz, allocator, options, lz_options));

  00070	4c 8b 4c 24 58	 mov	 r9, QWORD PTR lz_options$[rsp]
  00075	4c 8b 44 24 50	 mov	 r8, QWORD PTR options$[rsp]
  0007a	48 8b 54 24 48	 mov	 rdx, QWORD PTR allocator$[rsp]
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lz$[rsp]
  00084	e8 00 00 00 00	 call	 lzma_lzma_decoder_create
  00089	89 44 24 20	 mov	 DWORD PTR ret_$34514[rsp], eax
  0008d	83 7c 24 20 00	 cmp	 DWORD PTR ret_$34514[rsp], 0
  00092	74 06		 je	 SHORT $LN1@lzma_decod@3
  00094	8b 44 24 20	 mov	 eax, DWORD PTR ret_$34514[rsp]
  00098	eb 2e		 jmp	 SHORT $LN6@lzma_decod@3
$LN1@lzma_decod@3:
  0009a	33 c0		 xor	 eax, eax
  0009c	85 c0		 test	 eax, eax
  0009e	75 d0		 jne	 SHORT $LN4@lzma_decod@3

; 1002 : 
; 1003 : 	lzma_decoder_reset(lz->coder, options);

  000a0	48 8b 54 24 50	 mov	 rdx, QWORD PTR options$[rsp]
  000a5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lz$[rsp]
  000aa	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ad	e8 00 00 00 00	 call	 lzma_decoder_reset

; 1004 : 	lzma_decoder_uncompressed(lz->coder, LZMA_VLI_UNKNOWN);

  000b2	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lz$[rsp]
  000be	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000c1	e8 00 00 00 00	 call	 lzma_decoder_uncompressed

; 1005 : 
; 1006 : 	return LZMA_OK;

  000c6	33 c0		 xor	 eax, eax
$LN6@lzma_decod@3:

; 1007 : }

  000c8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cc	c3		 ret	 0
lzma_decoder_init ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_lzma_decoder_init DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$lzma_lzma_decoder_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_lzma_decoder_init DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_lzma_decoder_init
_TEXT	SEGMENT
next$ = 48
allocator$ = 56
filters$ = 64
lzma_lzma_decoder_init PROC				; COMDAT

; 1013 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1014 : 	// LZMA can only be the last filter in the chain. This is enforced
; 1015 : 	// by the raw_decoder initialization.
; 1016 : 	assert(filters[1].init == NULL);
; 1017 : 
; 1018 : 	return lzma_lz_decoder_init(next, allocator, filters,
; 1019 : 			&lzma_decoder_init);

  00013	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:lzma_decoder_init
  0001a	4c 8b 44 24 40	 mov	 r8, QWORD PTR filters$[rsp]
  0001f	48 8b 54 24 38	 mov	 rdx, QWORD PTR allocator$[rsp]
  00024	48 8b 4c 24 30	 mov	 rcx, QWORD PTR next$[rsp]
  00029	e8 00 00 00 00	 call	 lzma_lz_decoder_init

; 1020 : }

  0002e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00032	c3		 ret	 0
lzma_lzma_decoder_init ENDP
END
