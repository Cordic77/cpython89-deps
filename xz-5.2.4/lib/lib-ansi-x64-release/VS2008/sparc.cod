; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	lzma_simple_sparc_decoder_init
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\simple\sparc.c
pdata	SEGMENT
$pdata$sparc_code DD imagerel sparc_code
	DD	imagerel sparc_code+460
	DD	imagerel $unwind$sparc_code
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sparc_code DD 011701H
	DD	02217H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sparc_code
_TEXT	SEGMENT
i$ = 0
src$32960 = 8
dest$32965 = 12
simple$ = 32
now_pos$ = 40
is_encoder$ = 48
buffer$ = 56
size$ = 64
sparc_code PROC						; COMDAT

; 21   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 88 44 24 18	 mov	 BYTE PTR [rsp+24], r8b
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 18	 sub	 rsp, 24

; 22   : 	size_t i;
; 23   : 	for (i = 0; i + 4 <= size; i += 4) {

  00017	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0001f	eb 0c		 jmp	 SHORT $LN8@sparc_code
$LN7@sparc_code:
  00021	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  00025	48 83 c0 04	 add	 rax, 4
  00029	48 89 04 24	 mov	 QWORD PTR i$[rsp], rax
$LN8@sparc_code:
  0002d	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  00031	48 83 c0 04	 add	 rax, 4
  00035	48 3b 44 24 40	 cmp	 rax, QWORD PTR size$[rsp]
  0003a	0f 87 83 01 00
	00		 ja	 $LN6@sparc_code

; 24   : 
; 25   : 		if ((buffer[i] == 0x40 && (buffer[i + 1] & 0xC0) == 0x00)
; 26   : 				|| (buffer[i] == 0x7F
; 27   : 				&& (buffer[i + 1] & 0xC0) == 0xC0)) {

  00040	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  00044	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  00049	48 03 c1	 add	 rax, rcx
  0004c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0004f	83 f8 40	 cmp	 eax, 64			; 00000040H
  00052	75 19		 jne	 SHORT $LN3@sparc_code
  00054	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  00058	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  0005d	48 03 c1	 add	 rax, rcx
  00060	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00064	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  00069	85 c0		 test	 eax, eax
  0006b	74 38		 je	 SHORT $LN4@sparc_code
$LN3@sparc_code:
  0006d	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  00071	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  00076	48 03 c1	 add	 rax, rcx
  00079	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0007c	83 f8 7f	 cmp	 eax, 127		; 0000007fH
  0007f	0f 85 39 01 00
	00		 jne	 $LN5@sparc_code
  00085	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  00089	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  0008e	48 03 c1	 add	 rax, rcx
  00091	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00095	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  0009a	3d c0 00 00 00	 cmp	 eax, 192		; 000000c0H
  0009f	0f 85 19 01 00
	00		 jne	 $LN5@sparc_code
$LN4@sparc_code:

; 28   : 
; 29   : 			uint32_t src = ((uint32_t)buffer[i + 0] << 24)
; 30   : 					| ((uint32_t)buffer[i + 1] << 16)
; 31   : 					| ((uint32_t)buffer[i + 2] << 8)
; 32   : 					| ((uint32_t)buffer[i + 3]);

  000a5	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  000a9	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  000ae	48 03 c1	 add	 rax, rcx
  000b1	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  000b4	c1 e2 18	 shl	 edx, 24
  000b7	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  000bb	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  000c0	48 03 c1	 add	 rax, rcx
  000c3	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  000c7	c1 e0 10	 shl	 eax, 16
  000ca	0b d0		 or	 edx, eax
  000cc	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  000d0	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  000d5	48 03 c1	 add	 rax, rcx
  000d8	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  000dc	c1 e0 08	 shl	 eax, 8
  000df	0b d0		 or	 edx, eax
  000e1	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  000e5	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  000ea	48 03 c1	 add	 rax, rcx
  000ed	0f b6 48 03	 movzx	 ecx, BYTE PTR [rax+3]
  000f1	8b c2		 mov	 eax, edx
  000f3	0b c1		 or	 eax, ecx
  000f5	89 44 24 08	 mov	 DWORD PTR src$32960[rsp], eax

; 33   : 
; 34   : 			src <<= 2;

  000f9	8b 44 24 08	 mov	 eax, DWORD PTR src$32960[rsp]
  000fd	c1 e0 02	 shl	 eax, 2
  00100	89 44 24 08	 mov	 DWORD PTR src$32960[rsp], eax

; 35   : 
; 36   :           {
; 37   : 			uint32_t dest;
; 38   : 			if (is_encoder)

  00104	0f b6 44 24 30	 movzx	 eax, BYTE PTR is_encoder$[rsp]
  00109	85 c0		 test	 eax, eax
  0010b	74 13		 je	 SHORT $LN2@sparc_code

; 39   : 				dest = now_pos + (uint32_t)(i) + src;

  0010d	8b 0c 24	 mov	 ecx, DWORD PTR i$[rsp]
  00110	8b 44 24 28	 mov	 eax, DWORD PTR now_pos$[rsp]
  00114	03 c1		 add	 eax, ecx
  00116	03 44 24 08	 add	 eax, DWORD PTR src$32960[rsp]
  0011a	89 44 24 0c	 mov	 DWORD PTR dest$32965[rsp], eax

; 40   : 			else

  0011e	eb 13		 jmp	 SHORT $LN1@sparc_code
$LN2@sparc_code:

; 41   : 				dest = src - (now_pos + (uint32_t)(i));

  00120	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00123	8b 4c 24 28	 mov	 ecx, DWORD PTR now_pos$[rsp]
  00127	03 c8		 add	 ecx, eax
  00129	8b 44 24 08	 mov	 eax, DWORD PTR src$32960[rsp]
  0012d	2b c1		 sub	 eax, ecx
  0012f	89 44 24 0c	 mov	 DWORD PTR dest$32965[rsp], eax
$LN1@sparc_code:

; 42   : 
; 43   : 			dest >>= 2;

  00133	8b 44 24 0c	 mov	 eax, DWORD PTR dest$32965[rsp]
  00137	c1 e8 02	 shr	 eax, 2
  0013a	89 44 24 0c	 mov	 DWORD PTR dest$32965[rsp], eax

; 44   : 
; 45   : 			dest = (((0 - ((dest >> 22) & 1)) << 22) & 0x3FFFFFFF)
; 46   : 					| (dest & 0x3FFFFF)
; 47   : 					| 0x40000000;

  0013e	8b 4c 24 0c	 mov	 ecx, DWORD PTR dest$32965[rsp]
  00142	c1 e9 16	 shr	 ecx, 22
  00145	83 e1 01	 and	 ecx, 1
  00148	33 c0		 xor	 eax, eax
  0014a	2b c1		 sub	 eax, ecx
  0014c	c1 e0 16	 shl	 eax, 22
  0014f	25 ff ff ff 3f	 and	 eax, 1073741823		; 3fffffffH
  00154	8b 4c 24 0c	 mov	 ecx, DWORD PTR dest$32965[rsp]
  00158	81 e1 ff ff 3f
	00		 and	 ecx, 4194303		; 003fffffH
  0015e	0b c1		 or	 eax, ecx
  00160	0d 00 00 00 40	 or	 eax, 1073741824		; 40000000H
  00165	89 44 24 0c	 mov	 DWORD PTR dest$32965[rsp], eax

; 48   : 
; 49   : 			buffer[i + 0] = (uint8_t)(dest >> 24);

  00169	8b 54 24 0c	 mov	 edx, DWORD PTR dest$32965[rsp]
  0016d	c1 ea 18	 shr	 edx, 24
  00170	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  00174	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  00179	48 03 c1	 add	 rax, rcx
  0017c	88 10		 mov	 BYTE PTR [rax], dl

; 50   : 			buffer[i + 1] = (uint8_t)(dest >> 16);

  0017e	8b 54 24 0c	 mov	 edx, DWORD PTR dest$32965[rsp]
  00182	c1 ea 10	 shr	 edx, 16
  00185	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  00189	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  0018e	48 03 c1	 add	 rax, rcx
  00191	88 50 01	 mov	 BYTE PTR [rax+1], dl

; 51   : 			buffer[i + 2] = (uint8_t)(dest >> 8);

  00194	8b 54 24 0c	 mov	 edx, DWORD PTR dest$32965[rsp]
  00198	c1 ea 08	 shr	 edx, 8
  0019b	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  0019f	48 8b 44 24 38	 mov	 rax, QWORD PTR buffer$[rsp]
  001a4	48 03 c1	 add	 rax, rcx
  001a7	88 50 02	 mov	 BYTE PTR [rax+2], dl

; 52   : 			buffer[i + 3] = (uint8_t)(dest);

  001aa	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  001ae	48 8b 4c 24 38	 mov	 rcx, QWORD PTR buffer$[rsp]
  001b3	48 03 c8	 add	 rcx, rax
  001b6	0f b6 44 24 0c	 movzx	 eax, BYTE PTR dest$32965[rsp]
  001bb	88 41 03	 mov	 BYTE PTR [rcx+3], al
$LN5@sparc_code:

; 53   : 		  }
; 54   : 		}
; 55   : 	}

  001be	e9 5e fe ff ff	 jmp	 $LN7@sparc_code
$LN6@sparc_code:

; 56   : 
; 57   : 	return i;

  001c3	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]

; 58   : }

  001c7	48 83 c4 18	 add	 rsp, 24
  001cb	c3		 ret	 0
sparc_code ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$sparc_coder_init DD imagerel sparc_coder_init
	DD	imagerel sparc_coder_init+91
	DD	imagerel $unwind$sparc_coder_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sparc_coder_init DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT sparc_coder_init
_TEXT	SEGMENT
next$ = 80
allocator$ = 88
filters$ = 96
is_encoder$ = 104
sparc_coder_init PROC					; COMDAT

; 64   : {

  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 65   : 	return lzma_simple_coder_init(next, allocator, filters,
; 66   : 			&sparc_code, 0, 4, 4, is_encoder);

  00018	0f b6 44 24 68	 movzx	 eax, BYTE PTR is_encoder$[rsp]
  0001d	88 44 24 38	 mov	 BYTE PTR [rsp+56], al
  00021	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR [rsp+48], 4
  00029	48 c7 44 24 28
	04 00 00 00	 mov	 QWORD PTR [rsp+40], 4
  00032	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0003b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:sparc_code
  00042	4c 8b 44 24 60	 mov	 r8, QWORD PTR filters$[rsp]
  00047	48 8b 54 24 58	 mov	 rdx, QWORD PTR allocator$[rsp]
  0004c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  00051	e8 00 00 00 00	 call	 lzma_simple_coder_init

; 67   : }

  00056	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005a	c3		 ret	 0
sparc_coder_init ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_simple_sparc_decoder_init DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$lzma_simple_sparc_decoder_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_simple_sparc_decoder_init DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_simple_sparc_decoder_init
_TEXT	SEGMENT
next$ = 48
allocator$ = 56
filters$ = 64
lzma_simple_sparc_decoder_init PROC			; COMDAT

; 83   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 84   : 	return sparc_coder_init(next, allocator, filters, false);

  00013	45 33 c9	 xor	 r9d, r9d
  00016	4c 8b 44 24 40	 mov	 r8, QWORD PTR filters$[rsp]
  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR allocator$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR next$[rsp]
  00025	e8 00 00 00 00	 call	 sparc_coder_init

; 85   : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
lzma_simple_sparc_decoder_init ENDP
END
