; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	lzma_delta_props_decode
PUBLIC	lzma_delta_decoder_init
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\delta\delta_decoder.c
pdata	SEGMENT
$pdata$decode_buffer DD imagerel decode_buffer
	DD	imagerel decode_buffer+213
	DD	imagerel $unwind$decode_buffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decode_buffer DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT decode_buffer
_TEXT	SEGMENT
distance$ = 0
i$32849 = 8
coder$ = 32
buffer$ = 40
size$ = 48
decode_buffer PROC					; COMDAT

; 19   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 20   : 	const size_t distance = coder->distance;

  00013	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00018	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0001c	48 89 04 24	 mov	 QWORD PTR distance$[rsp], rax

; 21   : 
; 22   :   {
; 23   :   size_t i;
; 24   : 	for (i = 0; i < size; ++i) {

  00020	48 c7 44 24 08
	00 00 00 00	 mov	 QWORD PTR i$32849[rsp], 0
  00029	eb 0e		 jmp	 SHORT $LN3@decode_buf
$LN2@decode_buf:
  0002b	48 8b 44 24 08	 mov	 rax, QWORD PTR i$32849[rsp]
  00030	48 83 c0 01	 add	 rax, 1
  00034	48 89 44 24 08	 mov	 QWORD PTR i$32849[rsp], rax
$LN3@decode_buf:
  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  0003e	48 39 44 24 08	 cmp	 QWORD PTR i$32849[rsp], rax
  00043	0f 83 87 00 00
	00		 jae	 $LN1@decode_buf

; 25   : 		buffer[i] += coder->history[(distance + coder->pos) & 0xFF];

  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  0004e	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  00052	48 8b 0c 24	 mov	 rcx, QWORD PTR distance$[rsp]
  00056	48 03 c8	 add	 rcx, rax
  00059	48 81 e1 ff 00
	00 00		 and	 rcx, 255		; 000000ffH
  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00065	44 0f b6 44 08
	51		 movzx	 r8d, BYTE PTR [rax+rcx+81]
  0006b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR i$32849[rsp]
  00070	48 8b 44 24 28	 mov	 rax, QWORD PTR buffer$[rsp]
  00075	48 03 c1	 add	 rax, rcx
  00078	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  0007b	41 03 d0	 add	 edx, r8d
  0007e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR i$32849[rsp]
  00083	48 8b 44 24 28	 mov	 rax, QWORD PTR buffer$[rsp]
  00088	48 03 c1	 add	 rax, rcx
  0008b	88 10		 mov	 BYTE PTR [rax], dl

; 26   : 		coder->history[coder->pos-- & 0xFF] = buffer[i];

  0008d	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  00092	0f b6 40 50	 movzx	 eax, BYTE PTR [rax+80]
  00096	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0009b	48 63 d0	 movsxd	 rdx, eax
  0009e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR i$32849[rsp]
  000a3	48 8b 44 24 28	 mov	 rax, QWORD PTR buffer$[rsp]
  000a8	48 03 c1	 add	 rax, rcx
  000ab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR coder$[rsp]
  000b0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000b3	88 44 11 51	 mov	 BYTE PTR [rcx+rdx+81], al
  000b7	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  000bc	0f b6 48 50	 movzx	 ecx, BYTE PTR [rax+80]
  000c0	80 e9 01	 sub	 cl, 1
  000c3	48 8b 44 24 20	 mov	 rax, QWORD PTR coder$[rsp]
  000c8	88 48 50	 mov	 BYTE PTR [rax+80], cl

; 27   : 	}

  000cb	e9 5b ff ff ff	 jmp	 $LN2@decode_buf
$LN1@decode_buf:

; 28   :   }
; 29   : }

  000d0	48 83 c4 18	 add	 rsp, 24
  000d4	c3		 ret	 0
decode_buffer ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_delta_props_decode DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$lzma_delta_props_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_delta_props_decode DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_delta_props_decode
_TEXT	SEGMENT
opt$32894 = 32
options$ = 64
allocator$ = 72
props$ = 80
props_size$ = 88
lzma_delta_props_decode PROC				; COMDAT

; 68   : {

$LN5:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 69   : 	if (props_size != 1)

  00018	48 83 7c 24 58
	01		 cmp	 QWORD PTR props_size$[rsp], 1
  0001e	74 07		 je	 SHORT $LN2@lzma_delta@2

; 70   : 		return LZMA_OPTIONS_ERROR;

  00020	b8 08 00 00 00	 mov	 eax, 8
  00025	eb 50		 jmp	 SHORT $LN3@lzma_delta@2
$LN2@lzma_delta@2:

; 71   : 
; 72   :   { lzma_options_delta *opt
; 73   : 			= lzma_alloc(sizeof(lzma_options_delta), allocator);

  00027	48 8b 54 24 48	 mov	 rdx, QWORD PTR allocator$[rsp]
  0002c	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  00031	e8 00 00 00 00	 call	 lzma_alloc
  00036	48 89 44 24 20	 mov	 QWORD PTR opt$32894[rsp], rax

; 74   : 	if (opt == NULL)

  0003b	48 83 7c 24 20
	00		 cmp	 QWORD PTR opt$32894[rsp], 0
  00041	75 07		 jne	 SHORT $LN1@lzma_delta@2

; 75   : 		return LZMA_MEM_ERROR;

  00043	b8 05 00 00 00	 mov	 eax, 5
  00048	eb 2d		 jmp	 SHORT $LN3@lzma_delta@2
$LN1@lzma_delta@2:

; 76   : 
; 77   : 	opt->type = LZMA_DELTA_TYPE_BYTE;

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR opt$32894[rsp]
  0004f	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 78   : 	opt->dist = props[0] + 1;

  00055	48 8b 44 24 50	 mov	 rax, QWORD PTR props$[rsp]
  0005a	0f b6 08	 movzx	 ecx, BYTE PTR [rax]
  0005d	83 c1 01	 add	 ecx, 1
  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR opt$32894[rsp]
  00065	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 79   : 
; 80   : 	*options = opt;

  00068	48 8b 4c 24 40	 mov	 rcx, QWORD PTR options$[rsp]
  0006d	48 8b 44 24 20	 mov	 rax, QWORD PTR opt$32894[rsp]
  00072	48 89 01	 mov	 QWORD PTR [rcx], rax

; 81   :   }
; 82   : 
; 83   : 	return LZMA_OK;

  00075	33 c0		 xor	 eax, eax
$LN3@lzma_delta@2:

; 84   : }

  00077	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007b	c3		 ret	 0
lzma_delta_props_decode ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$delta_decode DD imagerel delta_decode
	DD	imagerel delta_decode+214
	DD	imagerel $unwind$delta_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$delta_decode DD 011801H
	DD	0e218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT delta_decode
_TEXT	SEGMENT
coder$ = 80
out_start$32875 = 88
ret$32876 = 96
coder_ptr$ = 128
allocator$ = 136
in$ = 144
in_pos$ = 152
in_size$ = 160
out$ = 168
out_pos$ = 176
out_size$ = 184
action$ = 192
delta_decode PROC					; COMDAT

; 37   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 38   : 	lzma_delta_coder *coder = coder_ptr;

  00018	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR coder_ptr$[rsp]
  00020	48 89 44 24 50	 mov	 QWORD PTR coder$[rsp], rax

; 39   : 
; 40   : 	assert(coder->next.code != NULL);
; 41   : 
; 42   :   {
; 43   : 	const size_t out_start = *out_pos;

  00025	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR out_pos$[rsp]
  0002d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00030	48 89 44 24 58	 mov	 QWORD PTR out_start$32875[rsp], rax

; 44   : 
; 45   : 	const lzma_ret ret = coder->next.code(coder->next.coder, allocator,
; 46   : 			in, in_pos, in_size, out, out_pos, out_size,
; 47   : 			action);

  00035	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR action$[rsp]
  0003c	89 44 24 40	 mov	 DWORD PTR [rsp+64], eax
  00040	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR out_size$[rsp]
  00048	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0004d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR out_pos$[rsp]
  00055	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0005a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR out$[rsp]
  00062	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00067	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR in_size$[rsp]
  0006f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00074	4c 8b 8c 24 98
	00 00 00	 mov	 r9, QWORD PTR in_pos$[rsp]
  0007c	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR in$[rsp]
  00084	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR allocator$[rsp]
  0008c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR coder$[rsp]
  00091	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00094	48 8b 44 24 50	 mov	 rax, QWORD PTR coder$[rsp]
  00099	ff 50 18	 call	 QWORD PTR [rax+24]
  0009c	89 44 24 60	 mov	 DWORD PTR ret$32876[rsp], eax

; 48   : 
; 49   : 	decode_buffer(coder, out + out_start, *out_pos - out_start);

  000a0	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR out_pos$[rsp]
  000a8	48 8b 44 24 58	 mov	 rax, QWORD PTR out_start$32875[rsp]
  000ad	4d 8b 00	 mov	 r8, QWORD PTR [r8]
  000b0	4c 2b c0	 sub	 r8, rax
  000b3	48 8b 44 24 58	 mov	 rax, QWORD PTR out_start$32875[rsp]
  000b8	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR out$[rsp]
  000c0	48 03 d0	 add	 rdx, rax
  000c3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR coder$[rsp]
  000c8	e8 00 00 00 00	 call	 decode_buffer

; 50   : 
; 51   : 	return ret;

  000cd	8b 44 24 60	 mov	 eax, DWORD PTR ret$32876[rsp]

; 52   :   }
; 53   : }

  000d1	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000d5	c3		 ret	 0
delta_decode ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_delta_decoder_init DD imagerel $LN3
	DD	imagerel $LN3+60
	DD	imagerel $unwind$lzma_delta_decoder_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_delta_decoder_init DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_delta_decoder_init
_TEXT	SEGMENT
next$ = 48
allocator$ = 56
filters$ = 64
lzma_delta_decoder_init PROC				; COMDAT

; 59   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 60   : 	next->code = &delta_decode;

  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR next$[rsp]
  00018	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:delta_decode
  0001f	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 61   : 	return lzma_delta_coder_init(next, allocator, filters);

  00023	4c 8b 44 24 40	 mov	 r8, QWORD PTR filters$[rsp]
  00028	48 8b 54 24 38	 mov	 rdx, QWORD PTR allocator$[rsp]
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR next$[rsp]
  00032	e8 00 00 00 00	 call	 lzma_delta_coder_init

; 62   : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
lzma_delta_decoder_init ENDP
END
