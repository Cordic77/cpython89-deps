; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	lzma_filter_flags_encode
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\common\filter_flags_encoder.c
pdata	SEGMENT
$pdata$lzma_filter_flags_encode DD imagerel $LN21
	DD	imagerel $LN21+318
	DD	imagerel $unwind$lzma_filter_flags_encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_filter_flags_encode DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_filter_flags_encode
_TEXT	SEGMENT
ret_$32840 = 48
props_size$32843 = 52
ret_$32847 = 56
ret_$32852 = 60
ret_$32859 = 64
filter$ = 96
out$ = 104
out_pos$ = 112
out_size$ = 120
lzma_filter_flags_encode PROC				; COMDAT

; 33   : {

$LN21:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 34   : 	// Filter ID
; 35   : 	if (filter->id >= LZMA_FILTER_RESERVED_START)

  00018	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filter$[rsp]
  0001d	48 b8 00 00 00
	00 00 00 00 40	 mov	 rax, 4611686018427387904 ; 4000000000000000H
  00027	48 39 01	 cmp	 QWORD PTR [rcx], rax
  0002a	72 0a		 jb	 SHORT $LN18@lzma_filte@2

; 36   : 		return LZMA_PROG_ERROR;

  0002c	b8 0b 00 00 00	 mov	 eax, 11
  00031	e9 03 01 00 00	 jmp	 $LN19@lzma_filte@2
$LN18@lzma_filte@2:
$LN17@lzma_filte@2:

; 37   : 
; 38   : 	return_if_error(lzma_vli_encode(filter->id, NULL,
; 39   : 			out, out_pos, out_size));

  00036	48 8b 44 24 78	 mov	 rax, QWORD PTR out_size$[rsp]
  0003b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00040	4c 8b 4c 24 70	 mov	 r9, QWORD PTR out_pos$[rsp]
  00045	4c 8b 44 24 68	 mov	 r8, QWORD PTR out$[rsp]
  0004a	33 d2		 xor	 edx, edx
  0004c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filter$[rsp]
  00051	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00054	e8 00 00 00 00	 call	 lzma_vli_encode
  00059	89 44 24 30	 mov	 DWORD PTR ret_$32840[rsp], eax
  0005d	83 7c 24 30 00	 cmp	 DWORD PTR ret_$32840[rsp], 0
  00062	74 09		 je	 SHORT $LN14@lzma_filte@2
  00064	8b 44 24 30	 mov	 eax, DWORD PTR ret_$32840[rsp]
  00068	e9 cc 00 00 00	 jmp	 $LN19@lzma_filte@2
$LN14@lzma_filte@2:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 c3		 jne	 SHORT $LN17@lzma_filte@2
$LN13@lzma_filte@2:

; 40   : 
; 41   : 	// Size of Properties
; 42   :   {
; 43   : 	uint32_t props_size;
; 44   : 	return_if_error(lzma_properties_size(&props_size, filter));

  00073	48 8b 54 24 60	 mov	 rdx, QWORD PTR filter$[rsp]
  00078	48 8d 4c 24 34	 lea	 rcx, QWORD PTR props_size$32843[rsp]
  0007d	e8 00 00 00 00	 call	 lzma_properties_size
  00082	89 44 24 38	 mov	 DWORD PTR ret_$32847[rsp], eax
  00086	83 7c 24 38 00	 cmp	 DWORD PTR ret_$32847[rsp], 0
  0008b	74 09		 je	 SHORT $LN10@lzma_filte@2
  0008d	8b 44 24 38	 mov	 eax, DWORD PTR ret_$32847[rsp]
  00091	e9 a3 00 00 00	 jmp	 $LN19@lzma_filte@2
$LN10@lzma_filte@2:
  00096	33 c0		 xor	 eax, eax
  00098	85 c0		 test	 eax, eax
  0009a	75 d7		 jne	 SHORT $LN13@lzma_filte@2
$LN9@lzma_filte@2:

; 45   : 	return_if_error(lzma_vli_encode(props_size, NULL,
; 46   : 			out, out_pos, out_size));

  0009c	8b 4c 24 34	 mov	 ecx, DWORD PTR props_size$32843[rsp]
  000a0	48 8b 44 24 78	 mov	 rax, QWORD PTR out_size$[rsp]
  000a5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000aa	4c 8b 4c 24 70	 mov	 r9, QWORD PTR out_pos$[rsp]
  000af	4c 8b 44 24 68	 mov	 r8, QWORD PTR out$[rsp]
  000b4	33 d2		 xor	 edx, edx
  000b6	e8 00 00 00 00	 call	 lzma_vli_encode
  000bb	89 44 24 3c	 mov	 DWORD PTR ret_$32852[rsp], eax
  000bf	83 7c 24 3c 00	 cmp	 DWORD PTR ret_$32852[rsp], 0
  000c4	74 06		 je	 SHORT $LN6@lzma_filte@2
  000c6	8b 44 24 3c	 mov	 eax, DWORD PTR ret_$32852[rsp]
  000ca	eb 6d		 jmp	 SHORT $LN19@lzma_filte@2
$LN6@lzma_filte@2:
  000cc	33 c0		 xor	 eax, eax
  000ce	85 c0		 test	 eax, eax
  000d0	75 ca		 jne	 SHORT $LN9@lzma_filte@2

; 47   : 
; 48   : 	// Filter Properties
; 49   : 	if (out_size - *out_pos < props_size)

  000d2	48 8b 44 24 70	 mov	 rax, QWORD PTR out_pos$[rsp]
  000d7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000da	48 8b 4c 24 78	 mov	 rcx, QWORD PTR out_size$[rsp]
  000df	48 2b c8	 sub	 rcx, rax
  000e2	8b 44 24 34	 mov	 eax, DWORD PTR props_size$32843[rsp]
  000e6	48 3b c8	 cmp	 rcx, rax
  000e9	73 07		 jae	 SHORT $LN5@lzma_filte@2

; 50   : 		return LZMA_PROG_ERROR;

  000eb	b8 0b 00 00 00	 mov	 eax, 11
  000f0	eb 47		 jmp	 SHORT $LN19@lzma_filte@2
$LN5@lzma_filte@2:
$LN4@lzma_filte@2:

; 51   : 
; 52   : 	return_if_error(lzma_properties_encode(filter, out + *out_pos));

  000f2	48 8b 44 24 70	 mov	 rax, QWORD PTR out_pos$[rsp]
  000f7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000fa	48 8b 54 24 68	 mov	 rdx, QWORD PTR out$[rsp]
  000ff	48 03 d0	 add	 rdx, rax
  00102	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filter$[rsp]
  00107	e8 00 00 00 00	 call	 lzma_properties_encode
  0010c	89 44 24 40	 mov	 DWORD PTR ret_$32859[rsp], eax
  00110	83 7c 24 40 00	 cmp	 DWORD PTR ret_$32859[rsp], 0
  00115	74 06		 je	 SHORT $LN1@lzma_filte@2
  00117	8b 44 24 40	 mov	 eax, DWORD PTR ret_$32859[rsp]
  0011b	eb 1c		 jmp	 SHORT $LN19@lzma_filte@2
$LN1@lzma_filte@2:
  0011d	33 c0		 xor	 eax, eax
  0011f	85 c0		 test	 eax, eax
  00121	75 cf		 jne	 SHORT $LN4@lzma_filte@2

; 53   : 
; 54   : 	*out_pos += props_size;

  00123	8b 4c 24 34	 mov	 ecx, DWORD PTR props_size$32843[rsp]
  00127	48 8b 44 24 70	 mov	 rax, QWORD PTR out_pos$[rsp]
  0012c	48 03 08	 add	 rcx, QWORD PTR [rax]
  0012f	48 8b 44 24 70	 mov	 rax, QWORD PTR out_pos$[rsp]
  00134	48 89 08	 mov	 QWORD PTR [rax], rcx

; 55   :   }
; 56   : 
; 57   : 	return LZMA_OK;

  00137	33 c0		 xor	 eax, eax
$LN19@lzma_filte@2:

; 58   : }

  00139	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013d	c3		 ret	 0
lzma_filter_flags_encode ENDP
_TEXT	ENDS
PUBLIC	lzma_filter_flags_size
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_filter_flags_size DD imagerel $LN8
	DD	imagerel $LN8+133
	DD	imagerel $unwind$lzma_filter_flags_size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_filter_flags_size DD 020f01H
	DD	0300b520fH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_filter_flags_size
_TEXT	SEGMENT
ret_$32825 = 32
size$ = 64
filter$ = 72
lzma_filter_flags_size PROC				; COMDAT

; 18   : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	53		 push	 rbx
  0000b	48 83 ec 30	 sub	 rsp, 48			; 00000030H

; 19   : 	if (filter->id >= LZMA_FILTER_RESERVED_START)

  0000f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR filter$[rsp]
  00014	48 b8 00 00 00
	00 00 00 00 40	 mov	 rax, 4611686018427387904 ; 4000000000000000H
  0001e	48 39 01	 cmp	 QWORD PTR [rcx], rax
  00021	72 07		 jb	 SHORT $LN5@lzma_filte@3

; 20   : 		return LZMA_PROG_ERROR;

  00023	b8 0b 00 00 00	 mov	 eax, 11
  00028	eb 55		 jmp	 SHORT $LN6@lzma_filte@3
$LN5@lzma_filte@3:
$LN4@lzma_filte@3:

; 21   : 
; 22   : 	return_if_error(lzma_properties_size(size, filter));

  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR filter$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR size$[rsp]
  00034	e8 00 00 00 00	 call	 lzma_properties_size
  00039	89 44 24 20	 mov	 DWORD PTR ret_$32825[rsp], eax
  0003d	83 7c 24 20 00	 cmp	 DWORD PTR ret_$32825[rsp], 0
  00042	74 06		 je	 SHORT $LN1@lzma_filte@3
  00044	8b 44 24 20	 mov	 eax, DWORD PTR ret_$32825[rsp]
  00048	eb 35		 jmp	 SHORT $LN6@lzma_filte@3
$LN1@lzma_filte@3:
  0004a	33 c0		 xor	 eax, eax
  0004c	85 c0		 test	 eax, eax
  0004e	75 da		 jne	 SHORT $LN4@lzma_filte@3

; 23   : 
; 24   : 	*size += lzma_vli_size(filter->id) + lzma_vli_size(*size);

  00050	48 8b 4c 24 48	 mov	 rcx, QWORD PTR filter$[rsp]
  00055	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00058	e8 00 00 00 00	 call	 lzma_vli_size
  0005d	8b d8		 mov	 ebx, eax
  0005f	48 8b 44 24 40	 mov	 rax, QWORD PTR size$[rsp]
  00064	8b 08		 mov	 ecx, DWORD PTR [rax]
  00066	e8 00 00 00 00	 call	 lzma_vli_size
  0006b	8b cb		 mov	 ecx, ebx
  0006d	03 c8		 add	 ecx, eax
  0006f	48 8b 44 24 40	 mov	 rax, QWORD PTR size$[rsp]
  00074	03 08		 add	 ecx, DWORD PTR [rax]
  00076	48 8b 44 24 40	 mov	 rax, QWORD PTR size$[rsp]
  0007b	89 08		 mov	 DWORD PTR [rax], ecx

; 25   : 
; 26   : 	return LZMA_OK;

  0007d	33 c0		 xor	 eax, eax
$LN6@lzma_filte@3:

; 27   : }

  0007f	48 83 c4 30	 add	 rsp, 48			; 00000030H
  00083	5b		 pop	 rbx
  00084	c3		 ret	 0
lzma_filter_flags_size ENDP
END
