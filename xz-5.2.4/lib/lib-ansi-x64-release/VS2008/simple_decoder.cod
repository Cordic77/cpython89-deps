; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	lzma_simple_props_decode
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\common\tuklib_integer.h
pdata	SEGMENT
$pdata$read32le DD imagerel read32le
	DD	imagerel read32le+27
	DD	imagerel $unwind$read32le
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$read32le DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT read32le
_TEXT	SEGMENT
num$ = 0
buf$ = 32
read32le PROC						; COMDAT

; 220  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 221  : 	uint32_t num = *(const uint32_t *)buf;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  0000e	8b 00		 mov	 eax, DWORD PTR [rax]
  00010	89 04 24	 mov	 DWORD PTR num$[rsp], eax

; 222  : 	return conv32le(num);

  00013	8b 04 24	 mov	 eax, DWORD PTR num$[rsp]

; 223  : }

  00016	48 83 c4 18	 add	 rsp, 24
  0001a	c3		 ret	 0
read32le ENDP
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_simple_props_decode DD imagerel $LN10
	DD	imagerel $LN10+155
	DD	imagerel $unwind$lzma_simple_props_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_simple_props_decode DD 011801H
	DD	06218H
; Function compile flags: /Odtp
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\simple\simple_decoder.c
xdata	ENDS
;	COMDAT lzma_simple_props_decode
_TEXT	SEGMENT
opt$32911 = 32
num$36118 = 40
options$ = 64
allocator$ = 72
props$ = 80
props_size$ = 88
lzma_simple_props_decode PROC				; COMDAT

; 19   : {

$LN10:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 20   : 	if (props_size == 0)

  00018	48 83 7c 24 58
	00		 cmp	 QWORD PTR props_size$[rsp], 0
  0001e	75 04		 jne	 SHORT $LN5@lzma_simpl

; 21   : 		return LZMA_OK;

  00020	33 c0		 xor	 eax, eax
  00022	eb 72		 jmp	 SHORT $LN6@lzma_simpl
$LN5@lzma_simpl:

; 22   : 
; 23   : 	if (props_size != 4)

  00024	48 83 7c 24 58
	04		 cmp	 QWORD PTR props_size$[rsp], 4
  0002a	74 07		 je	 SHORT $LN4@lzma_simpl

; 24   : 		return LZMA_OPTIONS_ERROR;

  0002c	b8 08 00 00 00	 mov	 eax, 8
  00031	eb 63		 jmp	 SHORT $LN6@lzma_simpl
$LN4@lzma_simpl:

; 25   : 
; 26   :   { lzma_options_bcj *opt = lzma_alloc(
; 27   : 			sizeof(lzma_options_bcj), allocator);

  00033	48 8b 54 24 48	 mov	 rdx, QWORD PTR allocator$[rsp]
  00038	b9 04 00 00 00	 mov	 ecx, 4
  0003d	e8 00 00 00 00	 call	 lzma_alloc
  00042	48 89 44 24 20	 mov	 QWORD PTR opt$32911[rsp], rax

; 28   : 	if (opt == NULL)

  00047	48 83 7c 24 20
	00		 cmp	 QWORD PTR opt$32911[rsp], 0
  0004d	75 07		 jne	 SHORT $LN3@lzma_simpl

; 29   : 		return LZMA_MEM_ERROR;

  0004f	b8 05 00 00 00	 mov	 eax, 5
  00054	eb 40		 jmp	 SHORT $LN6@lzma_simpl
$LN3@lzma_simpl:

; 30   : 
; 31   : 	opt->start_offset = unaligned_read32le(props);

  00056	48 8b 44 24 50	 mov	 rax, QWORD PTR props$[rsp]
  0005b	8b 00		 mov	 eax, DWORD PTR [rax]
  0005d	89 44 24 28	 mov	 DWORD PTR num$36118[rsp], eax
  00061	48 8b 4c 24 20	 mov	 rcx, QWORD PTR opt$32911[rsp]
  00066	8b 44 24 28	 mov	 eax, DWORD PTR num$36118[rsp]
  0006a	89 01		 mov	 DWORD PTR [rcx], eax

; 32   : 
; 33   : 	// Don't leave an options structure allocated if start_offset is zero.
; 34   : 	if (opt->start_offset == 0)

  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR opt$32911[rsp]
  00071	83 38 00	 cmp	 DWORD PTR [rax], 0
  00074	75 11		 jne	 SHORT $LN2@lzma_simpl

; 35   : 		lzma_free(opt, allocator);

  00076	48 8b 54 24 48	 mov	 rdx, QWORD PTR allocator$[rsp]
  0007b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR opt$32911[rsp]
  00080	e8 00 00 00 00	 call	 lzma_free

; 36   : 	else

  00085	eb 0d		 jmp	 SHORT $LN1@lzma_simpl
$LN2@lzma_simpl:

; 37   : 		*options = opt;

  00087	48 8b 4c 24 40	 mov	 rcx, QWORD PTR options$[rsp]
  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR opt$32911[rsp]
  00091	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN1@lzma_simpl:

; 38   :   }
; 39   : 
; 40   : 	return LZMA_OK;

  00094	33 c0		 xor	 eax, eax
$LN6@lzma_simpl:

; 41   : }

  00096	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009a	c3		 ret	 0
lzma_simple_props_decode ENDP
END
