; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

PUBLIC	lzma_crc64
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\check\crc64_fast.c
pdata	SEGMENT
$pdata$lzma_crc64 DD imagerel $LN10
	DD	imagerel $LN10+457
	DD	imagerel $unwind$lzma_crc64
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_crc64 DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_crc64
_TEXT	SEGMENT
limit$32869 = 0
tmp$32875 = 8
buf$ = 32
size$ = 40
crc$ = 48
lzma_crc64 PROC						; COMDAT

; 34   : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 35   : 	crc = ~crc;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR crc$[rsp]
  00018	48 f7 d0	 not	 rax
  0001b	48 89 44 24 30	 mov	 QWORD PTR crc$[rsp], rax

; 36   : 
; 37   : #ifdef WORDS_BIGENDIAN
; 38   : 	crc = bswap64(crc);
; 39   : #endif
; 40   : 
; 41   : 	if (size > 4) {

  00020	48 83 7c 24 28
	04		 cmp	 QWORD PTR size$[rsp], 4
  00026	0f 86 36 01 00
	00		 jbe	 $LN7@lzma_crc64
$LN6@lzma_crc64:

; 42   : 		while ((uintptr_t)(buf) & 3) {

  0002c	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  00031	48 83 e0 03	 and	 rax, 3
  00035	48 85 c0	 test	 rax, rax
  00038	74 50		 je	 SHORT $LN5@lzma_crc64

; 43   : 			crc = lzma_crc64_table[0][*buf++ ^ A1(crc)] ^ S8(crc);

  0003a	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  0003f	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR crc$[rsp]
  00047	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0004d	48 33 d0	 xor	 rdx, rax
  00050	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lzma_crc64_table
  00057	48 8b 4c 24 30	 mov	 rcx, QWORD PTR crc$[rsp]
  0005c	48 c1 e9 08	 shr	 rcx, 8
  00060	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]
  00064	48 33 c1	 xor	 rax, rcx
  00067	48 89 44 24 30	 mov	 QWORD PTR crc$[rsp], rax
  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  00071	48 83 c0 01	 add	 rax, 1
  00075	48 89 44 24 20	 mov	 QWORD PTR buf$[rsp], rax

; 44   : 			--size;

  0007a	48 8b 44 24 28	 mov	 rax, QWORD PTR size$[rsp]
  0007f	48 83 e8 01	 sub	 rax, 1
  00083	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax

; 45   : 		}

  00088	eb a2		 jmp	 SHORT $LN6@lzma_crc64
$LN5@lzma_crc64:

; 46   : 
; 47   : 	  {
; 48   : 		const uint8_t *const limit = buf + (size & ~(size_t)(3));

  0008a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR size$[rsp]
  0008f	48 83 e1 fc	 and	 rcx, -4
  00093	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  00098	48 03 c1	 add	 rax, rcx
  0009b	48 89 04 24	 mov	 QWORD PTR limit$32869[rsp], rax

; 49   : 		size &= (size_t)(3);

  0009f	48 8b 44 24 28	 mov	 rax, QWORD PTR size$[rsp]
  000a4	48 83 e0 03	 and	 rax, 3
  000a8	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax
$LN4@lzma_crc64:

; 50   : 
; 51   : 		while (buf < limit) {

  000ad	48 8b 04 24	 mov	 rax, QWORD PTR limit$32869[rsp]
  000b1	48 39 44 24 20	 cmp	 QWORD PTR buf$[rsp], rax
  000b6	0f 83 a6 00 00
	00		 jae	 $LN3@lzma_crc64

; 52   : #ifdef WORDS_BIGENDIAN
; 53   : 			const uint32_t tmp = (crc >> 32)
; 54   : 					^ *(const uint32_t *)(buf);
; 55   : #else
; 56   : 			const uint32_t tmp = (const uint32_t)(crc ^ *(const uint32_t *)(buf));

  000bc	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  000c1	8b 08		 mov	 ecx, DWORD PTR [rax]
  000c3	48 8b 44 24 30	 mov	 rax, QWORD PTR crc$[rsp]
  000c8	48 33 c1	 xor	 rax, rcx
  000cb	89 44 24 08	 mov	 DWORD PTR tmp$32875[rsp], eax

; 57   : #endif
; 58   : 			buf += 4;

  000cf	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  000d4	48 83 c0 04	 add	 rax, 4
  000d8	48 89 44 24 20	 mov	 QWORD PTR buf$[rsp], rax

; 59   : 
; 60   : 			crc = lzma_crc64_table[3][A(tmp)]
; 61   : 			    ^ lzma_crc64_table[2][B(tmp)]
; 62   : 			    ^ S32(crc)
; 63   : 			    ^ lzma_crc64_table[1][C(tmp)]
; 64   : 			    ^ lzma_crc64_table[0][D(tmp)];

  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:lzma_crc64_table
  000e4	8b 44 24 08	 mov	 eax, DWORD PTR tmp$32875[rsp]
  000e8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000ed	44 8b c0	 mov	 r8d, eax
  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lzma_crc64_table
  000f7	8b 44 24 08	 mov	 eax, DWORD PTR tmp$32875[rsp]
  000fb	c1 e8 08	 shr	 eax, 8
  000fe	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00103	8b c0		 mov	 eax, eax
  00105	48 8b 84 c1 00
	10 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+4096]
  0010d	4e 8b 84 c2 00
	18 00 00	 mov	 r8, QWORD PTR [rdx+r8*8+6144]
  00115	4c 33 c0	 xor	 r8, rax
  00118	48 8b 44 24 30	 mov	 rax, QWORD PTR crc$[rsp]
  0011d	48 c1 e8 20	 shr	 rax, 32			; 00000020H
  00121	4c 33 c0	 xor	 r8, rax
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lzma_crc64_table
  0012b	8b 44 24 08	 mov	 eax, DWORD PTR tmp$32875[rsp]
  0012f	c1 e8 10	 shr	 eax, 16
  00132	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00137	8b c0		 mov	 eax, eax
  00139	4c 33 84 c1 00
	08 00 00	 xor	 r8, QWORD PTR [rcx+rax*8+2048]
  00141	8b 44 24 08	 mov	 eax, DWORD PTR tmp$32875[rsp]
  00145	c1 e8 18	 shr	 eax, 24
  00148	8b d0		 mov	 edx, eax
  0014a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:lzma_crc64_table
  00151	49 8b c0	 mov	 rax, r8
  00154	48 33 04 d1	 xor	 rax, QWORD PTR [rcx+rdx*8]
  00158	48 89 44 24 30	 mov	 QWORD PTR crc$[rsp], rax

; 65   : 		}

  0015d	e9 4b ff ff ff	 jmp	 $LN4@lzma_crc64
$LN3@lzma_crc64:
$LN7@lzma_crc64:
$LN2@lzma_crc64:

; 66   :       }
; 67   : 	}
; 68   : 
; 69   : 	while (size-- != 0)

  00162	48 8b 4c 24 28	 mov	 rcx, QWORD PTR size$[rsp]
  00167	48 8b 44 24 28	 mov	 rax, QWORD PTR size$[rsp]
  0016c	48 83 e8 01	 sub	 rax, 1
  00170	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax
  00175	48 85 c9	 test	 rcx, rcx
  00178	74 42		 je	 SHORT $LN1@lzma_crc64

; 70   : 		crc = lzma_crc64_table[0][*buf++ ^ A1(crc)] ^ S8(crc);

  0017a	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  0017f	0f b6 10	 movzx	 edx, BYTE PTR [rax]
  00182	48 8b 44 24 30	 mov	 rax, QWORD PTR crc$[rsp]
  00187	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0018d	48 33 d0	 xor	 rdx, rax
  00190	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:lzma_crc64_table
  00197	48 8b 4c 24 30	 mov	 rcx, QWORD PTR crc$[rsp]
  0019c	48 c1 e9 08	 shr	 rcx, 8
  001a0	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]
  001a4	48 33 c1	 xor	 rax, rcx
  001a7	48 89 44 24 30	 mov	 QWORD PTR crc$[rsp], rax
  001ac	48 8b 44 24 20	 mov	 rax, QWORD PTR buf$[rsp]
  001b1	48 83 c0 01	 add	 rax, 1
  001b5	48 89 44 24 20	 mov	 QWORD PTR buf$[rsp], rax
  001ba	eb a6		 jmp	 SHORT $LN2@lzma_crc64
$LN1@lzma_crc64:

; 71   : 
; 72   : #ifdef WORDS_BIGENDIAN
; 73   : 	crc = bswap64(crc);
; 74   : #endif
; 75   : 
; 76   : 	return ~crc;

  001bc	48 8b 44 24 30	 mov	 rax, QWORD PTR crc$[rsp]
  001c1	48 f7 d0	 not	 rax

; 77   : }

  001c4	48 83 c4 18	 add	 rsp, 24
  001c8	c3		 ret	 0
lzma_crc64 ENDP
END
