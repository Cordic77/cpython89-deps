; Listing generated by Microsoft (R) Optimizing Compiler Version 15.00.30729.01 

include listing.inc

INCLUDELIB OLDNAMES

decoders DQ	4000000000000001H
	DQ	FLAT:lzma_lzma_decoder_init
	DQ	FLAT:lzma_lzma_decoder_memusage
	DQ	FLAT:lzma_lzma_props_decode
	DQ	0000000000000021H
	DQ	FLAT:lzma_lzma2_decoder_init
	DQ	FLAT:lzma_lzma2_decoder_memusage
	DQ	FLAT:lzma_lzma2_props_decode
	DQ	0000000000000004H
	DQ	FLAT:lzma_simple_x86_decoder_init
	DQ	0000000000000000H
	DQ	FLAT:lzma_simple_props_decode
	DQ	0000000000000005H
	DQ	FLAT:lzma_simple_powerpc_decoder_init
	DQ	0000000000000000H
	DQ	FLAT:lzma_simple_props_decode
	DQ	0000000000000006H
	DQ	FLAT:lzma_simple_ia64_decoder_init
	DQ	0000000000000000H
	DQ	FLAT:lzma_simple_props_decode
	DQ	0000000000000007H
	DQ	FLAT:lzma_simple_arm_decoder_init
	DQ	0000000000000000H
	DQ	FLAT:lzma_simple_props_decode
	DQ	0000000000000008H
	DQ	FLAT:lzma_simple_armthumb_decoder_init
	DQ	0000000000000000H
	DQ	FLAT:lzma_simple_props_decode
	DQ	0000000000000009H
	DQ	FLAT:lzma_simple_sparc_decoder_init
	DQ	0000000000000000H
	DQ	FLAT:lzma_simple_props_decode
	DQ	0000000000000003H
	DQ	FLAT:lzma_delta_decoder_init
	DQ	FLAT:lzma_delta_coder_memusage
	DQ	FLAT:lzma_delta_props_decode
;	COMDAT pdata
; File d:\sdk\c\library\algorithms\information theory and signal processing\coding theory\lossless compression algorithms\dictionary coders\lempel–ziv\lempel–ziv–markov chain (lzma)\xz\src\c89\liblzma\common\filter_decoder.c
pdata	SEGMENT
$pdata$decoder_find DD imagerel decoder_find
	DD	imagerel decoder_find+93
	DD	imagerel $unwind$decoder_find
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decoder_find DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT decoder_find
_TEXT	SEGMENT
i$ = 0
id$ = 32
decoder_find PROC					; COMDAT

; 205  : {	size_t i;

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 206  : 
; 207  : 	for (i = 0; i < ARRAY_SIZE(decoders); ++i)

  00009	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00011	eb 0c		 jmp	 SHORT $LN4@decoder_fi
$LN3@decoder_fi:
  00013	48 8b 04 24	 mov	 rax, QWORD PTR i$[rsp]
  00017	48 83 c0 01	 add	 rax, 1
  0001b	48 89 04 24	 mov	 QWORD PTR i$[rsp], rax
$LN4@decoder_fi:
  0001f	48 83 3c 24 09	 cmp	 QWORD PTR i$[rsp], 9
  00024	73 30		 jae	 SHORT $LN2@decoder_fi

; 208  : 		if (decoders[i].id == id)

  00026	48 8b 14 24	 mov	 rdx, QWORD PTR i$[rsp]
  0002a	48 6b d2 20	 imul	 rdx, 32			; 00000020H
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:decoders
  00035	48 8b 44 24 20	 mov	 rax, QWORD PTR id$[rsp]
  0003a	48 39 04 11	 cmp	 QWORD PTR [rcx+rdx], rax
  0003e	75 14		 jne	 SHORT $LN1@decoder_fi

; 209  : 			return decoders + i;

  00040	48 8b 0c 24	 mov	 rcx, QWORD PTR i$[rsp]
  00044	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:decoders
  0004f	48 03 c1	 add	 rax, rcx
  00052	eb 04		 jmp	 SHORT $LN5@decoder_fi
$LN1@decoder_fi:

; 210  : 
; 211  : 	return NULL;

  00054	eb bd		 jmp	 SHORT $LN3@decoder_fi
$LN2@decoder_fi:
  00056	33 c0		 xor	 eax, eax
$LN5@decoder_fi:

; 212  : }

  00058	48 83 c4 18	 add	 rsp, 24
  0005c	c3		 ret	 0
decoder_find ENDP
PUBLIC	lzma_properties_decode
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_properties_decode DD imagerel $LN7
	DD	imagerel $LN7+151
	DD	imagerel $unwind$lzma_properties_decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_properties_decode DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_properties_decode
_TEXT	SEGMENT
fd$33075 = 32
tv71 = 40
filter$ = 64
allocator$ = 72
props$ = 80
props_size$ = 88
lzma_properties_decode PROC				; COMDAT

; 254  : {

$LN7:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 255  : 	// Make it always NULL so that the caller can always safely free() it.
; 256  : 	filter->options = NULL;

  00018	48 8b 44 24 40	 mov	 rax, QWORD PTR filter$[rsp]
  0001d	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 257  : 
; 258  :   {
; 259  : 	const lzma_filter_decoder *const fd = decoder_find(filter->id);

  00025	48 8b 4c 24 40	 mov	 rcx, QWORD PTR filter$[rsp]
  0002a	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0002d	e8 00 00 00 00	 call	 decoder_find
  00032	48 89 44 24 20	 mov	 QWORD PTR fd$33075[rsp], rax

; 260  : 	if (fd == NULL)

  00037	48 83 7c 24 20
	00		 cmp	 QWORD PTR fd$33075[rsp], 0
  0003d	75 07		 jne	 SHORT $LN2@lzma_prope

; 261  : 		return LZMA_OPTIONS_ERROR;

  0003f	b8 08 00 00 00	 mov	 eax, 8
  00044	eb 4c		 jmp	 SHORT $LN3@lzma_prope
$LN2@lzma_prope:

; 262  : 
; 263  : 	if (fd->props_decode == NULL)

  00046	48 8b 44 24 20	 mov	 rax, QWORD PTR fd$33075[rsp]
  0004b	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00050	75 20		 jne	 SHORT $LN1@lzma_prope

; 264  : 		return props_size == 0 ? LZMA_OK : LZMA_OPTIONS_ERROR;

  00052	48 83 7c 24 58
	00		 cmp	 QWORD PTR props_size$[rsp], 0
  00058	75 0a		 jne	 SHORT $LN5@lzma_prope
  0005a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
  00062	eb 08		 jmp	 SHORT $LN6@lzma_prope
$LN5@lzma_prope:
  00064	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR tv71[rsp], 8
$LN6@lzma_prope:
  0006c	8b 44 24 28	 mov	 eax, DWORD PTR tv71[rsp]
  00070	eb 20		 jmp	 SHORT $LN3@lzma_prope
$LN1@lzma_prope:

; 265  : 
; 266  : 	return fd->props_decode(
; 267  : 			&filter->options, allocator, props, props_size);

  00072	48 8b 4c 24 40	 mov	 rcx, QWORD PTR filter$[rsp]
  00077	48 83 c1 08	 add	 rcx, 8
  0007b	4c 8b 4c 24 58	 mov	 r9, QWORD PTR props_size$[rsp]
  00080	4c 8b 44 24 50	 mov	 r8, QWORD PTR props$[rsp]
  00085	48 8b 54 24 48	 mov	 rdx, QWORD PTR allocator$[rsp]
  0008a	48 8b 44 24 20	 mov	 rax, QWORD PTR fd$33075[rsp]
  0008f	ff 50 18	 call	 QWORD PTR [rax+24]
$LN3@lzma_prope:

; 268  :   }
; 269  : }

  00092	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00096	c3		 ret	 0
lzma_properties_decode ENDP
_TEXT	ENDS
PUBLIC	lzma_raw_decoder_memusage
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_raw_decoder_memusage DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$lzma_raw_decoder_memusage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_raw_decoder_memusage DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_raw_decoder_memusage
_TEXT	SEGMENT
filters$ = 48
lzma_raw_decoder_memusage PROC				; COMDAT

; 245  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 246  : 	return lzma_raw_coder_memusage(
; 247  : 			(lzma_filter_find)(&decoder_find), filters);

  00009	48 8b 54 24 30	 mov	 rdx, QWORD PTR filters$[rsp]
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:decoder_find
  00015	e8 00 00 00 00	 call	 lzma_raw_coder_memusage

; 248  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
lzma_raw_decoder_memusage ENDP
PUBLIC	lzma_raw_decoder_init
;	COMDAT pdata
pdata	SEGMENT
$pdata$lzma_raw_decoder_init DD imagerel $LN3
	DD	imagerel $LN3+56
	DD	imagerel $unwind$lzma_raw_decoder_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lzma_raw_decoder_init DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lzma_raw_decoder_init
_TEXT	SEGMENT
next$ = 64
allocator$ = 72
options$ = 80
lzma_raw_decoder_init PROC				; COMDAT

; 225  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 226  : 	return lzma_raw_coder_init(next, allocator,
; 227  : 			options, (lzma_filter_find)(&decoder_find), false);

  00013	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  00018	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:decoder_find
  0001f	4c 8b 44 24 50	 mov	 r8, QWORD PTR options$[rsp]
  00024	48 8b 54 24 48	 mov	 rdx, QWORD PTR allocator$[rsp]
  00029	48 8b 4c 24 40	 mov	 rcx, QWORD PTR next$[rsp]
  0002e	e8 00 00 00 00	 call	 lzma_raw_coder_init

; 228  : }

  00033	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00037	c3		 ret	 0
lzma_raw_decoder_init ENDP
END
